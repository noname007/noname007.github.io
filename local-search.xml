<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>分布式锁 - Redlock</title>
    <link href="/2024/11/27/redlock.html"/>
    <url>/2024/11/27/redlock.html</url>
    
    <content type="html"><![CDATA[<h2 id="redlock">Redlock</h2><h3 id="锁所需要具有的属性">锁所需要具有的属性</h3><ol type="1"><li>独享 - 在任意一个时刻，只有一个客户端持有锁</li><li>无死锁 - 持锁客户端失联（崩溃、网络分区），锁仍然可以被自动释放</li><li>容错 - 只要大部分Redis节点都活着，客户端就可以获取和释放锁</li></ol><h3 id="面临的问题">面临的问题</h3><ol type="1"><li>系统层 - 网络分区、崩溃、重启等问题</li><li>Redis层 - Redis节点的崩溃、重启等问题</li><li>客户端层 - 客户端的崩溃、重启等问题</li><li>重入 - 同一个客户端多次获取锁</li><li>锁续期 - 锁的有效期到了，但是业务还没有执行完，需要续期</li><li>释放 - 释放锁的时候，锁已经被其他客户端获取</li><li>时钟漂移 - 不同的Redis节点的时间不一致</li><li>时钟回拨 - 时钟回拨导致锁的有效期不准确</li><li>误删 - 误删其他客户端的锁</li><li></li></ol><h3 id="解决方法">解决方法</h3><ol type="1"><li>互斥性 - 通过SETNX命令实现</li><li>无死锁 - 通过设置锁的过期时间实现</li><li>容错性 - 通过大多数原则实现</li><li>重入 - 通过客户端ID实现</li><li>锁续期 - 通过锁的过期时间实现</li><li>释放 - 通过客户端ID实现</li><li>时钟漂移 - 通过设置锁的过期时间实现</li><li>时钟回拨 - 通过设置锁的过期时间实现</li><li>误删 - 通过客户端ID实现</li></ol><h3 id="算法">算法</h3><h4 id="单机算法">单机算法</h4><ol type="1"><li><p>获取锁</p><p><code>SET resource_name my_random_value NX PX 30000</code></p></li><li><p>释放锁</p></li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">if</span> redis.call(<span class="hljs-string">&quot;get&quot;</span>,KEYS[<span class="hljs-number">1</span>]) == ARGV[<span class="hljs-number">1</span>] <span class="hljs-keyword">then</span> <br>  <span class="hljs-keyword">return</span> redis.call(<span class="hljs-string">&quot;del&quot;</span>,KEYS[<span class="hljs-number">1</span>]) <br><span class="hljs-keyword">else</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> <br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h4 id="分布式算法">分布式算法</h4><ol type="1"><li>获取锁<ol type="1"><li>生成一个随机的客户端ID</li><li>依次向N个Redis节点获取锁</li><li>如果大多数Redis节点都获取到了锁，那么认为获取锁成功</li><li>如果获取锁失败，那么向所有Redis节点释放锁</li></ol></li></ol><h2 id="yii2-redis-lock-代码实现">Yii2 Redis lock 代码实现</h2><figure><img src="/assets/imgs/2024-11-23_13-54.png" alt="类图" /><figcaption aria-hidden="true">类图</figcaption></figure><ol type="1"><li>随机数获取实现<code>Yii::$app-&gt;security-&gt;generateRandomString</code> 底层依赖https://www.php.net/manual/en/function.random-bytes.php</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Acquires a lock by name.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $name of the lock to be acquired. Must be unique.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> int $timeout time (in seconds) to wait for lock to be released. Defaults to `0` meaning that method will return</span><br><span class="hljs-comment">     * false immediately in case lock was already acquired.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> bool lock acquiring result.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">acquireLock</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$timeout</span> = <span class="hljs-number">0</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$key</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">calculateKey</span>(<span class="hljs-variable">$name</span>);<br>        <span class="hljs-variable">$value</span> = <span class="hljs-title class_">Yii</span>::<span class="hljs-variable">$app</span>-&gt;security-&gt;<span class="hljs-title function_ invoke__">generateRandomString</span>(<span class="hljs-number">20</span>);<br><br>        <span class="hljs-variable">$result</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">retryAcquire</span>(<span class="hljs-variable">$timeout</span>, function () <span class="hljs-keyword">use</span> ($<span class="hljs-title">key</span>, $<span class="hljs-title">value</span>) &#123;<br>            <span class="hljs-title">return</span> $<span class="hljs-title">this</span>-&gt;<span class="hljs-title">redis</span>-&gt;<span class="hljs-title">executeCommand</span>(&#x27;<span class="hljs-title">SET</span>&#x27;, [$<span class="hljs-title">key</span>, $<span class="hljs-title">value</span>, &#x27;<span class="hljs-title">NX</span>&#x27;, &#x27;<span class="hljs-title">PX</span>&#x27;, (<span class="hljs-title">int</span>) ($<span class="hljs-title">this</span>-&gt;<span class="hljs-title">expire</span> * 1000)]);<br>        &#125;);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;_lockValues[<span class="hljs-variable">$name</span>] = <span class="hljs-variable">$value</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Releases acquired lock. This method will return `false` in case the lock was not found or Redis command failed.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $name of the lock to be released. This lock must already exist.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> bool lock release result: `false` in case named lock was not found or Redis command failed.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">releaseLock</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">static</span> <span class="hljs-variable">$releaseLuaScript</span> = <span class="hljs-string">&lt;&lt;&lt;LUA</span><br><span class="hljs-string">if redis.call(&quot;GET&quot;,KEYS[1])==ARGV[1] then</span><br><span class="hljs-string">    return redis.call(&quot;DEL&quot;,KEYS[1])</span><br><span class="hljs-string">else</span><br><span class="hljs-string">    return 0</span><br><span class="hljs-string">end</span><br><span class="hljs-string">LUA</span>;<br>        <span class="hljs-keyword">if</span> (<br>            !<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;_lockValues[<span class="hljs-variable">$name</span>])<br>            || !<span class="hljs-variable language_">$this</span>-&gt;redis-&gt;<span class="hljs-title function_ invoke__">executeCommand</span>(<span class="hljs-string">&#x27;EVAL&#x27;</span>, [<br>                <span class="hljs-variable">$releaseLuaScript</span>,<br>                <span class="hljs-number">1</span>,<br>                <span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">calculateKey</span>(<span class="hljs-variable">$name</span>),<br>                <span class="hljs-variable">$this</span>-&gt;_lockValues[<span class="hljs-variable">$name</span>],<br>            ])<br>        ) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;_lockValues[<span class="hljs-variable">$name</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Generates a unique key used for storing the mutex in Redis.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $name mutex name.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string a safe cache key associated with the mutex name.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculateKey</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;keyPrefix . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">json_encode</span>([<span class="hljs-keyword">__CLASS__</span>, <span class="hljs-variable">$name</span>]));<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Yii2</tag>
      
      <tag>并发</tag>
      
      <tag>Redis</tag>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang - N个协程交替打印数字</title>
    <link href="/2024/07/02/goroutin-print-number.html"/>
    <url>/2024/07/02/goroutin-print-number.html</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>N个协程交替打印数字，到达一个数值后终止</p>          </div><h2 id="网友解法">网友解法</h2><p>网上搜索的解法大概如下，网友错别字地方已经修复</p><blockquote><p>启动N个协程，共用一个外部变量计数器，计数器范围是1到100</p><p>开启N个<code>无</code>缓冲chan，chans[i]塞入数据代表协程i可以进行打印了，打印的数字就是计数器的数</p><p>协程i一直阻塞，直到chan[i]通道有数据可以拉，才打印</p></blockquote><h2 id="分析">分析</h2><p>大思路没有问题，但<ahref="https://gist.github.com/noname007/6fd0a23920fa115618dbef2504511727?permalink_comment_id=5108543#gistcomment-5108543">具体实现</a>的小细节处理上存在两个问题。</p><ul><li>N 为 1 的时候存在死锁问题</li><li>程序运行完后，协程没有回收，这个比较严重。<ul><li>首先，破坏了<code>谁申请、谁释放</code>资源管理的基本设计原则</li><li>其次，常驻内存运行时如果经常被其他协程调用，应用有 OOM 的风险。</li></ul></li></ul><p>只能作为一次性脚本调用，运行结束后整个进程被操作系统回收。针对两个问题做如下修正:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><br><br><span class="hljs-keyword">var</span> counter = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">const</span> CounterMaxValue = <span class="hljs-number">100</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">DoJob</span><span class="hljs-params">(GoRoutineNum <span class="hljs-type">int</span>)</span></span> &#123;<br><br>    <span class="hljs-comment">//用于控制业务逻辑</span><br>    sigChannel := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, GoRoutineNum)<br>    <span class="hljs-comment">//用于控制协成是否终结</span><br>    quitSigChannel := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, GoRoutineNum)<br><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; (GoRoutineNum); i++ &#123;<br>        sigChannel[i] = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br>        quitSigChannel[i] = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br>    &#125;<br><br>    mainRoutine := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br><br>    wg := sync.WaitGroup&#123;&#125;<br><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; GoRoutineNum; i++ &#123;<br>        wg.Add(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(idx <span class="hljs-type">int</span>)</span></span> &#123;<br>            <span class="hljs-keyword">defer</span> wg.Done()<br>            <span class="hljs-comment">//FOR:</span><br>            <span class="hljs-keyword">for</span> &#123;<br>                <span class="hljs-keyword">select</span> &#123;<br>                <span class="hljs-keyword">case</span> &lt;-quitSigChannel[idx]:<br>                    <span class="hljs-comment">//break FOR</span><br>                    <span class="hljs-keyword">goto</span> END<br>                <span class="hljs-keyword">case</span> &lt;-sigChannel[idx]:<br>                    fmt.Printf(<span class="hljs-string">&quot;goroutine-num:%d %d\n&quot;</span>, idx, counter)<br>                    counter += <span class="hljs-number">1</span><br>                    mainRoutine &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>                &#125;<br><br>            &#125;<br>        END:<br>            fmt.Printf(<span class="hljs-string">&quot;goroutine-num:%d end\n&quot;</span>, idx)<br>        &#125;(i)<br>    &#125;<br><br>    wg.Add(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        wg.Done()<br><br>        <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; CounterMaxValue; i++ &#123;<br>            <span class="hljs-comment">//&lt;-mainRoutine</span><br>            sigChannel[i%GoRoutineNum] &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>            &lt;-mainRoutine<br>        &#125;<br><br>        <span class="hljs-comment">////使最后一个任务处理协成，进入信号等待状态</span><br>        <span class="hljs-comment">//&lt;-mainRoutine</span><br><br>        <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; GoRoutineNum; i++ &#123;<br>            quitSigChannel[i] &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>        &#125;<br>    &#125;()<br><br>    <span class="hljs-comment">//mainRoutine &lt;- struct&#123;&#125;&#123;&#125;</span><br>    wg.Wait()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    DoJob(<span class="hljs-number">10</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>并发</tag>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>volatile 实战 - 使用信号实现 sleep 函数</title>
    <link href="/2024/06/17/volatile.html"/>
    <url>/2024/06/17/volatile.html</url>
    
    <content type="html"><![CDATA[<h2 id="源码">源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> sleepFlag = <span class="hljs-number">1</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">alrm_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> signo)</span>&#123;<br>    sleepFlag = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">mySleep</span><span class="hljs-params">(<span class="hljs-type">int</span> sec)</span><br>&#123;<br>    signal(SIGALRM,alrm_handler);<br>    alarm(sec);<br>    <br>    <span class="hljs-keyword">while</span>(sleepFlag);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>开启优化选项后，程序变成了死循环。从下面的汇编代码，不难发现编译器优化了sleepFlag 的读取，导致了死循环。</p><figure><img src="/assets/2024-06-17-O0.png" title="不开启优化"alt="不开启优化" /><figcaption aria-hidden="true">不开启优化</figcaption></figure><figure><img src="/assets/2024-06-17-O3.png" title="O3 优化" alt="O3 优化" /><figcaption aria-hidden="true">O3 优化</figcaption></figure><h2 id="volatile-使用场景总结-1">volatile 使用场景总结<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="[https://blog.csdn.net/tigerjibo/article/details/7427366](https://blog.csdn.net/tigerjibo/article/details/7427366)">[1]</span></a></sup></h2><h3id="在中断服务程序中进行修改的共享变量">在中断服务程序中进行修改的共享变量</h3><p>上面中 <code>sleepFlag</code> 就是一个很好的例子。</p><h3 id="多线程间共享的变量">多线程间共享的变量</h3><h3id="对硬件寄存器2进行映射的变量">对硬件寄存器<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="[https://www.runoob.com/w3cnote/c-volatile-keyword.html](https://www.runoob.com/w3cnote/c-volatile-keyword.html)">[2]</span></a></sup>进行映射的变量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span>  *output = (<span class="hljs-type">unsigned</span>  <span class="hljs-type">int</span> *)<span class="hljs-number">0xff800000</span>;<span class="hljs-comment">//定义一个IO端口；</span><br><span class="hljs-type">int</span>   <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-comment">//会被优化为 *output = 9</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt; <span class="hljs-number">10</span>;i++)&#123;<br>        *output = i;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考">参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><ahref="https://blog.csdn.net/tigerjibo/article/details/7427366">https://blog.csdn.net/tigerjibo/article/details/7427366</a><a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><ahref="https://www.runoob.com/w3cnote/c-volatile-keyword.html">https://www.runoob.com/w3cnote/c-volatile-keyword.html</a><a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><ahref="https://zh.wikipedia.org/wiki/%E7%A1%AC%E9%AB%94%E6%9A%AB%E5%AD%98%E5%99%A8">硬件寄存器</a><a href="#fnref:3" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gitlab CI/CD 改造回顾总结 ♻️</title>
    <link href="/2024/06/04/xhs-gitlab-ci.html"/>
    <url>/2024/06/04/xhs-gitlab-ci.html</url>
    
    <content type="html"><![CDATA[<p><img src="/assets/imgs/2025-05-25_211849_851.png" /></p><h2 id="背景">背景</h2><p>我是22年入职的公司。</p><p>在熟悉环境的过程中发现：公司对 Go的支持人力投入有限，构建过程缺少规范、没有指导文档。比我入职早的一位同事，靠自己东找找西找找，缝合了一个Gitlab 的 <code>yml</code> 文件。</p><p>我当时觉得这是一个很奇葩的事情，就拉上中间件团队、研效、基础设施团队的同事组了一个公司的Go 技术交流群。沟通过程中发现，构建 Go 基础镜像的<code>Dockerfile</code> 文件也丢失了，这下可好一件事变成了两件事。</p><p>针对 <code>Gitlab 的编排流程</code>和<code>Go基础镜像的构建</code>，结合自己的项目实际情况进行了<code>造轮子</code>。去年9月，研效团队把<code>Go 基础镜像的构建</code>的也接过手去了，对这件事算是画上了一个相对完满的句号。下面对造轮子的过程进行一个简要的回顾总结。</p><h2 id="研发流程">研发流程</h2><p>先简单的说下 CI 流程</p><figure><img src="/assets/2024-06-04-xhs-ci-cd-flow.png"title="代码集成、构建、发版流程" alt="集成、发版流程" /><figcaption aria-hidden="true">集成、发版流程</figcaption></figure><ol type="1"><li>开发人员提交代码到 Gitlab</li><li>Gitlab CI/CD 自动构建</li><li>构建成功后，镜像推送到 Harbor</li><li>研发人员去发版系统选择构建好的镜像进行发布到测试、正式环境</li></ol><h2 id="改造">改造</h2><p><img src="/assets/imgs/2024-06-04-gitlab-ci-workflow.drawio.png"title="Gitlab CI/CD 工作流程" /></p><h3 id="改造-golang-基础镜像">改造 Golang 基础镜像</h3><h4 id="反解旧镜像dockerfile">反解旧镜像<code>Dockerfile</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -v /var/run/docker.sock:/var/run/docker.sock --rm alpine/dfimage $&#123;PRIVATE_DOCKER_REPO&#125;/base/xhs-golang:1.15 <br></code></pre></td></tr></table></figure><p>从输出结果来看主要需要做了如下几件事情 1. 基础镜像使用<code>debian:buster-20200803</code> 2. copy go 1.15 的包到镜像内 3. 更改apt 镜像源 4. 修改时区、语言设置、环境变量 5.安装一些依赖使用的软件包</p><h4 id="重新封装-golang-基础镜像-dockerfile">重新封装 Golang 基础镜像Dockerfile</h4><p>基于反解后的信息，和同事先前做的 CI 脚本重新封装了一个 Golang的基础镜像。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> golang:<span class="hljs-number">1.18</span>-bullseye<br><br><span class="hljs-keyword">RUN</span><span class="language-bash">  <span class="hljs-built_in">cat</span> /etc/apt/sources.list &amp;&amp; \</span><br><span class="language-bash">     sed -i <span class="hljs-string">&quot;s/deb.debian.org/mirrors.tuna.tsinghua.edu.cn/g&quot;</span> /etc/apt/sources.list &amp;&amp; \</span><br><span class="language-bash">     sed -i <span class="hljs-string">&quot;s/security.debian.org/mirrors.tuna.tsinghua.edu.cn/g&quot;</span> /etc/apt/sources.list &amp;&amp; \</span><br><span class="language-bash">     <span class="hljs-built_in">cat</span> /etc/apt/sources.list &amp;&amp; \</span><br><span class="language-bash">     apt update &amp;&amp;  \</span><br><span class="language-bash">     apt install upx -y &amp;&amp; \</span><br><span class="language-bash">     <span class="hljs-built_in">rm</span> -rf /var/lib/apt/lists/*</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">cp</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime  \</span><br><span class="language-bash">         &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span> &gt; /etc/timezone  \</span><br><span class="language-bash">         &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;alias ll=&#x27;ls -l --color&#x27;&quot;</span> &gt;&gt; /root/.bashrc</span><br><br><span class="hljs-keyword">ENV</span>  GO111MODULE=on GOPROXY=https://goproxy.cn GOPRIVATE=code.devops.xiaohongshu.com<br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> git config --global url.<span class="hljs-string">&quot;git@code.devops.xiaohongshu.com:&quot;</span>.insteadof <span class="hljs-string">&quot;https://code.devops.xiaohongshu.com/&quot;</span> &amp;&amp; \</span><br><span class="language-bash">    git config --global --add url.<span class="hljs-string">&quot;git@code.devops.xiaohongshu.com:&quot;</span>.insteadof <span class="hljs-string">&quot;http://code.devops.xiaohongshu.com/&quot;</span></span><br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> id_rsa /root/.ssh/</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> id_rsa.pub /root/.ssh/</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash">  ssh-keyscan code.devops.xiaohongshu.com &gt; /root/.ssh/known_hosts &amp;&amp; \</span><br><span class="language-bash">      <span class="hljs-built_in">chmod</span> 600 ~/.ssh/id_rsa</span><br></code></pre></td></tr></table></figure><ol type="1"><li>基于 Go 官方提供的最新镜像<code>golang:1.18-bullseye</code>进行构建</li><li>修改镜像源、安装需要的用到的软件包、清理 apt 包缓存、更改时区</li><li>配置 Go 私有仓库、共有仓库代理。</li><li>配置密钥，防止 gitlab有些仓库因为权限问题无法拉取。密钥可以不配置，放在主机的某个文件路径下面，使用卷挂载的方式使进行共享。</li></ol><h3 id="改造-golang-应用程序运行时镜像">改造 Golang应用程序运行时镜像</h3><h4 id="反解旧镜像dockerfile-1">反解旧镜像<code>Dockerfile</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -v /var/run/docker.sock:/var/run/docker.sock alpine/dfimage  $&#123;PRIVATE_DOCKER_REPO&#125;/base/xhs-debian:10<br></code></pre></td></tr></table></figure><p>基础镜像的构建过程主要做了几件事： 1. 选定基础镜像： <ahref="https://dso.docker.com/images/debian/digests/sha256:a44ab0cca6cd9411032d180bc396f19bc98f71972d2398d50460145cab81c5ab">debian:buster-20200803</a>（xhs-debian构建时的Debian latest 版本） 2. 本地化设置：更改时区、设置语言字符集、更改镜像源3. 安装了一些非所有场景都需要的软件</p><h4 id="重新封装-golang-应用程序运行时镜像-dockerfile">重新封装 Golang应用程序运行时镜像 Dockerfile</h4><p>原理弄清楚，问题就很容易解决。下面对应用程序的基础镜像每一步做如下的优化升级：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> debian:stable-slim<br><br><span class="hljs-keyword">RUN</span><span class="language-bash">  <span class="hljs-built_in">cat</span> /etc/apt/sources.list &amp;&amp; \</span><br><span class="language-bash">     sed -i <span class="hljs-string">&quot;s/deb.debian.org/mirrors.tuna.tsinghua.edu.cn/g&quot;</span> /etc/apt/sources.list &amp;&amp; \</span><br><span class="language-bash">     sed -i <span class="hljs-string">&quot;s/security.debian.org/mirrors.tuna.tsinghua.edu.cn/g&quot;</span> /etc/apt/sources.list &amp;&amp; \</span><br><span class="language-bash">     <span class="hljs-built_in">cat</span> /etc/apt/sources.list</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">cp</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime  \</span><br><span class="language-bash">         &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span> &gt; /etc/timezone  \</span><br><span class="language-bash">         &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;alias ll=&#x27;ls -l --color&#x27;&quot;</span> &gt;&gt; /root/.bashrc</span><br><span class="hljs-keyword">ENV</span> LANG=C.UTF-<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><ol type="1"><li>换一个比较精巧的OS ，最后选了 Debian Slim (↘️<ahref="https://groups.google.com/g/golang-nuts/c/15TLaxqUpA0">alpine vsslim</a>)<ol type="1"><li>镜像相对来说也比较小：删除了很多运行时用不到的东西</li><li>glibc vs musl<ol type="1"><li>↘️<ahref="https://wiki.musl-libc.org/functional-differences-from-glibc.html">Functionaldifferences from glibc</a></li><li>musl 跑纯 Go 的项目一般问题不大，但是碰到需要使用依赖 glibc的项目就很麻烦</li></ol></li><li>包管理器，线上出现问题时，还能使用包管理器安装 Deb 包 排查问题</li><li>运行时用不到的软件就不装了，除了浪费空间、增加攻击面暂时也没发现其他用处~</li></ol></li><li>镜像源、语言、时区，照抄原来镜像的设置</li></ol><h4 id="效果">效果</h4><ol type="1"><li>镜像大小从 440M → 110M （alpine 能降到 36M ）</li><li>285个中、高、致命漏洞 降低为 23 个低级风险问题</li></ol><p><imgsrc="/assets/imgs/2024-06-04-old-golang-runtime-docker-image.png"title="旧运行时镜像" /></p><p><imgsrc="/assets/imgs/2024-06-04-new-golang-runtime-container-image.png"title="新运行时镜像" /></p><h3 id="改造-.gitlab-ci.yml">改造 <code>.gitlab-ci.yml</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> -x<br><span class="hljs-comment"># 基于 Dockerfile 构建镜像，并将构建后的镜像推送到私有镜像仓库</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">docker_build</span></span>() &#123;<br>    <span class="hljs-built_in">local</span> app_id=<span class="hljs-variable">$1</span><br>    <span class="hljs-built_in">local</span> docker_tags=<span class="hljs-variable">$2</span><br>    docker build .  -t <span class="hljs-variable">$&#123;PRIVATE_DOCKER_REPO&#125;</span>/qa/<span class="hljs-string">&quot;<span class="hljs-variable">$app_id</span>&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$docker_tags</span>&quot;</span><br>    docker login -u username -p passwordk <span class="hljs-variable">$&#123;PRIVATE_DOCKER_REPO&#125;</span><br>    docker push <span class="hljs-variable">$&#123;PRIVATE_DOCKER_REPO&#125;</span>/qa/<span class="hljs-string">&quot;<span class="hljs-variable">$app_id</span>&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$docker_tags</span>&quot;</span><br>&#125;<br><br><br><br><span class="hljs-comment"># 更改时区，不然 date 函数时间会计算错误</span><br>sed -i <span class="hljs-string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g&#x27;</span> /etc/apk/repositories<br>apk add -U tzdata<br><span class="hljs-built_in">cp</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br>CURRENT_DATETIME=<span class="hljs-string">&quot;<span class="hljs-subst">$(date +%Y%m%d_%H%M)</span>&quot;</span><br><br><br>tags=<span class="hljs-variable">$1</span><br>bin=<span class="hljs-variable">$2</span><br><span class="hljs-built_in">cp</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bin&#125;</span>&quot;</span> ./app<br>docker_build <span class="hljs-variable">$&#123;APP_ID&#125;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tags&#125;</span>_<span class="hljs-variable">$&#123;CURRENT_DATETIME&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 此镜像用于执行 docker 运行时镜像的构建</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">$&#123;PRIVATE_DOCKER_REPO&#125;/library/docker:v1.0</span><br><br><span class="hljs-comment"># gitlab 关键字，分几个阶段</span><br><span class="hljs-attr">stages:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">compile</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">publish</span><br><br><span class="hljs-comment"># 代码编译阶段</span><br><span class="hljs-attr">compile:</span><br>  <span class="hljs-attr">stage:</span> <span class="hljs-string">compile</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">$&#123;PRIVATE_DOCKER_REPO&#125;/qa/itworkspace:go_1.21_latest</span><br><br>  <span class="hljs-attr">before_script:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">go</span> <span class="hljs-string">version</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ls</span> <span class="hljs-string">-alh</span><br>  <span class="hljs-attr">script:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">go</span> <span class="hljs-string">mod</span> <span class="hljs-string">tidy</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">go</span> <span class="hljs-string">build</span> <span class="hljs-string">-o</span> <span class="hljs-string">./app_dir/http</span> <span class="hljs-string">./cmd/http.go</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">upx</span> <span class="hljs-string">./app_dir/http</span><br>  <br>  <span class="hljs-comment"># 编译成功后，将产物共享给下一个阶段</span><br>  <span class="hljs-attr">artifacts:</span><br>    <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./app_dir&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./conf&quot;</span><br>    <span class="hljs-attr">untracked:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># 编译成功后，才进行产物缓存</span><br>    <span class="hljs-attr">when:</span> <span class="hljs-string">on_success</span><br><br><span class="hljs-comment"># 镜像构建阶段</span><br><span class="hljs-attr">publish_http:</span><br>  <span class="hljs-attr">stage:</span> <span class="hljs-string">publish</span><br>  <span class="hljs-attr">script:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cp</span> <span class="hljs-string">./conf/app.sit.yaml</span> <span class="hljs-string">./conf/app.yaml</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span> <span class="hljs-string">./build.gitlab.sh</span> <span class="hljs-string">sit_http</span> <span class="hljs-string">./app_dir/http</span><br></code></pre></td></tr></table></figure><h2 id="参考资料">参考资料</h2><ol type="1"><li><div class="douban-card-block">    <a class="douban-card" href="https://book.douban.com/subject/26285268">        <div bg-lazy class="douban-card-bgimg" style="background-image: url('https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/s/public/s27967469.jpg');">        </div>        <div class="douban-card-left">            <div bg-lazy class="douban-card-img" style="background-image: url('https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/s/public/s27967469.jpg');">            </div>            <div class="douban-card-status">见字如晤</div>        </div>        <div class="douban-card-right" style="line-height: 1.7;">            <div class="douban-card-item"><span>书名: </span><strong>第一本Docker书</strong></div>            <div class="douban-card-item"><span>作者: </span><span>[澳]詹姆斯•特恩布尔（JamesTurnbull）</span></div>            <div class="douban-card-item"><span>出版年份: </span><span>2014-12</span></div>            <div class="douban-card-item"><span>评分: </span><span>7.3</span></div>        </div>    </a></div></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>构建</tag>
      
      <tag>部署</tag>
      
      <tag>Docker</tag>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用命令行批量删除 Github 仓库</title>
    <link href="/2024/05/28/delete-github-repo-use-gh-xargs.html"/>
    <url>/2024/05/28/delete-github-repo-use-gh-xargs.html</url>
    
    <content type="html"><![CDATA[<h2 id="安装-gh">安装 gh</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gh auth login<br>gh auth refresh -h github.com -s delete_repo<br></code></pre></td></tr></table></figure><h2 id="批量删除仓库">批量删除仓库</h2><p>待删除的仓库批量放入 <code>github.repo.txt</code>文本文件中，每行一个仓库名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> github.repo.txt | xargs -I &#123;&#125;  -n 1  gh repo delete &#123;&#125; --<span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><figure><img src="/assets/20240528.png" title="Image Title" alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thrift  一种 协议-工具 设计方法</title>
    <link href="/2022/04/10/a-protocol-design-method.html"/>
    <url>/2022/04/10/a-protocol-design-method.html</url>
    
    <content type="html"><![CDATA[<p><strong>双边通信是个复杂的问题</strong></p><h3 id="请求---响应">请求 - 响应</h3><p>双边通信本质来说是<code>请求-响应</code>模型，主动方发出一个服务请求，被动方给一个服务结果应答。事很简单，但实现起来确很费劲。</p><p>传输层协议提供信道传输模型-如TCP，应用层协议提供信息标准格式封装模型-如HTTP,RPC。</p><p>Thrift的设计方式对应用层协议设计有很好的参考意义</p><h2 id="thrift">thrift</h2><figure class="highlight thrift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs thrift"><span class="hljs-class"><span class="hljs-keyword">service</span> <span class="hljs-title">HelloWorldService</span> </span>&#123;<br>  <span class="hljs-type">string</span> say(<span class="hljs-number">1</span>: <span class="hljs-type">string</span> username)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(ServerConfig.SERVER_PORT);<br>        <span class="hljs-type">TServerSocket</span> <span class="hljs-variable">serverTransport</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TServerSocket</span>(serverSocket);<br>        HelloWorldService.<span class="hljs-type">Processor</span> <span class="hljs-variable">processor</span> <span class="hljs-operator">=</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloWorldService</span>.Processor&lt;HelloWorldService.Iface&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloWorldServiceImpl</span>());<br><br>        TBinaryProtocol.<span class="hljs-type">Factory</span> <span class="hljs-variable">protocolFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TBinaryProtocol</span>.Factory();<br>        TSimpleServer.<span class="hljs-type">Args</span> <span class="hljs-variable">tArgs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TSimpleServer</span>.Args(serverTransport);<br>        tArgs.processor(processor);<br>        tArgs.protocolFactory(protocolFactory);<br><br>        <span class="hljs-comment">// 简单的单线程服务模型 一般用于测试</span><br>        <span class="hljs-type">TServer</span> <span class="hljs-variable">tServer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TSimpleServer</span>(tArgs);<br>        System.out.println(<span class="hljs-string">&quot;Running Simple Server&quot;</span>);<br>        tServer.serve();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结合代码，从架构上看拆分了四层<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://juejin.cn/post/6844903622380093447">[1]</span></a></sup></p><ul><li>服务层 <code>HelloWorldServiceImpl</code></li><li>处理层 <code>HelloWorldService.Processor</code></li><li>协议层 <code>TBinaryProtocol.Factory</code></li><li>传输层 <code>TServerSocket</code></li></ul><p><img src="/assets/imgs/thrift-arch-2022-04.png"title="https://www.cnblogs.com/mymelody/p/9474300.html" /></p><h2 id="分析">分析</h2><h3 id="为什么是-4-层">为什么是 4 层</h3><p>正常来说一个系统会考虑这么几个最近本的问题：具体功能、吞吐量、作业时间,显然thrift考虑到了下面几个问题</p><ol type="1"><li><p>传输信道是什么？系统吞吐量如何？</p></li><li><p>协议封装格式是什么？ 协议封装格式是否合法？</p></li><li><p>一个系统不可能只有一个服务，不同服务请求的服务如何进行 路由分发？</p></li><li><p>具体服务响应是什么，以何种封装格式返回？</p></li></ol><h3 id="设计者-使用者">设计者-使用者</h3><p>一个系统永远可以从设计者与使用者两个视角去看。thrift也不例外，暂时叫做<code>协议框架设计者</code>与<code>协议使用者</code>，处理层是两者的边界，利用<code>钩子（注入）</code>进行关注点分离。</p><ul><li><p>协议框架设计者</p><p>关注的整体的效率吞吐量、idl compiler工具，</p></li><li><p>协议使用者</p><p>关注的是工具易用性、接入成本。</p></li></ul><h3 id="标准---工具">标准 - 工具</h3><p>相比HTTP,thrift在模型上来说改进上进步不大，都在应用层。但通过对idl增加约束，引入工具，在工程上前进了一步，形成接口描述统一语言，减少沟通歧义。</p><h3 id="设计工具留意的其他点">设计工具留意的其他点</h3><ul><li><p>学习成本</p><p>带来额外的通信模型与工具学习成本</p></li><li><p>桥接</p><p>以开头代码为例，idl生成的代码从一个项目角度来说是在接口层，接口层有一套自己的设计模型理念，服务层使用的工具有一套工具理念。这层代码的桥接，本质是两种理念的差异弥合</p></li><li><p>兼容性</p><p>刨除标准版本升级导致的前向不兼容外，工具本身一定依赖其他工具，工具集合融入到另外的工具集合时就会遇到版本冲突问题。</p></li></ul><h2 id="参考资料">参考资料</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1"class="footnote-text"><span>https://juejin.cn/post/6844903622380093447<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2"class="footnote-text"><span>https://www.cnblogs.com/mymelody/p/9474300.html<a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:3"class="footnote-text"><span>https://www.bilibili.com/video/BV1aL4y157s7<a href="#fnref:3" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:4"class="footnote-text"><span>https://www.bilibili.com/video/BV1j44y1q7fy<a href="#fnref:4" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>https://thrift.apache.org/<a href="#fnref:5" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Thrift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迁回 Hexo</title>
    <link href="/2022/03/26/blog-migration.html"/>
    <url>/2022/03/26/blog-migration.html</url>
    
    <content type="html"><![CDATA[<h2 id="hexo-2-jekyll">Hexo 2 Jekyll</h2><p>Hexo是最早使用的工具，样式精美，主题切换也是很方，便部署工具友好。年轻总爱折腾，16年切换到了Jekyll。Jekeyll主题很多，但切换麻烦。本地构建预览，每隔一段时间总是莫名的出一些问题，小问题不死人但很恶心人。</p><h2 id="jekyll-2-org">Jekyll 2 Org</h2><p>有段时间用 Emacs 很上头， 感觉 Markdown 好难用，折腾了一段时间Org。DIY 友好，运维部署稍微有点麻烦。</p><h2 id="hexo">Hexo</h2><p>对于工具简单前段时间就想着牵回来了，这么多年了，牵回来也每个头绪，心烦意乱，往后拖延~</p><p>最近看 Manjaro 电报群 的劝退文https://blog.zhullyb.top/2021/01/01/Why-I-dont-recommend-Manjaro/发现这个Hexo主题不错，Fluid<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://hexo.fluid-dev.com/docs/guide/#slogan-%E6%89%93%E5%AD%97%E6%9C%BA">[3]</span></a></sup>文档也不错，瞬间感觉有点世外桃源人了，趁着有点心气，赶紧折腾下，切换回来。</p><p>老二最好的策略就是模仿，恩，开干，Hexo + Fluid + Waline</p><p>Hexo 升级<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://coldnew.github.io/hexo-org-example/2017/03/05/getting-started-with-hexo-and-org-mode/">[2]</span></a></sup><sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://leimingshan.com/posts/d9017f30/">[4]</span></a></sup></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs sh">// 配置镜像源<br>&gt; npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com<br><br>//以下指令均在Hexo目录下操作，先定位到Hexo目录<br>//查看当前版本，判断是否需要升级<br>&gt; hexo version<br><br>//全局升级hexo-cli<br>&gt; npm i hexo-cli -g<br><br>//再次查看版本，看hexo-cli是否升级成功<br>&gt; hexo version<br><br>//安装npm-check，若已安装可以跳过<br>&gt; npm install -g npm-check<br><br>//检查系统插件是否需要升级<br>&gt; npm-check<br><br>//安装npm-upgrade，若已安装可以跳过<br>&gt; npm install -g npm-upgrade<br><br>//更新package.json<br>&gt; npm-upgrade<br><br>//更新全局插件<br>&gt; npm update -g<br><br>//更新系统插件<br>&gt; npm update --save<br><br>//再次查看版本，判断是否升级成功<br>&gt; hexo version<br><br>// 安装 hexo 依赖<br>&gt; npm i -d<br><br>// 更新 hexo 依赖<br>&gt; npm update -d<br></code></pre></td></tr></table></figure><p>Hexo + Fluid + Waline + Emacs + Markdown就是以后的写字基本工具了。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1"class="footnote-text"><span>http://mpwang.github.io/2019/02/13/how-to-write-hexo-blog-with-org-mode/<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2"class="footnote-text"><span>https://coldnew.github.io/hexo-org-example/2017/03/05/getting-started-with-hexo-and-org-mode/<a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:3"class="footnote-text"><span>https://hexo.fluid-dev.com/docs/guide/#slogan-%E6%89%93%E5%AD%97%E6%9C%BA<a href="#fnref:3" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:4"class="footnote-text"><span>https://leimingshan.com/posts/d9017f30/<a href="#fnref:4" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>jekyll</tag>
      
      <tag>emacs</tag>
      
      <tag>waline</tag>
      
      <tag>org</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工作居住证</title>
    <link href="/2022/03/25/gongzuojuzhuzheng.html"/>
    <url>/2022/03/25/gongzuojuzhuzheng.html</url>
    
    <content type="html"><![CDATA[<p><ahref="https://fw.bjrcgz.gov.cn/person-platform/#/person-platform/overview">人才业务办理平台</a></p><h2 id="系统老旧升级缓慢">系统老旧，升级缓慢</h2><p>20年9月份，公司给员工统一办理工作居住证，这项业务已暂停办理有两年左右了。分批办理，每两周一批。本批次没有凑集够材料的，下批次继续。公司投入人力巨大，自己前前后后弄了有将近一个月的时间才把材料凑全，唯一的感觉时政务信息系统不是一般的难用。</p><p>收集的材料基本全是税收、社保、居住、学历学位、婚姻、职称等相关的材料，有些系统当时比较老旧只支持IE 8，搞得我还装了个虚拟机，在里装了一个已经废弃好多年不用的 XP系统跑IE。</p><p>前段时间换了工作，工作居住证需要办理交接，按照公司的行政同事的指南操作，发现系统改进不少。首先系统升级了，登录方式也便捷不少，支持医保卡、北京通、微信、支付宝等多种常见的方式。但是进来后发现原先的资料都丢了，最后从同事处得知，21年7月份系统升级的时候，此前所有材料全部丢失，需要自行补充，<code>囧</code>。</p><h2 id="事虽小侮辱性大">事虽小，侮辱性大</h2><p>时间拖的一般非常长，社保、税收公司交替，前面做完公司关联，后面等一个月后再补充材料，拖拖拉拉，毫无效率，前面看的指导文档，后面估计还需要再看一边。从总耗费时间上来，大概需要16-24小时。我的同事就因为这玩意复杂，换工作后就一直没弄。每次需要准备材料，电子版的先打印、找人盖章、再扫描电子化，这个操作也跟吃屎一样蠢。经过多次折磨都快患上政务办理PTSD了。</p><h2 id="信息系统基础建设问题多">信息系统基础建设问题多</h2><p>从正常人的理解，税收、社保、居住、学历学位、婚姻、职称、征信、房产、医疗、行程流调这些个人信息资料其实都在国家的数据系统中，为啥办理事情的时候效率总是这么低呢？</p><p>基本就是信息系统建设的缺失。</p><p>首先这些数据在政府内部其实是不互通的，从每次办理事情都需要提供户口本首页、本人页面，结婚证信息，可以看到信息时跨职能部门不通的，医疗信息，你会发现各家公立医院是根本不互通的，有很多重复检查的问题<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="2022年3月1日起看病换医院不需重复检查 https://www.thepaper.cn/newsDetail_forward_16905493">[1]</span></a></sup>。政府部门跨地域，跨职能数据并没有很有效的打通，导致办事效率很低。当然也有些改进的地方，流调，交通违章信息基本上打通了，身份证可以异地办理了，但瑜不掩瑕。</p><p>其次，这些数据如何被开放使用，以及如何使用做的并不好。使用的过程中明显能感觉出来，他们之间有<code>信息流鸿沟</code>。而填平鸿沟的方式就是每一个人在不同的系统之间来回腾挪，浪费时间，在一个系统查询、下载、打印、扫描电子化，在另外一个系统提交、审核、入系统。</p><p>系统间信息流合法授权使用有时候说简单确实也很简单，只需要做好两件事情- 请求获取数据的人是有权获取的 - 提交数据的人数据就是他本人的数据</p><p>剩下的靠信息系统之间打通就可以了，人在信息系统中所做的事情其实只是授权给信息系统代理而已。</p><p>平衡好授权使用与安全问题很难。方式可能也有很多方式去解决，但肯定不是现在这么愚蠢的方式。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1"class="footnote-text"><span>2022年3月1日起看病换医院不需重复检查https://www.thepaper.cn/newsDetail_forward_16905493<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>manjaro 使用攻略</title>
    <link href="/2022/03/18/manjaro.html"/>
    <url>/2022/03/18/manjaro.html</url>
    
    <content type="html"><![CDATA[<h2 id="yay">yay</h2><h3 id="pkg-构建目录">pkg 构建目录</h3><pre><code class="hljs">`~/.cache/yay/pkg/`</code></pre><p>安装过程有时会出现问题，手工介入，解决速度会快不少。先前装drawio的时候经常下载一般旧挂了，浏览器下载完后copy到目录 重新yay 可以继续往后执行。</p><h3 id="安装过程修改-pkgbuild">安装过程修改 PKGBUILD</h3><p>需要联公司VPN，本来琢磨 openconnect应该能解决问题，没想到某服自己单独玩了一套。安装EeasyConnect时，官方提供的最新的包版本号没有变，但是md5 发生了变化，不知道他们在搞什么鬼。</p><p>着急用，需要修改PKGBUILD 尝试了两个没有效果的解决方案<code>yay --editmenu --save</code><code>yay -G &lt;pkgname&gt;</code>，直接进入构建目录后，手动修改构建脚本快，改完后编译、安装一分钟不到解决问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd .cache/yay/easyconnect<br>md5sum <br>makepkg -si<br></code></pre></td></tr></table></figure><h3 id="清缓存">清缓存</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay -Sc<br><br>pacman -Qqtd| <span class="hljs-built_in">sudo</span> pacman -Rs -<br><br>paru -Sc<br></code></pre></td></tr></table></figure><p>跑了有一年多了前段时间看硬盘不足二十个G了，清清缓存节约了 80G</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">[2020-11-04T19:24:07+0800] [ALPM] running &#x27;update-mime-database.hook&#x27;...<br>[2020-11-04T19:28:49+0800] [PACMAN] Running &#x27;pacman -Syyu&#x27;<br></code></pre></td></tr></table></figure><h2 id="backup">backup</h2><h3 id="系统引导修复">系统引导修复</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">lsblk -f<br>vim /etc/fstab<br>mkinitcpio -P<br><br>grub-install --target=x86_64-efi --efi-directory=/boot/efi --removable --recheck --force<br>update-grub<br></code></pre></td></tr></table></figure><h2 id="virtualbox">VirtualBox</h2><h3 id="virtualbox-cannot-register-the-hard-disk-解决办法-1">VirtualBox– Cannot register the hard disk 解决办法<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://stackoverflow.com/questions/44114854/virtualbox-cannot-register-the-hard-disk-already-exists">[1]</span></a></sup></h3><pre><code class="hljs">File -&gt; Virtual Media Manager -&gt; Removed existing images (note, I removed them only from the registry).</code></pre><h3 id="压缩-vdi-磁盘大小">压缩 vdi 磁盘大小</h3><p>vmdk 格式不支持，vdi 压缩前，需要先进入虚拟机中把没有使用的磁盘位置填充 0</p><p>windows工具：<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://www.appinn.com/sdelete-for-windows/">[2]</span></a></sup></p><pre><code class="hljs">https://docs.microsoft.com/en-us/sysinternals/downloads/sdelete</code></pre><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sdelete64.exe -z c:  <span class="hljs-comment"># 对 C 盘剩余空间写零，适合虚拟磁盘优化</span><br></code></pre></td></tr></table></figure><p>Linux 工具：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=./1.img bs=102400 status=progress <br></code></pre></td></tr></table></figure><p>Manjaro 宿主机中执行如下压缩指令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">VBoxManage modifymedium  docs.vdi --compact<br></code></pre></td></tr></table></figure><h2 id="vmware">vmware</h2><h2 id="wayland">Wayland</h2><p>wayland<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://bbs.archlinuxcn.org/viewtopic.php?id=11294">[3]</span></a></sup><sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://fcitx-im.org/wiki/Setup_Fcitx_5">[4]</span></a></sup><sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://wiki.archlinux.org/title/wayland#Qt">[5]</span></a></sup><sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://batsov.com/articles/2021/12/19/building-emacs-from-source-with-pgtk/">[6]</span></a></sup></p><h3 id="fcitx5">fcitx5</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#/etc/profile</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">GTK_IM_MODULE</span>=fcitx5<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">QT_IM_MODULE</span>=fcitx5<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">XMODIFIERS</span>=<span class="hljs-string">&quot;@im=fcitx5&quot;</span><br></code></pre></td></tr></table></figure><h3 id="firefox-thunderbird">Firefox thunderbird</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">MOZ_ENABLE_WAYLAND=1<br></code></pre></td></tr></table></figure><h3 id="chromium">chromium</h3><pre><code class="hljs">--ozone-platform-hint=autovivaldi-stable --ozone-platform-hint=autochrome://flags 裏面就可以開啓wayland</code></pre><h3 id="qt">QT</h3><pre><code class="hljs"> QT_QPA_PLATFORM=&quot;wayland;xcb&quot;</code></pre><h3 id="emacs">Emacs</h3><pre><code class="hljs">./configure --enable-largefile --with-all --with-json --with-imagemagick --with-threads --with-pgtk --with-native-compilation --with-native-image-api</code></pre><h2 id="ref">Ref</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1"class="footnote-text"><span>https://stackoverflow.com/questions/44114854/virtualbox-cannot-register-the-hard-disk-already-exists<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2"class="footnote-text"><span>https://www.appinn.com/sdelete-for-windows/<a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:3"class="footnote-text"><span>https://bbs.archlinuxcn.org/viewtopic.php?id=11294<a href="#fnref:3" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:4"class="footnote-text"><span>https://fcitx-im.org/wiki/Setup_Fcitx_5<a href="#fnref:4" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:5"class="footnote-text"><span>https://wiki.archlinux.org/title/wayland#Qt<a href="#fnref:5" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:6"class="footnote-text"><span>https://batsov.com/articles/2021/12/19/building-emacs-from-source-with-pgtk/<a href="#fnref:6" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>软件工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go 语言学习笔记</title>
    <link href="/2022/01/14/Go-Notes.html"/>
    <url>/2022/01/14/Go-Notes.html</url>
    
    <content type="html"><![CDATA[<h2 id="工具链">工具链</h2><h3 id="gopath">GOPATH</h3><p><code>go env|grep GOPATH</code></p><h3 id="go-mod">go mod</h3><figure><img src="/assets/imgs/2022-04-09_17-24.png" title="a"alt="go help modules" /><figcaption aria-hidden="true">go help modules</figcaption></figure><h3 id="go-mod-代理设置">go mod 代理设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">go <span class="hljs-built_in">env</span> -w GO111MODULE=on<br>go <span class="hljs-built_in">env</span> -w GOPROXY=https://goproxy.cn,direct<br>go <span class="hljs-built_in">env</span> -w GOPRIVATE=code.devops.xiaohongshu.com <br>git config --global url.<span class="hljs-string">&quot;git@code.devops.xiaohongshu.com:&quot;</span>.insteadof <span class="hljs-string">&quot;http://code.devops.xiaohongshu.com/&quot;</span><br>git config --global url.<span class="hljs-string">&quot;git@code.devops.xiaohongshu.com:&quot;</span>.insteadof <span class="hljs-string">&quot;https://code.devops.xiaohongshu.com/&quot;</span><br></code></pre></td></tr></table></figure><h3 id="goland">Goland</h3><h4 id="对-go-get-引入的包不能自动提示">对 go get引入的包不能自动提示</h4><p>有说需要清理缓存重新启动，有说需要 go mod vendor， 但都不起效，加上<code>-u</code> 选项就起效了 <code>go get -u -x -v pkg_url</code></p><h2 id="语言">语言</h2><h3 id="channel">channel</h3><h4 id="读写操作">读写操作</h4><figure><img src="/assets/imgs/2024-07-02-go-channel.png"alt="read、write、close" /><figcaption aria-hidden="true">read、write、close</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yii2-queue Redis 源码分析</title>
    <link href="/2021/12/27/yii2-queue.html"/>
    <url>/2021/12/27/yii2-queue.html</url>
    
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>一个流行的 Yii2 队列扩展，支持驱动支持DB,Redis,RabbitMQ,Bestalk,German等十多种技术架构</p><p>源码地址: https://github.com/yiisoft/yii2-queue</p><p>下面对以 Redis 为驱动的实现源码进行简要分析</p><h2 id="特性">特性</h2><ol type="1"><li>延迟消息</li><li>重试机制</li><li>消息主题</li><li>消费者组</li><li>消费确认</li></ol><h2 id="数据结构">数据结构</h2><table><thead><tr><th>名称</th><th>redis 数据类型</th><th>作用</th></tr></thead><tbody><tr><td>$(channel).moving_lock</td><td>string</td><td>分布式锁，部分队列操作，需要进行加锁处理</td></tr><tr><td>$(channel).waiting</td><td>list</td><td>待处理消息队列</td></tr><tr><td>$(channel).reserved</td><td>zset</td><td>重试队列，用于业务处理失败情况下，进行下次重试</td></tr><tr><td>$(channel).delayed</td><td>zset</td><td>延迟队列，对消息进行延迟处理</td></tr><tr><td>$(channel).attempts</td><td>hash</td><td>存存每条消息重试处理次数</td></tr><tr><td>$(channel).messages</td><td>hash</td><td>完整的消息</td></tr></tbody></table><h2 id="流程">流程</h2><p><img src="/assets/imgs/2024-07-01-yii2-queue-redis-3.png"title="主流程" alt="alt text" /> <imgsrc="/assets/imgs/2024-07-01-yii2-queue-redis.png" title="reserve"alt="alt text" /> <imgsrc="/assets/imgs/2024-07-01-yii2-queue-redis-2.png" title="moveExpire"alt="alt text" /></p><h2 id="pr">PR</h2><p><ahref="https://github.com/yiisoft/yii2-queue/pull/516/files">yii2-queue#516</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Yii2</tag>
      
      <tag>消息队列</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go Sarama Kafka 数据丢失分析</title>
    <link href="/2021/12/23/go-invalid-mem-address.html"/>
    <url>/2021/12/23/go-invalid-mem-address.html</url>
    
    <content type="html"><![CDATA[<h2 id="背景与过程">背景与过程</h2><p>维护的一个线上工单同步项目，业务方反馈工单不能同步。线上排查过程简单总结一下。</p><p>查看定时任务，没什么问题，每分钟会检测进程是否存活，挂掉的会拉起来，并且每天凌晨也会重启一下进程。</p><p>查看进程状态也是在<code>S</code>态，运行时间也无异常</p><p>日志中有一条如下记录：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">invalid memory address or nil pointer dereference<br>exit....<br></code></pre></td></tr></table></figure><p>很奇怪，日志记录 exit，但是进程却没有退出。</p><p>排查源码，结构逻辑类似下面代码样例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/Shopify/sarama&quot;</span><br><span class="hljs-string">&quot;github.com/astaxie/beego/logs&quot;</span><br>cluster <span class="hljs-string">&quot;github.com/bsm/sarama-cluster&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;os/signal&quot;</span><br><span class="hljs-string">&quot;runtime/debug&quot;</span><br><span class="hljs-string">&quot;syscall&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>cfg <span class="hljs-keyword">struct</span> &#123;<br>Kafka <span class="hljs-keyword">struct</span> &#123;<br>Addrs  []<span class="hljs-type">string</span><br>Group  <span class="hljs-type">string</span><br>Topics []<span class="hljs-type">string</span><br>&#125;<br>&#125;<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bussiness_logic</span><span class="hljs-params">(message *sarama.ConsumerMessage)</span></span> &#123;<br><span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;pass&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> err := <span class="hljs-built_in">recover</span>(); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>fmt.Println(<span class="hljs-string">&quot;exit....&quot;</span>)<br>&#125;<br>&#125;()<br><br><span class="hljs-keyword">var</span> (<br>kafkaConfig   = cluster.NewConfig()<br>KafkaConsumer *cluster.Consumer<br>err           <span class="hljs-type">error</span><br>)<br><br>kafkaConfig.Consumer.Return.Errors = <span class="hljs-literal">true</span><br>kafkaConfig.Group.Return.Notifications = <span class="hljs-literal">true</span><br><br><span class="hljs-keyword">if</span> KafkaConsumer, err = cluster.NewConsumer(cfg.Kafka.Addrs, cfg.Kafka.Group, cfg.Kafka.Topics, kafkaConfig); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br><span class="hljs-keyword">defer</span> KafkaConsumer.Close()<br><br><span class="hljs-keyword">var</span> (<br>message      *sarama.ConsumerMessage<br>notification *cluster.Notification<br>)<br><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> message = &lt;-KafkaConsumer.Messages():<br>bussiness_logic(message)<br><span class="hljs-keyword">case</span> notification = &lt;-KafkaConsumer.Notifications():<br>logs.Info(<span class="hljs-string">&quot;kafka notification:%v&quot;</span>, notification)<br><span class="hljs-keyword">case</span> err = &lt;-KafkaConsumer.Errors():<br>logs.Info(<span class="hljs-string">&quot;kafka error:%v&quot;</span>, err)<br>&#125;<br>&#125;<br>&#125;()<br><br>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> os.Signal, <span class="hljs-number">1</span>)<br>signal.Notify(c)<br>signal.Ignore(syscall.SIGPIPE, syscall.SIGWINCH, syscall.SIGHUP, syscall.SIGURG)<br><br>s := &lt;-c<br>fmt.Println(s)<br>debug.PrintStack()<br>&#125;<br><br></code></pre></td></tr></table></figure><p>bussiness_logic 出现指针访问异常后，go 协程会被回收，执行<code>defer</code>语句。问题出在了这里，记录完日志后，没调用<code>os.Exit(1)</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">      <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> err := <span class="hljs-built_in">recover</span>(); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>fmt.Println(<span class="hljs-string">&quot;exit....&quot;</span>)<br>&#125;<br>&#125;()<br></code></pre></td></tr></table></figure><h2 id="消息为什么会丢失">消息为什么会丢失？</h2><p><img src="/assets/go-sarama.consumer-3.png" /></p><ul><li>协程 hbloop： 间隔一段时间向broker发送心跳的</li><li>协程 parseResponse,responseFeeder：会将获取到的 kafka批量消息存到内存 <code>[]*ConsumerMmessage&#123;&#125;</code> 中,并通过管道<code>chan *ConsumerMmessage</code>发送出去，应用程序从而能一条一条的消费</li></ul><h3 id="原因">原因</h3><p>应用程序在消费其中一条数据时，业务处理逻辑处理出现内存异常，协程退出，系统回收。内存中剩余未消费的消息旧在哪里一直不会被消费，等到进程通过信号终止时，这些消息被丢弃</p><h2 id="同类问题-demo">同类问题 demo</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-keyword">var</span> f <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span><br><br>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br>d := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br>wg := sync.WaitGroup&#123;&#125;<br>wg.Add(<span class="hljs-number">1</span>)<br>    <br>f = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> err := <span class="hljs-built_in">recover</span>(); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>fmt.Println(<span class="hljs-string">&quot;exit....&quot;</span>)<br>&#125;<br>&#125;()<br><br><span class="hljs-keyword">for</span> data := <span class="hljs-keyword">range</span> d &#123;<br>fmt.Printf(<span class="hljs-string">&quot;cosume %d\n &quot;</span>, data)<br><br><span class="hljs-keyword">var</span> i *<span class="hljs-type">int</span><br>*i = <span class="hljs-number">1</span><br>fmt.Println(i, &amp;i, *i)<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">go</span> f()<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-\n&quot;</span>)<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> x, _ := &lt;-c:<br>d &lt;- x<br>&#125;<br>&#125;<br>&#125;()<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++ &#123;<br>fmt.Printf(<span class="hljs-string">&quot;producing %d:\n&quot;</span>, i)<br>c &lt;- i<br>&#125;<br>&#125;()<br>    <br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>t := time.Tick(<span class="hljs-number">1</span> * time.Second)<br><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-t:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--\n&quot;</span>)<br><br>&#125;<br>&#125;<br>&#125;()<br><br>time.Sleep(<span class="hljs-number">1</span> * time.Second)<br><br>wg.Wait()<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
      <tag>Kafka</tag>
      
      <tag>消息队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50岁后继续干程序员</title>
    <link href="/2021/11/30/dairy.html"/>
    <url>/2021/11/30/dairy.html</url>
    
    <content type="html"><![CDATA[<p>这个问题困扰我很久，也很难想明白，想明白太难，先写点文字</p><p>35岁后还能干的动吗？总不能一辈子干大头兵吧？总得往上走一走吧，转管理、带项目、干产品、考公务员...？</p><p>感觉都很焦虑，随着岁数增长体力不支，家庭负担过大精力不够，和年轻全员工比会被公司抛弃，搞得好像行业呆的太久，就会被“体制化”无法融入社会再就业。</p><p>干的事情杂七杂八，没有目标方向感，挣扎在生死的边界线上。</p><p>但是仔细想想这就是现实吗，转行干哪一行不都面临这些问题？</p><p>//--------------------------------------------------------------程序员行业从大的方向来说是信息产业，行业前景很宽阔。</p><p>为什么不反过来想想我们做这些事情的目的是什么呢？社会价值是什么呢？互联网难到真是人类历史的一条弯路吗？</p><p>都说市场是一个无形的手，优化资产配置效率，但是不受管束的资本会把人推向深渊。</p><p>匹夫无罪，怀璧其罪，</p><h3 id="继续干程序员">继续干程序员 ？</h3><h3 id="转行">转行</h3><h4 id="转-管理">转 管理</h4><h4 id="转-pm">转 PM</h4><p><ahref="https://mp.weixin.qq.com/s/BLuViOaJdceYHzTuuPr1DQ">《读书》新刊 |王路：我的逻辑启蒙老师</a></p><p><ahref="https://www.douban.com/note/271659319/">怎样把书读得“四通八达”？（文/王路）</a></p><p>** 工程学方法 抓大方小，逐步求精 分而治之 编程随想单一信息源不可靠</p><p>这俩人同名</p>]]></content>
    
    
    <categories>
      
      <category>职场</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>jekyll 使用中遇到的问题</title>
    <link href="/2021/11/30/jekyll-qa.html"/>
    <url>/2021/11/30/jekyll-qa.html</url>
    
    <content type="html"><![CDATA[<p>系统用的 Manjaro用的软件库都比较新，过一段时间就跑不动了，记录下问题。</p><h2 id="liquid-syntax-error-line-52-unexpected-character-in">Liquidsyntax error (line 52): Unexpected character $ in</h2><pre><code class="hljs">https://github.com/jekyll/jekyll/issues/5663</code></pre><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">ppp</span> &#125;&#125;</span><br></code></pre></td></tr></table></figure><h2id="libffi.so.7-cannot-open-shared-object-file-no-such-file-or-directory">libffi.so.7:cannot open shared object file: No such file or directory</h2><p>开始用软链接的方式，以前碰到过类似问题，能过去，但这次没不去。重新安装ffi gems 会重新编译一遍依赖的ffi，问题解决。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  jekyll s<br>&lt;internal:/usr/lib/ruby/3.0.0/rubygems/core_ext/kernel_require.rb&gt;:85:in `require&#x27;: libffi.so.7: cannot open shared object file: No such file or directory - <br>...<br>...<br>...<br><br>➜  sudo ln /usr/lib/libffi.so -s /usr/lib/libffi.so.7<br><br>➜  jekyll s<br>&lt;internal:/usr/lib/ruby/3.0.0/rubygems/core_ext/kernel_require.rb&gt;:85:in `require&#x27;: /usr/lib/libffi.so.7: version `LIBFFI_CLOSURE_7.0&#x27; not found (required by /home/<br>...<br>...<br>...<br><br><br>➜   gem install ffi<br></code></pre></td></tr></table></figure><p>顺带学习了几个命令挺好 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜ pacman -Si libffi<br>➜ man ffi<br></code></pre></td></tr></table></figure></p><p>https://bbs.archlinux.org/viewtopic.php?id=270587</p><p>https://github.com/libffi/libffi/blob/master/include/ffi.h.inhttps://github.com/libffi/libffi/blob/master/src/x86/ffi.c</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jekyll</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Python 多线程导入美餐就餐数据</title>
    <link href="/2021/11/05/python-thread.html"/>
    <url>/2021/11/05/python-thread.html</url>
    
    <content type="html"><![CDATA[<p>美餐每天发一个用Excel汇总的就餐数据，我们把它导入到数据库后，行政办公服务用它和公司内的就餐数据进行比对查重。</p><p>初始实现是单线程，和<code>import_records</code>去掉多线程后的部分差不多。</p><p><code>读取Excel数据</code> ---&gt;<code>发送到行政服务接口</code></p><p>安全起见线上操作放在了晚上进行。运行时发现每条数据导入消耗<code>1s</code>多，晚上十点开始跑这几千条数据想想都让人崩溃。</p><p>等着也是干等，下楼转两圈透透气，屋里龌龊的空气让人昏昏沉沉，寒冷让人清醒不少，突然想到为什么不用多线程呢？</p><p>第一版多线程和处理业务的程序糅合在了一起，跟屎一样难读。后面两天又抽了点时间重构了几个版本，分离出来一个线程池、迭代器和<code>import_records</code>。</p><p>清晰不少，但是迭代器被暴露了出来，需要<code>import_records</code>调用一下判断当前任务是否给当前线程处理，类似协程的思路。</p><p>暴露有好有坏，但已基本满足日常使用，可以往一边先放放了。读读书、看看电影，不亦乐乎：）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task_pool</span>(<span class="hljs-params">thread_num, task_fn</span>):<br><br>  <span class="hljs-keyword">if</span> thread_num &lt;= <span class="hljs-number">0</span> :<br>      <span class="hljs-keyword">raise</span> ValueError<br><br>  threads = []<br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_thread_checker</span>(<span class="hljs-params">thread_id, step</span>):<br><br>      base = <span class="hljs-number">1</span><br>      i = <span class="hljs-number">0</span><br><br>      <span class="hljs-keyword">def</span> <span class="hljs-title function_">thread_checker</span>():<br>          <span class="hljs-keyword">nonlocal</span> i<br><br>          i += <span class="hljs-number">1</span><br>          <span class="hljs-comment"># print((thread_id,i,step, i &lt; base or (i - base) % step != thread_id))</span><br><br>          <span class="hljs-keyword">if</span> i &lt; base <span class="hljs-keyword">or</span> (i - base) % step != thread_id:<br>              <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>      <span class="hljs-keyword">return</span> thread_checker<br><br><br>  <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, thread_num):<br>    threads.append(threading.Thread(target=task_fn, args=(x,thread_num, gen_thread_checker(x, thread_num))))<br><br>  <span class="hljs-comment"># 启动所有线程</span><br>  <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>    t.start()<br>  <span class="hljs-comment"># 主线程中等待所有子线程退出</span><br>  <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>    t.join()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> openpyxl <span class="hljs-keyword">import</span> load_workbook<br><span class="hljs-keyword">from</span> requests <span class="hljs-keyword">import</span> RequestException<br><br><span class="hljs-keyword">import</span> myThread<br><br>parser = argparse.ArgumentParser(description=<span class="hljs-string">&#x27;美餐到店交易数据导入&#x27;</span>)<br>parser.add_argument(<span class="hljs-string">&#x27;--filename&#x27;</span>, <span class="hljs-string">&#x27;-f&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;美餐到店交易数据 .xlsx 文件路径&#x27;</span>, required=<span class="hljs-literal">True</span>)<br>parser.add_argument(<span class="hljs-string">&#x27;--thread_num&#x27;</span>, <span class="hljs-string">&#x27;-t&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;线程数量&#x27;</span>, default= <span class="hljs-number">100</span>, required=<span class="hljs-literal">False</span>)<br>parser.add_argument(<span class="hljs-string">&#x27;--debug&#x27;</span>, <span class="hljs-string">&#x27;-d&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;调试模式&#x27;</span>, default= <span class="hljs-number">0</span>, required=<span class="hljs-literal">False</span>)<br>args = parser.parse_args()<br><br>filename = args.filename<br>thread_num = <span class="hljs-built_in">int</span>(args.thread_num)<br>debug = args.debug<br><br><span class="hljs-keyword">if</span> debug:<br>    <span class="hljs-built_in">print</span>((filename,thread_num,debug))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_meican_meal_record</span>(<span class="hljs-params">data</span>):<br>   <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">import_records</span>(<span class="hljs-params">thread_id, thread_number, thread_checker</span>):<br>    wb = load_workbook(filename=filename)<br>    ws = wb.active<br><br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> ws:<br>        <span class="hljs-comment">#------------------------------------------</span><br>        <span class="hljs-keyword">if</span> row[<span class="hljs-number">0</span>].value <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">break</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> thread_checker():<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-comment">#------------------------------------------</span><br><br>        <span class="hljs-keyword">if</span> row[<span class="hljs-number">0</span>].value == <span class="hljs-string">&#x27;日期&#x27;</span> <span class="hljs-keyword">or</span> row[<span class="hljs-number">0</span>].value == <span class="hljs-string">&#x27;总计&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> re.findall(<span class="hljs-string">&#x27;^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;$&#x27;</span>, row[<span class="hljs-number">0</span>].value):<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">else</span>:<br><br>            date = <span class="hljs-built_in">str</span>.replace(row[<span class="hljs-number">0</span>].value,<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br><br>            order_id = row[<span class="hljs-number">3</span>].value<br>            restaurant_name = row[<span class="hljs-number">5</span>].value<br>            meal_plan_name = row[<span class="hljs-number">6</span>].value<br>            meal_staffid = row[<span class="hljs-number">10</span>].value<br>            identify = row[<span class="hljs-number">11</span>].value<br>    <br>            add_meican_meal_record(&#123;<br>                <span class="hljs-string">&#x27;orderId&#x27;</span>:order_id,<br>                <span class="hljs-string">&#x27;date&#x27;</span>: date,<br>                <span class="hljs-string">&#x27;meal_plan_name&#x27;</span>:meal_plan_name,<br>                <span class="hljs-string">&#x27;meal_staffid&#x27;</span>:meal_staffid,<br>                <span class="hljs-string">&#x27;identify&#x27;</span>:identify,<br>                <span class="hljs-string">&#x27;restaurant_name&#x27;</span>:restaurant_name<br>            &#125;)<br><br>myThread.task_pool(thread_num,import_records)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>系统编程</tag>
      
      <tag>Python</tag>
      
      <tag>并发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多进程实战 - my cron</title>
    <link href="/2021/10/31/my_cron.html"/>
    <url>/2021/10/31/my_cron.html</url>
    
    <content type="html"><![CDATA[<ul><li>cron 程序无法使用</li><li>公司 dcron 平台 任务不方便管理，页面只能显示一个 porject和token<ul><li>要么不停的切换 project 在浏览器</li><li>要么所有的任务都压缩到一个project中，因为任务还无法删除，目前有近200个任务</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> YII_APP_BASE_DIR <span class="hljs-string">&quot;/var/www/app/yii&quot;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">job</span>&#123;</span><br>    <span class="hljs-type">char</span>* yii_cmd;<br><br>    <span class="hljs-type">pid_t</span> pid;<br><span class="hljs-comment">//    char* stdout_file;</span><br><span class="hljs-comment">//    char* stderr_file;</span><br>    <span class="hljs-type">int</span> running;<br>&#125;<span class="hljs-type">job_t</span>;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">process_job</span><span class="hljs-params">(<span class="hljs-type">job_t</span>* job)</span> &#123;<br>    <span class="hljs-type">pid_t</span> job_pid = fork();<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %x\n&quot;</span>, __FUNCTION__, job);<br>    <span class="hljs-keyword">if</span>(job_pid == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;----&gt;task %s process id: %d %d\n&quot;</span>,job-&gt;yii_cmd, getpid(), getppid());<br>        execlp(<span class="hljs-string">&quot;php70&quot;</span>, <span class="hljs-string">&quot;php70&quot;</span>,YII_APP_BASE_DIR, job-&gt;yii_cmd, <span class="hljs-literal">NULL</span>);<br>        perror(<span class="hljs-string">&quot;execlp&quot;</span>);<br>    <br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;------------&gt;task manager process id: %d %d\n&quot;</span>, getpid(), getppid());<br>        job-&gt;running = <span class="hljs-number">1</span>;<br>        job-&gt;pid = job_pid;<br>        <span class="hljs-keyword">return</span> job_pid;<br>    &#125; <br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">deamanize</span><span class="hljs-params">()</span>&#123;<br>  <br>    <span class="hljs-type">pid_t</span> pid =  fork();<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 1</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;aaaaa&quot;</span>);<br>    fflush(<span class="hljs-built_in">stdout</span>);<br>    <span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;/dev/null&quot;</span>,O_RDWR);<br>    dup2(fd,<span class="hljs-number">0</span>);<br>    dup2(fd, <span class="hljs-number">1</span>);<br>    dup2(fd, <span class="hljs-number">2</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <br>    <span class="hljs-keyword">if</span>(pid !=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    setsid();<br>    umask(<span class="hljs-number">0</span>);<br>    chdir(<span class="hljs-string">&quot;/&quot;</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, getpid(), getppid());<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span>&#123;<br> <br>    deamanize();<br><br>    <span class="hljs-type">job_t</span> jobs[] = &#123;<br>        &#123;<br>            .yii_cmd = <span class="hljs-string">&quot;test/test&quot;</span>,<br>            .running = <span class="hljs-number">0</span>,<br>            .pid = <span class="hljs-number">0</span>,<br>        &#125;,<br>    &#125;;<br><br>    <span class="hljs-type">int</span> jobs_num = <span class="hljs-keyword">sizeof</span>(jobs)/<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">job_t</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;job_nums:%d\n&quot;</span>, jobs_num);<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        sleep(<span class="hljs-number">60</span>);<br>        <span class="hljs-type">job_t</span>* jp = jobs;<br>        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x %d\n&quot;</span>, jp, i);<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; jobs_num; ++i, jp++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(jp-&gt;running)&#123;<br>                <span class="hljs-type">int</span> ret_pid = waitpid(jp-&gt;pid,<span class="hljs-literal">NULL</span>, WNOHANG);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;waitpid ret_val:%d\n&quot;</span>, ret_pid);<br>                <span class="hljs-keyword">if</span>(ret_pid == jp-&gt;pid)&#123;<br>                    jp-&gt;running = <span class="hljs-number">0</span>;<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret_pid == <span class="hljs-number">0</span>)&#123;<br>                    <br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret_pid == <span class="hljs-number">-1</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(errno == ECHILD) &#123;<br>                        jp-&gt;running = <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(!jp-&gt;running)&#123;<br>                process_job(&amp;jobs[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C</tag>
      
      <tag>系统编程</tag>
      
      <tag>并发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何跨主机共享二进制文件 redis-cli？</title>
    <link href="/2021/07/29/copy-tools-in-linux.html"/>
    <url>/2021/07/29/copy-tools-in-linux.html</url>
    
    <content type="html"><![CDATA[<p>把一台机器上的redis-cli 拷贝到另外一台机器上并使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">rsync -avz root@10.23.27.2:/usr/bin/redis-cli .<br><br>./redis-cli<br><br>ldd `<span class="hljs-built_in">which</span> redis-cli`<br><br>rsync -avz root@10.23.27.2:/lib64/libjemalloc.so.1 .<br><br><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=`<span class="hljs-built_in">pwd</span>`<br><br>redis-cli<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>软件工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>零宽断言 - 跨行日志匹配</title>
    <link href="/2021/07/07/grap-log-use-regex.html"/>
    <url>/2021/07/07/grap-log-use-regex.html</url>
    
    <content type="html"><![CDATA[<p><code>\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d (.*\n)*?(?=\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d)</code></p><p>零宽度断言匹配的是一个位置</p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs irb"><br><span class="hljs-comment">#irb</span><br><br><span class="hljs-meta prompt_">irb(main):018:0&gt;</span> /(<span class="hljs-string">?=\d</span>)\d+(<span class="hljs-string">?=\d</span>)/ === <span class="hljs-string">&quot; 11 &quot;</span><br>=&gt; true<br><br><span class="hljs-meta prompt_">irb(main):020:0&gt;</span> /(<span class="hljs-string">?=\d</span>)\d(<span class="hljs-string">?=\d</span>)/ === <span class="hljs-string">&quot; 11 &quot;</span><br>=&gt; true<br><br><span class="hljs-meta prompt_">irb(main):021:0&gt;</span> /(<span class="hljs-string">?=\d\d</span>)\d(<span class="hljs-string">?=\d</span>)/ === <span class="hljs-string">&quot; 11 &quot;</span><br>=&gt; true<br><br><br><br><br></code></pre></td></tr></table></figure><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-number">2021</span><span class="hljs-number">-07</span><span class="hljs-number">-07</span> <span class="hljs-number">17</span>:<span class="hljs-number">16</span>:<span class="hljs-number">13</span> [<span class="hljs-number">10.200</span><span class="hljs-number">.35</span><span class="hljs-number">.20</span>][-][-][info][application] [app id:<span class="hljs-number">10012</span>]<br>    in /data0/www/htdocs/holonet.intra.lianjia.com/common/<span class="hljs-symbol">SignKeyChainArrayProvider</span>.php:<span class="hljs-number">41</span><br>    in /data0/www/htdocs/holonet.intra.lianjia.com/vendor/infrastructure/api-signature/src/<span class="hljs-symbol">Http</span>/<span class="hljs-symbol">Yii2</span>/<span class="hljs-symbol">SignFilter</span>.php:<span class="hljs-number">60</span><br><span class="hljs-number">2021</span><span class="hljs-number">-07</span><span class="hljs-number">-07</span> <span class="hljs-number">17</span>:<span class="hljs-number">16</span>:<span class="hljs-number">13</span> [<span class="hljs-number">10.200</span><span class="hljs-number">.35</span><span class="hljs-number">.20</span>][-][-][info][yii\db\<span class="hljs-symbol">Connection</span>::open] <span class="hljs-symbol">Opening</span> <span class="hljs-symbol">DB</span> connection: mysql:host=m7832.zeus.mysql.ljnode.com;port=<span class="hljs-number">7832</span>;dbname=holonet<br>    in /data0/www/htdocs/holonet.intra.lianjia.com/module/identity/model/<span class="hljs-symbol">AppServiceQuery</span>.php:<span class="hljs-number">45</span><br>    in /data0/www/htdocs/holonet.intra.lianjia.com/common/<span class="hljs-symbol">SignKeyChainArrayProvider</span>.php:<span class="hljs-number">46</span><br>    in /data0/www/htdocs/holonet.intra.lianjia.com/vendor/infrastructure/api-signature/src/<span class="hljs-symbol">Http</span>/<span class="hljs-symbol">Yii2</span>/<span class="hljs-symbol">SignFilter</span>.php:<span class="hljs-number">60</span><br><span class="hljs-number">2021</span><span class="hljs-number">-07</span><span class="hljs-number">-07</span> <span class="hljs-number">17</span>:<span class="hljs-number">16</span>:<span class="hljs-number">13</span> [<span class="hljs-number">10.200</span><span class="hljs-number">.35</span><span class="hljs-number">.20</span>][-][-][info][yii\db\<span class="hljs-symbol">Command</span>::execute] <span class="hljs-symbol">SET</span> <span class="hljs-symbol">SESSION</span> wait_timeout = <span class="hljs-number">28800</span><br>    in /data0/www/htdocs/holonet.intra.lianjia.com/config/db.php:<span class="hljs-number">17</span><br>    in /data0/www/htdocs/holonet.intra.lianjia.com/module/identity/model/<span class="hljs-symbol">AppServiceQuery</span>.php:<span class="hljs-number">45</span><br>    in /data0/www/htdocs/holonet.intra.lianjia.com/common/<span class="hljs-symbol">SignKeyChainArrayProvider</span>.php:<span class="hljs-number">46</span><br><span class="hljs-number">2021</span><span class="hljs-number">-07</span><span class="hljs-number">-07</span> <span class="hljs-number">17</span>:<span class="hljs-number">16</span>:<span class="hljs-number">13</span> [<span class="hljs-number">10.200</span><span class="hljs-number">.35</span><span class="hljs-number">.20</span>][-][-][info][yii\db\<span class="hljs-symbol">Command</span>::query] <span class="hljs-symbol">SELECT</span> <span class="hljs-string">`secret_key`</span> <span class="hljs-symbol">FROM</span> <span class="hljs-string">`app_service`</span> <span class="hljs-symbol">WHERE</span> (<span class="hljs-string">`app_id`</span>=<span class="hljs-string">&#x27;10012&#x27;</span>) <span class="hljs-symbol">AND</span> (<span class="hljs-string">`service_id`</span>=<span class="hljs-number">10010</span>)<br>    in /data0/www/htdocs/holonet.intra.lianjia.com/module/identity/model/<span class="hljs-symbol">AppServiceQuery</span>.php:<span class="hljs-number">45</span><br>    in /data0/www/htdocs/holonet.intra.lianjia.com/common/<span class="hljs-symbol">SignKeyChainArrayProvider</span>.php:<span class="hljs-number">46</span><br>    in /data0/www/htdocs/holonet.intra.lianjia.com/vendor/infrastructure/api-signature/src/<span class="hljs-symbol">Http</span>/<span class="hljs-symbol">Yii2</span>/<span class="hljs-symbol">SignFilter</span>.php:<span class="hljs-number">60</span><br><span class="hljs-number">2021</span><span class="hljs-number">-07</span><span class="hljs-number">-07</span> <span class="hljs-number">17</span>:<span class="hljs-number">16</span>:<span class="hljs-number">13</span> [<span class="hljs-number">10.200</span><span class="hljs-number">.35</span><span class="hljs-number">.20</span>][-][-][trace][yii\base\<span class="hljs-symbol">InlineAction</span>::runWithParams] <span class="hljs-symbol">Running</span> action: app\module\api\controllers\<span class="hljs-symbol">AppServiceController</span>::actionAccessServiceList()<br><span class="hljs-number">2021</span><span class="hljs-number">-07</span><span class="hljs-number">-07</span> <span class="hljs-number">17</span>:<span class="hljs-number">16</span>:<span class="hljs-number">13</span> [<span class="hljs-number">10.200</span><span class="hljs-number">.35</span><span class="hljs-number">.20</span>][-][-][info][yii\db\<span class="hljs-symbol">Command</span>::query] <span class="hljs-symbol">SELECT</span> <span class="hljs-string">`as`</span>.<span class="hljs-string">`app_id`</span> <span class="hljs-symbol">AS</span> <span class="hljs-string">`app_id`</span>, <span class="hljs-string">`as`</span>.<span class="hljs-string">`secret_key`</span> <span class="hljs-symbol">FROM</span> <span class="hljs-string">`app_service`</span> <span class="hljs-string">`as`</span> <span class="hljs-symbol">WHERE</span> <span class="hljs-string">`service_id`</span>=<span class="hljs-string">&#x27;10002&#x27;</span><br>    in /data0/www/htdocs/holonet.intra.lianjia.com/module/identity/model/<span class="hljs-symbol">AppServiceQuery</span>.php:<span class="hljs-number">36</span><br>    in /data0/www/htdocs/holonet.intra.lianjia.com/module/api/controllers/<span class="hljs-symbol">AppServiceController</span>.php:<span class="hljs-number">28</span><br><span class="hljs-number">2021</span><span class="hljs-number">-07</span><span class="hljs-number">-07</span> <span class="hljs-number">17</span>:<span class="hljs-number">16</span>:<span class="hljs-number">13</span> [<span class="hljs-number">10.200</span><span class="hljs-number">.35</span><span class="hljs-number">.20</span>][-][-][info][application] [<span class="hljs-symbol">RESPONSE</span>][<span class="hljs-symbol">GET</span> api/app-service/access-service-list][[<br>    <span class="hljs-string">&#x27;code&#x27;</span> =&gt; <span class="hljs-number">0</span><br>    <span class="hljs-string">&#x27;msg&#x27;</span> =&gt; <span class="hljs-string">&#x27;服务正常&#x27;</span><br>    <span class="hljs-string">&#x27;extra&#x27;</span> =&gt; [<br>        <span class="hljs-number">1001007</span> =&gt; [<br>            <span class="hljs-string">&#x27;app_id&#x27;</span> =&gt; <span class="hljs-string">&#x27;10007&#x27;</span><br>            <span class="hljs-string">&#x27;secret_key&#x27;</span> =&gt; <span class="hljs-string">&#x27;7a8c8e384ffc7c0194&#x27;</span><br>        ]<br>        <span class="hljs-number">1001008</span> =&gt; [<br>            <span class="hljs-string">&#x27;app_id&#x27;</span> =&gt; <span class="hljs-string">&#x27;10008&#x27;</span><br>            <span class="hljs-string">&#x27;secret_key&#x27;</span> =&gt; <span class="hljs-string">&#x27;c3264160624a9677c8&#x27;</span><br>        ]<br>        <span class="hljs-number">1001009</span> =&gt; [<br>            <span class="hljs-string">&#x27;app_id&#x27;</span> =&gt; <span class="hljs-string">&#x27;10009&#x27;</span><br>            <span class="hljs-string">&#x27;secret_key&#x27;</span> =&gt; <span class="hljs-string">&#x27;81a8bf7589a13f21f1&#x27;</span><br>        ]<br>        <span class="hljs-number">1001017</span> =&gt; [<br>            <span class="hljs-string">&#x27;app_id&#x27;</span> =&gt; <span class="hljs-string">&#x27;10017&#x27;</span><br>            <span class="hljs-string">&#x27;secret_key&#x27;</span> =&gt; <span class="hljs-string">&#x27;35741b5aa744c5518&#x27;</span><br>        ]<br>        <span class="hljs-number">1001023</span> =&gt; [<br>            <span class="hljs-string">&#x27;app_id&#x27;</span> =&gt; <span class="hljs-string">&#x27;10023&#x27;</span><br>            <span class="hljs-string">&#x27;secret_key&#x27;</span> =&gt; <span class="hljs-string">&#x27;5fee8f3d61f0cf5315a1d&#x27;</span><br>        ]<br>        <span class="hljs-number">1001025</span> =&gt; [<br>            <span class="hljs-string">&#x27;app_id&#x27;</span> =&gt; <span class="hljs-string">&#x27;10025&#x27;</span><br>            <span class="hljs-string">&#x27;secret_key&#x27;</span> =&gt; <span class="hljs-string">&#x27;838a843ecfc41084db&#x27;</span><br>        ]<br>        <span class="hljs-number">1001026</span> =&gt; [<br>            <span class="hljs-string">&#x27;app_id&#x27;</span> =&gt; <span class="hljs-string">&#x27;10026&#x27;</span><br>            <span class="hljs-string">&#x27;secret_key&#x27;</span> =&gt; <span class="hljs-string">&#x27;17b834119e6d8&#x27;</span><br>        ]<br>        <span class="hljs-number">1001002</span> =&gt; [<br>            <span class="hljs-string">&#x27;app_id&#x27;</span> =&gt; <span class="hljs-string">&#x27;10002&#x27;</span><br>            <span class="hljs-string">&#x27;secret_key&#x27;</span> =&gt; <span class="hljs-string">&#x27;8215d0a4fc997a8a&#x27;</span><br>        ]<br>        <span class="hljs-number">1001043</span> =&gt; [<br>            <span class="hljs-string">&#x27;app_id&#x27;</span> =&gt; <span class="hljs-string">&#x27;10043&#x27;</span><br>            <span class="hljs-string">&#x27;secret_key&#x27;</span> =&gt; <span class="hljs-string">&#x27;b16f3c14cfe50cce&#x27;</span><br>        ]<br>        <span class="hljs-number">1001048</span> =&gt; [<br>            <span class="hljs-string">&#x27;app_id&#x27;</span> =&gt; <span class="hljs-string">&#x27;1001048&#x27;</span><br>            <span class="hljs-string">&#x27;secret_key&#x27;</span> =&gt; <span class="hljs-string">&#x27;26f035e8112d0cea5&#x27;</span><br>        ]<br>    ]<br>    <span class="hljs-string">&#x27;type&#x27;</span> =&gt; <span class="hljs-string">&#x27;app&#x27;</span><br>    <span class="hljs-string">&#x27;date&#x27;</span> =&gt; <span class="hljs-string">&#x27;2021-07-07 17:16:13&#x27;</span><br>]]<br>    in /data0/www/htdocs/holonet.intra.lianjia.com/common/<span class="hljs-symbol">LogHttpReqRes</span>.php:<span class="hljs-number">49</span><br><span class="hljs-number">2021</span><span class="hljs-number">-07</span><span class="hljs-number">-07</span> <span class="hljs-number">17</span>:<span class="hljs-number">16</span>:<span class="hljs-number">13</span> [<span class="hljs-number">10.200</span><span class="hljs-number">.35</span><span class="hljs-number">.20</span>][-][-][warning][yii\debug\<span class="hljs-symbol">Module</span>::checkAccess] <span class="hljs-symbol">Access</span> to debugger is denied due to <span class="hljs-symbol">IP</span> address restriction. <span class="hljs-symbol">The</span> requesting <span class="hljs-symbol">IP</span> address is <span class="hljs-number">10.200</span><span class="hljs-number">.35</span><span class="hljs-number">.20</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日志</tag>
      
      <tag>Ruby</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Yii2 、socket 与 多进程</title>
    <link href="/2021/06/20/fork-socket.html"/>
    <url>/2021/06/20/fork-socket.html</url>
    
    <content type="html"><![CDATA[<p>前两周做 code review的时候发现同事用了许久不见的 pcntl扩展，每个进程用来消费一个 redis channal 提高对消息处理的吞吐量。</p><p>因为PHP 自身的一些原因，这套扩展在 PHP中是不怎么常用的。记得比较有名的一个项目是 workerman。</p><p>多进程这块技术其实是一个挺对自身知识量存储的灵魂拷问，往深处挖，可以挖出来无数的东西：事务、锁、信号、IPC、IO操作、socket、多线程，这些都与进程有千丝万缕的关系。</p><h2 id="几行代码">几行代码</h2><p>下面这段代码中 redis socket 链接会不会在多进程间共享，redis指令取出的数据结果会不会错乱分配到非对应的进程？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>......<br><span class="hljs-variable">$redis</span> = <span class="hljs-title class_">\Yii</span>::<span class="hljs-variable">$app</span>-&gt;redis;<br><br>        <span class="hljs-variable">$pid</span> = <span class="hljs-title function_ invoke__">pcntl_fork</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$pid</span> == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-variable">$key</span> = <span class="hljs-string">&#x27;redis-key&#x27;</span>;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-variable">$data</span> = <span class="hljs-variable">$redis</span>-&gt;<span class="hljs-title function_ invoke__">lpop</span>(<span class="hljs-variable">$key</span>);<br><br>......<br></code></pre></td></tr></table></figure><h2 id="man-2-linux-programmers-manual"><code>man  2</code> LinuxProgrammer's Manual</h2><h3 id="man-2-fork">man 2 fork</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">*  The child inherits copies of the parent&#x27;s set of open file descriptors.  Each file descriptor in the child refers to the same  open<br>   file  description (see open(2)) as the corresponding file descriptor in the parent.  This means that the two file descriptors share<br>   open file status flags, file offset, and signal-driven I/O attributes (see the description of F_SETOWN and F_SETSIG in fcntl(2)).<br></code></pre></td></tr></table></figure><p>父子进程间会 COPY 文件描述符，</p><h3 id="man-2-soccket">man 2 soccket</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">socket()  creates  an  endpoint for communication and returns a file descriptor that refers to that endpoint.  The file descriptor re‐turned by a successful call will be the lowest-numbered file descriptor not currently open for the process.<br></code></pre></td></tr></table></figure><p>socket 套接字是文件描述符。</p><p>又去翻阅了一下 unix网络编程 apue资料查阅了一下。unpv1 对多进程 socket通信模型讲的很是浅显易懂，这里不再赘述。</p><p>基本可以确定socket 套接字如果在fork之前创建。TCP链接链接就会被多个进程复用。对端无法区分是那个父子进程谁发过来的数据。</p><p>但是还是需要写代码验证一下，理论总是要是经过实践的检验才会踏实。</p><h2 id="实验">实验</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXLINE  4096</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argv, <span class="hljs-type">char</span> * argc[])</span><br>&#123;<br>    <span class="hljs-type">char</span>recvline[MAXLINE + <span class="hljs-number">1</span>];<br><br>    <span class="hljs-type">int</span> s = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server_addr</span>;</span><br><br>    bzero(&amp;server_addr, <span class="hljs-keyword">sizeof</span>(server_addr));<br><br>    server_addr.sin_port = htons(<span class="hljs-number">8888</span>);<br>    server_addr.sin_family = AF_INET;<br>    inet_pton(AF_INET,<span class="hljs-string">&quot;127.0.0.1&quot;</span>, &amp;server_addr.sin_addr);<br><br>    <span class="hljs-keyword">if</span>(connect(s, (<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sockaddr *) &amp;server_addr, <span class="hljs-keyword">sizeof</span>(server_addr)) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;connect error&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-type">int</span> pid = fork();<br><br>    <span class="hljs-keyword">if</span>(pid == <span class="hljs-number">-1</span>) &#123;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, getpid());<br>        <span class="hljs-type">char</span>* msg = <span class="hljs-string">&quot;error&quot;</span>;<br>        write(s,msg, <span class="hljs-built_in">strlen</span>(msg));<br><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pid == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is parent proecess, pid: %d ppid: %d\n&quot;</span>, getpid(), getppid());<br>        <span class="hljs-type">char</span>* msg = <span class="hljs-string">&quot;this is parent proecess,\n\n&quot;</span>;<br>        write(s,msg, <span class="hljs-built_in">strlen</span>(msg));<br>        <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ( (n = read(s, recvline, MAXLINE)) &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n Parent receive bytes:%d\n&quot;</span>,n);<br><br>            recvline[n] = <span class="hljs-number">0</span>;<span class="hljs-comment">/* null terminate */</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fputs</span>(recvline, <span class="hljs-built_in">stdout</span>) == EOF) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, strerror(errno));<br>            &#125;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">char</span>* msg = <span class="hljs-string">&quot;this is child proecess,\n\n&quot;</span>;<br>        write(s,msg, <span class="hljs-built_in">strlen</span>(msg));<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is child proecess, pid: %d ppid: %d\n&quot;</span>, getpid(), getppid());<br><br><br>        <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ( (n = read(s, recvline, MAXLINE)) &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n Child receive bytes:%d\n&quot;</span>,n);<br>            recvline[n] = <span class="hljs-number">0</span>;<span class="hljs-comment">/* null terminate */</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fputs</span>(recvline, <span class="hljs-built_in">stdout</span>) == EOF) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, strerror(errno));<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">gcc fork_t.c &amp;&amp; ./a.out</span><br>this is child proecess, pid: 9898 ppid: 5322<br>this is parent proecess, pid: 9899 ppid: 9898<br><br> Parent receive bytes:7<br>aaaaaa<br><br> Child receive bytes:7<br>aaaaaa<br><br> Child receive bytes:7<br>aaaaaa<br><br> Child receive bytes:8<br>aaaaaaa<br><br> Child receive bytes:7<br>aaaaaa<br><br> Child receive bytes:7<br>aaaaaa<br><br> Child receive bytes:7<br>aaaaaa<br><br> Child receive bytes:7<br>aaaaaa<br><br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">nc -ltx -p8888</span> <br>this is child proecess,<br><br>Received 25 bytes from the socket<br>00000000  74 68 69 73  20 69 73 20  63 68 69 6C  64 20 70 72  this is child pr<br>00000010  6F 65 63 65  73 73 2C 0A  0A                        oecess,..       <br>this is parent proecess,<br><br>Received 26 bytes from the socket<br>00000000  74 68 69 73  20 69 73 20  70 61 72 65  6E 74 20 70  this is parent p<br>00000010  72 6F 65 63  65 73 73 2C  0A 0A                     roecess,..      <br>aaaaaa<br>Sent 7 bytes to the socket<br>00000000  61 61 61 61  61 61 0A                               aaaaaa.         <br>aaaaaa<br>Sent 7 bytes to the socket<br>00000000  61 61 61 61  61 61 0A                               aaaaaa.         <br>aaaaaa<br>Sent 7 bytes to the socket<br>00000000  61 61 61 61  61 61 0A                               aaaaaa.         <br>aaaaaaa<br>Sent 8 bytes to the socket<br>00000000  61 61 61 61  61 61 61 0A                            aaaaaaa.        <br>aaaaaa<br>Sent 7 bytes to the socket<br>00000000  61 61 61 61  61 61 0A                               aaaaaa.         <br>aaaaaa<br>Sent 7 bytes to the socket<br>00000000  61 61 61 61  61 61 0A                               aaaaaa.         <br>aaaaaa<br>Sent 7 bytes to the socket<br>00000000  61 61 61 61  61 61 0A                               aaaaaa.         <br>aaaaaa<br>Sent 7 bytes to the socket<br>00000000  61 61 61 61  61 61 0A                               aaaaaa.         <br><br></code></pre></td></tr></table></figure><h2 id="关键就看这了-redis-yiiapp-redis">关键就看这了<code>$redis = \Yii::$app-&gt;redis;</code></h2><p>Yii2 中的组件依靠 <code>yii\di\ServiceLocator</code>进行管理，它是一个控制反转依赖注入的实现。下面是部分代码片段：获取对象实例与注入对象定义。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns the component instance with the specified ID.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $id component ID (e.g. `db`).</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bool $throwException whether to throw an exception if `$id` is not registered with the locator before.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> object|null the component of the specified ID. If `$throwException` is false and `$id`</span><br><span class="hljs-comment">     * is not registered before, null will be returned.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> InvalidConfigException if `$id` refers to a nonexistent component ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> has()</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> set()</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$id</span>, <span class="hljs-variable">$throwException</span> = <span class="hljs-literal">true</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;_components[<span class="hljs-variable">$id</span>])) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;_components[<span class="hljs-variable">$id</span>];<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;_definitions[<span class="hljs-variable">$id</span>])) &#123;<br>            <span class="hljs-variable">$definition</span> = <span class="hljs-variable language_">$this</span>-&gt;_definitions[<span class="hljs-variable">$id</span>];<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$definition</span>) &amp;&amp; !<span class="hljs-variable">$definition</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Closure</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;_components[<span class="hljs-variable">$id</span>] = <span class="hljs-variable">$definition</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;_components[<span class="hljs-variable">$id</span>] = <span class="hljs-title class_">Yii</span>::<span class="hljs-title function_ invoke__">createObject</span>(<span class="hljs-variable">$definition</span>);<br>        &#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$throwException</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidConfigException</span>(<span class="hljs-string">&quot;Unknown component ID: <span class="hljs-subst">$id</span>&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Registers a component definition with this locator.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * For example,</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * ```php</span><br><span class="hljs-comment">     * // a class name</span><br><span class="hljs-comment">     * $locator-&gt;set(&#x27;cache&#x27;, &#x27;yii\caching\FileCache&#x27;);</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * // a configuration array</span><br><span class="hljs-comment">     * $locator-&gt;set(&#x27;db&#x27;, [</span><br><span class="hljs-comment">     *     &#x27;class&#x27; =&gt; &#x27;yii\db\Connection&#x27;,</span><br><span class="hljs-comment">     *     &#x27;dsn&#x27; =&gt; &#x27;mysql:host=127.0.0.1;dbname=demo&#x27;,</span><br><span class="hljs-comment">     *     &#x27;username&#x27; =&gt; &#x27;root&#x27;,</span><br><span class="hljs-comment">     *     &#x27;password&#x27; =&gt; &#x27;&#x27;,</span><br><span class="hljs-comment">     *     &#x27;charset&#x27; =&gt; &#x27;utf8&#x27;,</span><br><span class="hljs-comment">     * ]);</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * // an anonymous function</span><br><span class="hljs-comment">     * $locator-&gt;set(&#x27;cache&#x27;, function ($params) &#123;</span><br><span class="hljs-comment">     *     return new \yii\caching\FileCache;</span><br><span class="hljs-comment">     * &#125;);</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * // an instance</span><br><span class="hljs-comment">     * $locator-&gt;set(&#x27;cache&#x27;, new \yii\caching\FileCache);</span><br><span class="hljs-comment">     * ```</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * If a component definition with the same ID already exists, it will be overwritten.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $id component ID (e.g. `db`).</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mixed $definition the component definition to be registered with this locator.</span><br><span class="hljs-comment">     * It can be one of the following:</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * - a class name</span><br><span class="hljs-comment">     * - a configuration array: the array contains name-value pairs that will be used to</span><br><span class="hljs-comment">     *   initialize the property values of the newly created object when [[get()]] is called.</span><br><span class="hljs-comment">     *   The `class` element is required and stands for the the class of the object to be created.</span><br><span class="hljs-comment">     * - a PHP callable: either an anonymous function or an array representing a class method (e.g. `[&#x27;Foo&#x27;, &#x27;bar&#x27;]`).</span><br><span class="hljs-comment">     *   The callable will be called by [[get()]] to return an object associated with the specified component ID.</span><br><span class="hljs-comment">     * - an object: When [[get()]] is called, this object will be returned.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> InvalidConfigException if the definition is an invalid configuration array</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set</span>(<span class="hljs-params"><span class="hljs-variable">$id</span>, <span class="hljs-variable">$definition</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;_components[<span class="hljs-variable">$id</span>]);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$definition</span> === <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;_definitions[<span class="hljs-variable">$id</span>]);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$definition</span>) || <span class="hljs-title function_ invoke__">is_callable</span>(<span class="hljs-variable">$definition</span>, <span class="hljs-literal">true</span>)) &#123;<br>            <span class="hljs-comment">// an object, a class name, or a PHP callable</span><br>            <span class="hljs-variable language_">$this</span>-&gt;_definitions[<span class="hljs-variable">$id</span>] = <span class="hljs-variable">$definition</span>;<br>        &#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$definition</span>)) &#123;<br>            <span class="hljs-comment">// a configuration array</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$definition</span>[<span class="hljs-string">&#x27;__class&#x27;</span>])) &#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;_definitions[<span class="hljs-variable">$id</span>] = <span class="hljs-variable">$definition</span>;<br>                <span class="hljs-variable language_">$this</span>-&gt;_definitions[<span class="hljs-variable">$id</span>][<span class="hljs-string">&#x27;class&#x27;</span>] = <span class="hljs-variable">$definition</span>[<span class="hljs-string">&#x27;__class&#x27;</span>];<br>                <span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;_definitions[<span class="hljs-variable">$id</span>][<span class="hljs-string">&#x27;__class&#x27;</span>]);<br>            &#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$definition</span>[<span class="hljs-string">&#x27;class&#x27;</span>])) &#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;_definitions[<span class="hljs-variable">$id</span>] = <span class="hljs-variable">$definition</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidConfigException</span>(<span class="hljs-string">&quot;The configuration for the \&quot;<span class="hljs-subst">$id</span>\&quot; component must contain a \&quot;class\&quot; element.&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidConfigException</span>(<span class="hljs-string">&quot;Unexpected configuration type for the \&quot;<span class="hljs-subst">$id</span>\&quot; component: &quot;</span> . <span class="hljs-title function_ invoke__">gettype</span>(<span class="hljs-variable">$definition</span>));<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>结合 <code>yii\redis\Connection</code> 中的代码可以看出，<code>$redis = \Yii::$app-&gt;redis;</code> 只生成了一个<code>yii\redis\Connection</code>对象，但是对socket创建却是惰性计算的，没有立即创建socket。</p><h2 id="结论">结论</h2><p>开头的问题也就有了答案，不会。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Linux</tag>
      
      <tag>Yii2</tag>
      
      <tag>系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rsync 数据备份</title>
    <link href="/2021/06/14/rsync-data.html"/>
    <url>/2021/06/14/rsync-data.html</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sshd<br>ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key<br>ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key<br></code></pre></td></tr></table></figure><p><code>rsync -avz username@mac_ip:file_path mobile_hdd_position</code></p><ul><li>https://club.huawei.com/thread-20591979-1-1.html</li><li>https://www.leiphone.com/category/gbsecurity/gumjRLa9F0eieKyZ.html</li><li>https://einverne.github.io/post/2020/03/router-bottleneck.html</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[ ID]</span> Interval           Transfer     Bitrate<br><span class="hljs-string">[  5]</span>   <span class="hljs-number">0.00</span><span class="hljs-number">-1.00</span>   sec  <span class="hljs-number">17.2</span> MBytes   <span class="hljs-number">144</span> Mbits/sec                  <br><span class="hljs-string">[  5]</span>   <span class="hljs-number">1.00</span><span class="hljs-number">-2.00</span>   sec  <span class="hljs-number">17.7</span> MBytes   <span class="hljs-number">148</span> Mbits/sec                  <br><span class="hljs-string">[  5]</span>   <span class="hljs-number">2.00</span><span class="hljs-number">-3.00</span>   sec  <span class="hljs-number">20.2</span> MBytes   <span class="hljs-number">169</span> Mbits/sec                  <br><span class="hljs-string">[  5]</span>   <span class="hljs-number">3.00</span><span class="hljs-number">-4.00</span>   sec  <span class="hljs-number">20.5</span> MBytes   <span class="hljs-number">172</span> Mbits/sec                  <br><span class="hljs-string">[  5]</span>   <span class="hljs-number">4.00</span><span class="hljs-number">-5.00</span>   sec  <span class="hljs-number">20.6</span> MBytes   <span class="hljs-number">173</span> Mbits/sec                  <br><span class="hljs-string">[  5]</span>   <span class="hljs-number">5.00</span><span class="hljs-number">-6.00</span>   sec  <span class="hljs-number">20.7</span> MBytes   <span class="hljs-number">174</span> Mbits/sec                  <br><span class="hljs-string">[  5]</span>   <span class="hljs-number">6.00</span><span class="hljs-number">-7.00</span>   sec  <span class="hljs-number">21.0</span> MBytes   <span class="hljs-number">176</span> Mbits/sec                  <br><span class="hljs-string">[  5]</span>   <span class="hljs-number">7.00</span><span class="hljs-number">-8.00</span>   sec  <span class="hljs-number">26.2</span> MBytes   <span class="hljs-number">220</span> Mbits/sec                  <br><span class="hljs-string">[  5]</span>   <span class="hljs-number">8.00</span><span class="hljs-number">-9.00</span>   sec  <span class="hljs-number">27.5</span> MBytes   <span class="hljs-number">231</span> Mbits/sec                  <br><span class="hljs-string">[  5]</span>   <span class="hljs-number">9.00</span><span class="hljs-number">-10.00</span>  sec  <span class="hljs-number">28.3</span> MBytes   <span class="hljs-number">237</span> Mbits/sec                  <br><span class="hljs-string">[  5]</span>  <span class="hljs-number">10.00</span><span class="hljs-number">-10.01</span>  sec   <span class="hljs-number">390</span> KBytes   <span class="hljs-number">346</span> Mbits/sec                  <br>- - - - - - - - - - - - - - - - - - - - - - - - -<br><span class="hljs-string">[ ID]</span> Interval           Transfer     Bitrate<br><span class="hljs-string">[  5]</span>   <span class="hljs-number">0.00</span><span class="hljs-number">-10.01</span>  sec   <span class="hljs-number">220</span> MBytes   <span class="hljs-number">184</span> Mbits/sec                  receiver<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>软件工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>virtualbox 中的 win7  无法识别 usb</title>
    <link href="/2021/04/14/virtualbox-usb.html"/>
    <url>/2021/04/14/virtualbox-usb.html</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay -S virtualbox-ext-oracle virtualbox virtualbox-guest-iso<br><br><span class="hljs-built_in">sudo</span> modprobe vboxdrv<br><br><span class="hljs-built_in">sudo</span> usermod -a -G  vboxusers `<span class="hljs-built_in">whoami</span>`<br><br>reboot<br></code></pre></td></tr></table></figure><ul><li>https://bbs.archlinux.org/viewtopic.php?id=194816</li><li>https://bbs.archlinuxcn.org/viewtopic.php?id=4581</li><li>https://www.linuxtechi.com/install-virtualbox-on-arch-linux/</li><li>https://blog.csdn.net/moliqin/article/details/79588382</li><li>http://ivo-wang.github.io/2018/02/22/arch-virtualbox-usb/</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>软件工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python 视频流提取人脸</title>
    <link href="/2021/02/26/python-cv-extract-face.html"/>
    <url>/2021/02/26/python-cv-extract-face.html</url>
    
    <content type="html"><![CDATA[<h4 id="upgrade-pip">upgrade pip</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install pip -U<br>pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<br></code></pre></td></tr></table></figure><p>c</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2    <span class="hljs-comment">#引入cv2，也就是引入opencv的一些包和处理类，不然下面的一些操作都无法完成</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">facedetect</span>(<span class="hljs-params">windowname,camera_id</span>):<br><span class="hljs-comment">#命名和打开摄像头</span><br>    cv2.namedWindow(windowname) <span class="hljs-comment"># 创建一个已windowname为名字的窗口</span><br><br>    cap=cv2.VideoCapture(camera_id) <span class="hljs-comment"># camera_id为设备摄像头的id，默认是0，如果有usb摄像头可能会变为1</span><br>    <span class="hljs-comment"># Face Detection using Haar Cascades http://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_objdetect/py_face_detection/py_face_detection.html?highlight=cascadeclassifier</span><br>    classfier=cv2.CascadeClassifier(<span class="hljs-string">&#x27;/home/soul11201/.local/lib/python3.9/site-packages/cv2/data/haarcascade_frontalface_alt.xml&#x27;</span>) <span class="hljs-comment"># 加载分类器，分类器位置可以自行更改，注意这里用opencv库文件夹下的绝对路径也不行，在库文件夹里找到这个文件复制到这个程序的同目录下，参考：https://blog.csdn.net/GAN_player/article/details/77993872</span><br><br>    color=(<span class="hljs-number">0</span>,<span class="hljs-number">225</span>,<span class="hljs-number">0</span>)<span class="hljs-comment">#人脸框的颜色，采用rgb模型，这里表示g取255，为绿色框</span><br><br>    <span class="hljs-keyword">while</span> cap.isOpened():<br>        ok,frame=cap.read() <span class="hljs-comment"># 读取一帧数据，ok表示摄像头读取状态，frame表示摄像头读取的图像矩阵mat类型</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-comment"># 灰度化在后面检测时可以降低计算量，cvtColor changing colorspace</span><br>        gray=cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)<span class="hljs-comment">#图像灰度化，cv2.cvtColor(input_image, flag) where flag determines the type of conversion.</span><br><br>        <span class="hljs-comment"># detectMultiScale完成人脸探测工作，returns the positions of detected faces as Rect(x,y,w,h)，x、y是左上角起始坐标，h、w是高和宽</span><br>        <span class="hljs-comment"># grey是要识别的图像数据，scaleFactor图像缩放比例，可以理解为同一个物体与相机距离不同，其大小亦不同，必须将其缩放到一定大小才方便识别，该参数指定每次缩放的比例</span><br><br>        faceRects = classfier.detectMultiScale(gray, scaleFactor=<span class="hljs-number">1.2</span>, minNeighbors=<span class="hljs-number">3</span>,<br>                                               minSize=(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>))  <span class="hljs-comment"># 利用分类器检测灰度图像中的人脸矩阵数，1.2和3分别为图片缩放比例和需要检测的有效点数</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(faceRects) &gt; <span class="hljs-number">0</span>:  <span class="hljs-comment"># 大于0则检测到人脸</span><br>            <span class="hljs-keyword">for</span> faceRect <span class="hljs-keyword">in</span> faceRects:  <span class="hljs-comment"># 可能检测到多个人脸，用for循环单独框出每一张人脸</span><br>                x, y, w, h = faceRect  <span class="hljs-comment"># 获取框的左上的坐标，框的长宽</span><br>                <span class="hljs-comment"># cv2.rectangle()完成画框的工作，这里外扩了10个像素以框出比人脸稍大一点的区域，从而得到相对完整一点的人脸图像；cv2.rectangle()函数的最后两个参数一个用于指定矩形边框的颜色，一个用于指定矩形边框线条的粗细程度。</span><br>                cv2.rectangle(frame, (x - <span class="hljs-number">10</span>, y - <span class="hljs-number">10</span>), (x + w - <span class="hljs-number">10</span>, y + h - <span class="hljs-number">10</span>), color, <span class="hljs-number">2</span>)<br><br>        cv2.imshow(windowname, frame)  <span class="hljs-comment"># 显示图像</span><br><br>        c = cv2.waitKey(<span class="hljs-number">10</span>)<br>        <span class="hljs-keyword">if</span> c &amp; <span class="hljs-number">0xFF</span> == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):  <span class="hljs-comment"># 退出条件</span><br>            <span class="hljs-keyword">break</span><br>    cap.release()  <span class="hljs-comment"># 释放摄像头并销毁所有窗口</span><br>    cv2.destroyAllWindows()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<span class="hljs-comment">#主程序</span><br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;face detecting... &#x27;</span>)<br>    facedetect(<span class="hljs-string">&#x27;facedetect&#x27;</span>,<span class="hljs-number">0</span>)<br><br></code></pre></td></tr></table></figure><p>ref<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/">[1]</span></a></sup><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://www.imooc.com/article/67961">[2]</span></a></sup><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://cloud.tencent.com/developer/article/1631566">[3]</span></a></sup><sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://blog.csdn.net/GAN_player/article/details/77993872">[4]</span></a></sup><sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://blog.csdn.net/mahoon411/article/details/106183362">[5]</span></a></sup><sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://blog.csdn.net/weixin_39450145/article/details/104801730">[6]</span></a></sup><sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://juejin.cn/post/6878578714834124808">[7]</span></a></sup></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1"class="footnote-text"><span>https://mirrors.tuna.tsinghua.edu.cn/help/pypi/<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2"class="footnote-text"><span>https://www.imooc.com/article/67961<a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:3"class="footnote-text"><span>https://cloud.tencent.com/developer/article/1631566<a href="#fnref:3" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:4"class="footnote-text"><span>https://blog.csdn.net/GAN_player/article/details/77993872<a href="#fnref:4" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:5"class="footnote-text"><span>https://blog.csdn.net/mahoon411/article/details/106183362<a href="#fnref:5" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:6"class="footnote-text"><span>https://blog.csdn.net/weixin_39450145/article/details/104801730<a href="#fnref:6" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:7"class="footnote-text"><span>https://juejin.cn/post/6878578714834124808<a href="#fnref:7" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>软件工具</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 构建 Mysql 开发环境</title>
    <link href="/2020/12/25/docker-mysql.html"/>
    <url>/2020/12/25/docker-mysql.html</url>
    
    <content type="html"><![CDATA[<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.1&quot;</span><br><span class="hljs-attr">services:</span> <br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">my_db_dockername</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:5.7</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">--default-authentication-plugin=mysql_native_password</span> <span class="hljs-string">--character-set-server=utf8mb4</span> <span class="hljs-string">--collation-server=utf8mb4_unicode_ci</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">3306</span><span class="hljs-string">:3306</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./mysql_data_holonet:/var/lib/mysql</span><br></code></pre></td></tr></table></figure><p>MySql 的 docker镜像起来后，宿主机默认是无法访问的，需要添加授权。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose  up --remove-orphans -d<br>docker <span class="hljs-built_in">exec</span> -it  my_db_dockername   /bin/sh<br>mysql -uroot -h127.0.0.1 -p<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> privileges <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;dbname&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;dbpass&#x27;</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">grant</span> option;<br>flush privileges;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>开发</tag>
      
      <tag>部署</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建 Rust docker 镜像</title>
    <link href="/2020/12/21/rust-docker-build.html"/>
    <url>/2020/12/21/rust-docker-build.html</url>
    
    <content type="html"><![CDATA[<p>https://doc.rust-lang.org/cargo/reference/config.html</p><p>DockerFile</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">FROM</span> <span class="hljs-string">rust:1.48.0</span><br><br><span class="hljs-string">WORKDIR</span> <span class="hljs-string">/usr/src/myapp</span><br><span class="hljs-string">COPY</span> <span class="hljs-string">.</span> <span class="hljs-string">.</span><br><br><span class="hljs-string">RUN</span> <span class="hljs-string">pwd</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">cp</span> <span class="hljs-string">/usr/src/myapp/cargo_config</span> <span class="hljs-string">/usr/local/cargo/config</span> <span class="hljs-string">&amp;&amp;ls</span> <span class="hljs-string">-alh</span> <span class="hljs-string">/usr/local/cargo/config</span> <span class="hljs-string">&amp;&amp;</span>  <span class="hljs-string">cargo</span> <span class="hljs-string">build</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">cargo</span> <span class="hljs-string">install</span> <span class="hljs-string">--path</span> <span class="hljs-string">.</span><br><br><span class="hljs-string">CMD</span> [<span class="hljs-string">&quot;isc-event-display&quot;</span>]<br></code></pre></td></tr></table></figure><p><code>filename: cargo_config</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[source.crates-io]</span><br><span class="hljs-attr">registry</span> = <span class="hljs-string">&quot;https://github.com/rust-lang/crates.io-index&quot;</span><br><br><span class="hljs-comment">#http.check-revoke = false</span><br><span class="hljs-comment"># 替换成你偏好的镜像源</span><br><span class="hljs-attr">replace-with</span> = <span class="hljs-string">&#x27;tuna&#x27;</span><br><br><span class="hljs-comment"># 清华大学</span><br><span class="hljs-section">[source.tuna]</span><br><span class="hljs-attr">registry</span> = <span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git&quot;</span><br><br><span class="hljs-comment"># 中国科学技术大学</span><br><span class="hljs-section">[source.ustc]</span><br><span class="hljs-attr">registry</span> = <span class="hljs-string">&quot;git://mirrors.ustc.edu.cn/crates.io-index&quot;</span><br><br><span class="hljs-comment"># 上海交通大学</span><br><span class="hljs-section">[source.sjtu]</span><br><span class="hljs-attr">registry</span> = <span class="hljs-string">&quot;https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index&quot;</span><br><br><span class="hljs-comment"># rustcc社区</span><br><span class="hljs-section">[source.rustcc]</span><br><span class="hljs-attr">registry</span> = <span class="hljs-string">&quot;git://crates.rustcc.cn/crates.io-index&quot;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Rust</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rust 泛型</title>
    <link href="/2020/12/18/rust-generics.html"/>
    <url>/2020/12/18/rust-generics.html</url>
    
    <content type="html"><![CDATA[<p>所有权</p><p>类型 属性 泛型</p><p>函数 特性</p><p>生命周期</p><p>重复</p><p>泛型定义函数、结构体、枚举和方法</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">largest</span>&lt;T&gt;(list: &amp;[T]) <span class="hljs-punctuation">-&gt;</span> T &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>std::cmp::PartialOrd &gt;</p><p>泛型实现特定的 trait</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Point</span>&lt;<span class="hljs-type">f32</span>&gt; &#123;<br><br><br><span class="hljs-keyword">impl</span>&lt;T&gt; Point&lt;T&gt; &#123;<br><br><span class="hljs-keyword">impl</span>&lt;T, U&gt; Point&lt;T, U&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">mixup</span>&lt;V, W&gt;(<span class="hljs-keyword">self</span>, other: Point&lt;V, W&gt;) <span class="hljs-punctuation">-&gt;</span> Point&lt;T, W&gt; &#123;<br><br><br></code></pre></td></tr></table></figure><p>单态化</p><p>trait 以一种抽象的方式定义共享的行为</p><p>trait bounds 指定泛型是任何拥有特定行为的类型</p><p>一个类型的行为由其可供调用的方法构成。如果可以对不同类型调用相同的方法的话，这些类型就可以共享相同的行为了</p><p>实现 trait 时需要注意的一个限制是，只有当 trait 或者要实现 trait的类型位于 crate 的本地作用域时，才能为该类型实现 trait。</p><p>相干性（coherence）</p><p>孤儿规则（orphan rule）</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>会议室选择面板屏幕如何选择？</title>
    <link href="/2020/12/18/meeting-screen.html"/>
    <url>/2020/12/18/meeting-screen.html</url>
    
    <content type="html"><![CDATA[<p>会议室屏幕有个简单公式</p><p>屏幕尺寸 * factore = 人眼视觉接受最远距离</p><p>%EH = 元素高度 / 屏幕尺寸</p><h3 id="factor">Factor</h3><p>Video 8</p><p>6 for applications where PowerPoint (large font) presentation</p><p>In boardrooms and conference rooms using video conferencing (Skype,Videxio, WebEx, etc.) a multiplier of 4 is recommended</p><p>4 for presentations that consist primarily of data rich contents suchas CAD drawings, documents from Word or Excel, and Web pages or screenshares</p><p>· 2% EH—usually sufficient for conference rooms where detailedcontent is disseminated over an extended period of time.</p><p>· 3% EH—this is the most common setting, usually employed where theviewers have additional clues for the information.</p><p>· 4% EH—used when there are no clues for the viewer and they don’tsee the content for very long.</p><ul><li>https://pid.samsungdisplay.com/en/learning-center/blog/how-to-choose-signage-size</li><li>https://www.logicav.net/more/our-blog/item/how-to-determine-the-right-display-for-your-conference-room-part-one</li><li>https://www.linkedin.com/pulse/what-screen-size-suit-your-conference-venue-boardroom-robbertze/</li><li>https://www.avixa.org/about-avixa/who-we-are/press-room/2016/06/10/infocomm-international-releases-new-standard-for-display-image-size</li></ul><h3 id="补充几个资料">补充几个资料</h3><ul><li><ahref="https://www.youtube.com/watch?v=jp2Q2g0A5wc&amp;t=11s">Image Sizeand Resolution Explained</a></li></ul><div class="video-container"><iframe src="https://www.youtube.com/embed/jp2Q2g0A5wc" frameborder="0" loading="lazy" allowfullscreen></iframe></div><ul><li><p><ahref="https://blog.csdn.net/XXJ19950917/article/details/78210777">dpi 、dip 、分辨率、屏幕尺寸、px、density 关系以及换算</a></p></li><li><p><ahref="https://www.jianshu.com/p/c3387bcc4f6e">屏幕尺寸，分辨率，像素，PPI之间到底什么关系</a></p></li></ul><h3 id="二维码">二维码</h3><ul><li><ahref="https://pid.samsungdisplay.com/en/learning-center/blog/how-to-choose-signage-size">TheBest Guide to Choosing the Right Digital Signage Size</a>对基础概念有解释</li></ul><table><thead><tr><th>元素类型</th><th>尺寸</th><th>距离</th><th>效果</th><th>识别工具</th></tr></thead><tbody><tr><td>二维码，7%冗余度</td><td><code>200px X 200px</code></td><td>1m</td><td>秒级识别</td><td>企微</td></tr><tr><td>文字</td><td>字体高度 &gt;0.4cm</td><td>80cm</td><td>字体高度/观测距离的 ~= 千分之五</td><td>人眼</td></tr></tbody></table><ul><li>BDM 场景下 AVIXA, Inc. 针对ANSI 标准做的<ahref="https://www.avixa.org/standards/discas-calculators/discas/bdm">计算工具</a>,</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 emacs projectile magit 管理项目代码</title>
    <link href="/2020/12/16/emacs-projectile-magit.html"/>
    <url>/2020/12/16/emacs-projectile-magit.html</url>
    
    <content type="html"><![CDATA[<p>如丝般顺滑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elisp">(projectile-mode +1)<br>(define-key projectile-mode-map (kbd &quot;C-c p&quot;) &#x27;projectile-command-map)<br>(setq projectile-project-search-path &#x27;(&quot;~/project-dir-path&quot; &quot;~/project-dir-parent-path))<br></code></pre></td></tr></table></figure><p>https://github.com/bbatsov/projectile</p><p>https://vincent.demeester.fr/articles/emacs_projects.html</p><p>https://endlessparentheses.com/improving-projectile-with-extra-commands.html</p><p>https://www.reddit.com/r/spacemacs/comments/aibvd5/open_a_magit_buffer_for_a_projectile_project/</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Emacs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python 更新 git 项目</title>
    <link href="/2020/12/13/python-update-git-project.html"/>
    <url>/2020/12/13/python-update-git-project.html</url>
    
    <content type="html"><![CDATA[<p>在目录 <code>/home/soul11201/code/emacs</code> 下面放了很多<code>elpa</code> 没有管理的 gihub上的 emacs lisp包，每次更新都需要手动更新挺费事。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> os<br><br>abs_dir = os.path.abspath(<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-built_in">print</span>(&#123;<span class="hljs-string">&quot;当前目录&quot;</span>:abs_dir, <span class="hljs-string">&quot;git dir: &quot;</span>:os.listdir()&#125;)<br><span class="hljs-comment"># print()</span><br><br><span class="hljs-comment"># print(&#123;&quot;a&quot;:&quot;b&quot;&#125;)</span><br><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">dir</span> <span class="hljs-keyword">in</span> os.listdir() :<br>    git_dir = os.path.join(abs_dir, <span class="hljs-built_in">dir</span>)<br>    <span class="hljs-comment"># print((dir,os.path.isdir(dir)))</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span>,(git_dir, os.path.isdir(git_dir)))<br><br>    <span class="hljs-keyword">if</span> os.path.isdir(git_dir) :<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;change to dir:&quot;</span>, git_dir)<br>        os.chdir(git_dir)<br>        os.system(<span class="hljs-string">&quot;git pull --rebase&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作流</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rust 时间格式化</title>
    <link href="/2020/12/09/rust-datetime.html"/>
    <url>/2020/12/09/rust-datetime.html</url>
    
    <content type="html"><![CDATA[<p>https://docs.rs/chrono/0.4.19/chrono/</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><br><span class="hljs-keyword">let</span> <span class="hljs-variable">time</span> = chrono::Utc::<span class="hljs-title function_ invoke__">now</span>();<br><br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">f</span> = FixedOffset::<span class="hljs-title function_ invoke__">east</span>(<span class="hljs-number">8</span>*<span class="hljs-number">3600</span>).<span class="hljs-title function_ invoke__">from_utc_datetime</span>(&amp;time.<span class="hljs-title function_ invoke__">naive_utc</span>());<br>   <br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">t</span> =  f.format(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>).<span class="hljs-title function_ invoke__">to_string</span>();<br>   <br><br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">t1</span> = time.<span class="hljs-title function_ invoke__">timestamp</span>();<br><br><br></code></pre></td></tr></table></figure><p>Django中与时区相关的安全问题https://www.leavesongs.com/PYTHON/django-timezone-detail.html</p><p>https://www.codenong.com/cs106439523/</p><p>https://docs.djangoproject.com/zh-hans/3.1/topics/i18n/timezones/#</p><p>https://stackoverflow.com/questions/522251/whats-the-difference-between-iso-8601-and-rfc-3339-date-formats</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用工具生成 dcron 任务</title>
    <link href="/2020/12/09/template-toolization.html"/>
    <url>/2020/12/09/template-toolization.html</url>
    
    <content type="html"><![CDATA[<p><code>模板问题工具化</code></p><p>线上基于 Yii2 的 PHP 项目 需要跑很多后台进程，用来处理异步任务，如IM通知、BPM、事件消费。</p><p>针对这些后台任务总结分析，发现如下四个特点：</p><ul><li>定时执行</li><li>拉起异常推出的常驻进程</li><li>拉起时异常推出的日志记录到文件</li><li>路径固定：部署的代码、日志、缓存、配置等</li><li>Yii2 Command 程序运行命令格式固定</li><li>结束常驻进程运行的程序</li></ul><p>基于此提炼出如下 cron 命令模板</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps aux|grep \&quot;php /opt/www/htdocs/&#123;&#125;/yii &#123;&#125;\&quot;|grep -v &#x27;grep&#x27; || (php /opt/www/htdocs/&#123;&#125;/yii &#123;&#125; &gt;&gt; /opt/www/logs/&#123;&#125;/&#123;&#125; 2&gt;&amp;1 &amp;<br><br>ps aux|grep \&quot;php /opt/www/htdocs/&#123;&#125;/yii &#123;&#125;\&quot;|grep -v &#x27;grep&#x27;|awk &#x27;&#123;&#123;print $2&#125;&#125;&#x27; | xargs -n 1 kill -9<br></code></pre></td></tr></table></figure><p>使用 rust 制造如下工具：</p><ul><li>module_id: 项目名称比如 force-holo</li><li>yii_cmd: yii2 command 命令名字比如默认自带的 serve/index</li></ul><p>因为文件名称中不能有 <code>/</code>，故进行替换<code>cmd.replace("/", "-")</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::env::&#123;args&#125;;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-title function_ invoke__">args</span>().<span class="hljs-title function_ invoke__">len</span>() &lt; <span class="hljs-number">3</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Usage： &#123;&#125; module_id yii2_cmd&quot;</span>, <span class="hljs-title function_ invoke__">args</span>().<span class="hljs-title function_ invoke__">nth</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_ invoke__">expect</span>(<span class="hljs-string">&quot;executable program&quot;</span>));<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">module_id</span> = <span class="hljs-title function_ invoke__">args</span>().<span class="hljs-title function_ invoke__">nth</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">expect</span>(<span class="hljs-string">&quot;module_id&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">cmd</span> = <span class="hljs-title function_ invoke__">args</span>().<span class="hljs-title function_ invoke__">nth</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_ invoke__">expect</span>(<span class="hljs-string">&quot;command&quot;</span>);<br><br>    <span class="hljs-comment">// let kill = &quot;ps aux|grep \&quot;php /data0/www/htdocs/&#123;&#125;/yii &#123;&#125;\&quot;|grep -v &#x27;grep&#x27; || (php /data0/www/htdocs/&#123;&#125;/yii &#123;&#125; &gt;&gt; /data0/www/applogs/&#123;&#125;/&#123;&#125; 2&gt;&amp;1 &amp;)&quot;;</span><br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">run_cmd</span> = <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;ps aux|grep \&quot;php /data0/www/htdocs/&#123;&#125;/yii &#123;&#125;\&quot;|grep -v &#x27;grep&#x27; || (php /data0/www/htdocs/&#123;&#125;/yii &#123;&#125; &gt;&gt; /data0/www/applogs/&#123;&#125;/&#123;&#125; 2&gt;&amp;1 &amp;)&quot;</span>,<br>                           module_id, cmd, module_id, cmd, module_id, cmd.<span class="hljs-title function_ invoke__">replace</span>(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>));<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, run_cmd);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">kill_cmd</span> = <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;ps aux|grep \&quot;php /data0/www/htdocs/&#123;&#125;/yii &#123;&#125;\&quot;|grep -v &#x27;grep&#x27;|awk &#x27;&#123;&#123;print $2&#125;&#125;&#x27; | xargs -n 1 kill -9&quot;</span>,<br>                           module_id, cmd);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, kill_cmd);<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  gen-dcron git:(master) cargo build<br>➜  gen-dcron git:(master) target/debug/gen-dcron force-holo serve/index<br>ps aux|grep &quot;php /data0/www/htdocs/force-holo/yii serve/index&quot;|grep -v &#x27;grep&#x27; || (php /data0/www/htdocs/force-holo/yii serve/index &gt;&gt; /data0/www/applogs/force-holo/serve-index 2&gt;&amp;1 &amp;)<br>ps aux|grep &quot;php /data0/www/htdocs/force-holo/yii serve/index&quot;|grep -v &#x27;grep&#x27;|awk &#x27;&#123;print $2&#125;&#x27; | xargs -n 1 kill -9<br><br></code></pre></td></tr></table></figure><p>项目地址：<ahref="https://github.com/noname007/rust-demo-cron-cmd-for-yii2-proj">https://github.com/noname007/rust-demo-cron-cmd-for-yii2-proj</a></p><hr /><p>相关文章： <ahref="./2020-05-04-build-own-framework.md">琐事、工具</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作流</tag>
      
      <tag>Rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Manjaro 安装 Docker</title>
    <link href="/2020/12/08/docker-manjaro.html"/>
    <url>/2020/12/08/docker-manjaro.html</url>
    
    <content type="html"><![CDATA[<h3 id="基础">基础</h3><p>https://www.zhihu.com/question/27561972</p><h3 id="安装docker-123">安装docker<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://blog.csdn.net/weixin_40422121/article/details/106032921">[1]</span></a></sup><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://zhuanlan.zhihu.com/p/125785517">[2]</span></a></sup><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://www.cnblogs.com/imzhizi/p/10718310.html">[3]</span></a></sup></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Pacman 安装 Docker</span><br>sudo pacman -S docker<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动docker服务</span><br>sudo systemctl start docker <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看docker服务的状态</span><br>sudo systemctl status docker<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置docker开机启动服务</span><br>sudo systemctl enable docker<br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ systemctl start docker <br>➜  ~ systemctl status docker<br>● docker.service - Docker Application Container Engine<br>     Loaded: loaded (/usr/lib/systemd/system/docker.service; disabled; vendor preset: disabled)<br>     Active: active (running) since Tue 2020-12-08 12:37:35 CST; 57s ago<br>TriggeredBy: ● docker.socket<br>       Docs: https://docs.docker.com<br>   Main PID: 13531 (dockerd)<br>      Tasks: 14<br>     Memory: 38.5M<br>     CGroup: /system.slice/docker.service<br>             └─13531 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock<br><br>12月 08 12:37:35 soul11201-latitude7300 dockerd[13531]: time=&quot;2020-12-08T12:37:35.305886008+08:00&quot; level=warning msg=&quot;Your kernel does not &gt;<br>12月 08 12:37:35 soul11201-latitude7300 dockerd[13531]: time=&quot;2020-12-08T12:37:35.305889412+08:00&quot; level=warning msg=&quot;Your kernel does not &gt;<br>12月 08 12:37:35 soul11201-latitude7300 dockerd[13531]: time=&quot;2020-12-08T12:37:35.306000578+08:00&quot; level=info msg=&quot;Loading containers: star&gt;<br>12月 08 12:37:35 soul11201-latitude7300 dockerd[13531]: time=&quot;2020-12-08T12:37:35.416499556+08:00&quot; level=info msg=&quot;Default bridge (docker0)&gt;<br>12月 08 12:37:35 soul11201-latitude7300 dockerd[13531]: time=&quot;2020-12-08T12:37:35.467739556+08:00&quot; level=info msg=&quot;Loading containers: done&gt;<br>12月 08 12:37:35 soul11201-latitude7300 dockerd[13531]: time=&quot;2020-12-08T12:37:35.503929080+08:00&quot; level=warning msg=&quot;Not using native diff&gt;<br>12月 08 12:37:35 soul11201-latitude7300 dockerd[13531]: time=&quot;2020-12-08T12:37:35.504139584+08:00&quot; level=info msg=&quot;Docker daemon&quot; commit=44&gt;<br>12月 08 12:37:35 soul11201-latitude7300 dockerd[13531]: time=&quot;2020-12-08T12:37:35.504228733+08:00&quot; level=info msg=&quot;Daemon has completed ini&gt;<br>12月 08 12:37:35 soul11201-latitude7300 dockerd[13531]: time=&quot;2020-12-08T12:37:35.535365612+08:00&quot; level=info msg=&quot;API listen on /run/docke&gt;<br>12月 08 12:37:35 soul11201-latitude7300 systemd[1]: Started Docker Application Container Engine.<br>➜  ~ syst                 <br>➜  ~ systemctl enable docker<br>Created symlink /etc/systemd/system/multi-user.target.wants/docker.service → /usr/lib/systemd/system/docker.service.<br><br></code></pre></td></tr></table></figure><h3id="使用镜像加速1">使用镜像加速<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://blog.csdn.net/weixin_40422121/article/details/106032921">[1]</span></a></sup></h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1"class="footnote-text"><span>https://blog.csdn.net/weixin_40422121/article/details/106032921<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2"class="footnote-text"><span>https://zhuanlan.zhihu.com/p/125785517<a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:3"class="footnote-text"><span>https://www.cnblogs.com/imzhizi/p/10718310.html<a href="#fnref:3" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>软件工具</tag>
      
      <tag>Docker</tag>
      
      <tag>systemd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Jekins 中对 PHP 持续集成</title>
    <link href="/2020/11/16/build-system.html"/>
    <url>/2020/11/16/build-system.html</url>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">处理基础环境依赖</span><br>yum -y install php70w-ldap.x86_64<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">处理配置</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">composer install -vvv --no-dev</span><br>composer install -vvv<br>cp config/db.prod.php config/db.php<br>rm config/params.php<br>cp config/params.prod.php config/params.php<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">sed -i <span class="hljs-string">&#x27;4,5s/^/#/g&#x27;</span> web/index.php</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">sed -i <span class="hljs-string">&#x27;10,12s/^/#/g&#x27;</span> yii</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">适配CI系统</span><br>mv web htdocs<br>mkdir build<br><br>rsync -av .  build/ --exclude=&quot;.git&quot; --exclude=&quot;.gitlab&quot;<br><br>tar -zcvf yii2.tar.gz build<br>mv yii2.tar.gz  build/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">IM 通知</span><br>function wechatwrok_bot() &#123;<br>    echo &quot;$1&quot;  | xargs -I &#123;&#125; curl -s  -v &#x27;https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=filled-with-your-wxwork-bot-key&#x27; -H &#x27;Content-Type: application/json&#x27; -d &#x27;&#123; &quot;msgtype&quot;: &quot;text&quot;,  &quot;text&quot;: &#123;&quot;content&quot;: &quot;&#123;&#125;&quot;&#125;&#125;&#x27;<br>&#125;<br><br>wechatwrok_bot &quot;$&#123;BRANCH_NAME&#125; build finish,by $&#123;CHANGE_AUTHOR&#125;. Please go to $&#123;BUILD_URL&#125; and verify the build&quot;<br><br></code></pre></td></tr></table></figure><p>什么是构建系统</p><p>编译器、解释器，</p><p>Shell脚本、 Make 、CMake ， Jenkins、 Travis CI ，</p><p>各种语言的包管理系统比如 PHP/Composer Python/pip Ruby/gem Node/npmRust/Cargo，</p><p>对了还有 Git（最早的时候 PHP 项目我都是用 git直接拉代码到线上运行时目录）</p><p>林林总总，很多工具都可以算得上是构建系统，但某些时候又算不上是。</p><p>为什么呢？不同场景使然。</p><p>从目的来说是，构建系统是一个辅助系统，辅助编写的软件变成一个稳定可运行的服务、功能</p><p>从流程来说是一个包含集成、编译、打包、发布、自动化测试等多个环节的系统。</p><p>从语言自身来说比如 C 语言的宏、libtool、PHP Composer Plugin 、PythonSwig 等扩展语言边界，扩展构建工具能力的各种元编程系统、</p><p>可以用于辅助管理项目正常运转所需的依赖、配置等，说白了是一些代码生成辅助工具</p><p>凡此种种，可以看出构建系统是一种辅助处理软件边界、非核心功能的工具</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Linux</tag>
      
      <tag>构建</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>照片方向 -- Exif Orientation</title>
    <link href="/2020/11/13/exif.html"/>
    <url>/2020/11/13/exif.html</url>
    
    <content type="html"><![CDATA[<p><code>上周遇到一个问题发现有些用户手机竖着拍的照片，传上来后发现照片人头逆时针转了90度没有旋转。</code></p><p>其中一点让人比较费解，手机竖着拍照片，但是照片里面的 Exif 信息<code>Orientation: Rotate 90 CW</code> 确实是横着的。</p><p>另外发现，检测头像是否旋转的代码有问题，忘记修改默认的读取器<code>-&gt;setMetadataReader(new ExifMetadataReader())</code><sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://imagine.readthedocs.io/en/stable/usage/metadata.html#exif-metadata-reader">[8]</span></a></sup>，无法提取出来照片的Exif 中的方向信息。</p><h2 id="exif-简介">Exif 简介</h2><p>Exif是专门为数码相机的照片设定的文件格式，可以记录数码照片的属性信息和拍摄数据。</p><p>Exif可以附加于JPEG、TIFF、RIFF等文件之中，为其增加有关数码相机拍摄信息的内容和索引图或图像处理软件的版本信息。</p><h3 id="exif-orientation">Exif Orientation</h3><p>Orientation 取值可以有八个，去掉镜面对称的四个 其实重要的就四个值 1 36 8</p><p>下图中 第一行 红框表示相机握持姿势，F 表示被拍着物体。</p><p>第二行 数字照片内容的示意图</p><p>第三行数字照片在看图工具中，经过看图工具自动调整后的显示示意图。所以有时候想故意拍一个歪倒的照片来欣赏，并不容易看到，有时候工具就自动给你调正了。</p><p><img src="/assets/20201113-exif.gif" alt="" width="80%"/></p><h3 id="程序中如何旋转调正呢">程序中如何旋转调正呢？</h3><p>就是下图中把 3 6 8 旋转调整到 1的位置，分别是旋转 +(-)180 -9090，很明显角度的正负是以极坐标系的角度来判断正负的。</p><p><img src="/assets/20201113-exif-2.gif" alt="" width="80%"/></p><h2 id="有意思的工具">有意思的工具</h2><h3 id="exiftool">exiftool</h3><p>这是一个 perl写的库，可以跨平台使用，并且提供了命令行应用程序，其他语言也有对其的封装。这个工具功能强大，能提取各种文件里面的元信息<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://exiftool.org/#supported">[7]</span></a></sup>。</p><h3 id="安装">安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  yay exiftool<br>7 aur/ruby-mini_exiftool 2.10.0-2 (+0 0.00) <br>    A wrapper for the ExifTool command-line application<br>6 aur/exiftool 12.09-1 (+1 0.40) <br>    Meta information reader/writer<br>5 aur/jexiftoolgui 1.6.3-1 (+2 0.00) <br>    jExifToolGUI is a java/Swing graphical frontend for the excellent command-line ExifTool application by Phil Harvey<br>4 aur/python2-pyexiftool 0.2.0-2 (+11 0.00) (孤立) <br>    Library to communicate with an instance of ExifTool command-line application<br>3 aur/python-pyexiftool 0.2.0-2 (+11 0.00) (孤立) <br>    Library to communicate with an instance of ExifTool command-line application<br>2 aur/pyexiftoolgui-git 0.5.r43.17c7a0e-1 (+17 0.00) (孤立) <br>    A python pyside graphical frontend for the excellent open source command line tool ExifTool.<br>1 extra/perl-image-exiftool 12.00-2 (2.4 MiB 12.4 MiB) (已安装)<br>    Reader and rewriter of EXIF informations that supports raw files<br>==&gt; 要安装的包 (示例: 1 2 3, 1-3 或 ^4)<br>==&gt; 1<br>[sudo] soul11201 的密码：<br>警告：perl-image-exiftool-12.00-2 已经为最新 -- 重新安装<br>正在解析依赖关系...<br>错误：local 数据库不一致：名字和软件包中的 electron-ssr-0.3.0 不一致<br>错误：local 数据库不一致：版本和软件包中的 electron-ssr-0.3.0 不一致<br>正在查找软件包冲突...<br><br>软件包 (1) perl-image-exiftool-12.00-2<br><br>全部安装大小：  12.39 MiB<br>净更新大小：   0.00 MiB<br><br>:: 进行安装吗？ [Y/n] <br>(1/1) 正在检查密钥环里的密钥                                             [########################################] 100%<br>(1/1) 正在检查软件包完整性                                               [########################################] 100%<br>(1/1) 正在加载软件包文件                                                 [########################################] 100%<br>(1/1) 正在检查文件冲突                                                   [########################################] 100%<br>(1/1) 正在检查可用存储空间                                               [########################################] 100%<br>:: 正在处理软件包的变化...<br>(1/1) 正在重新安装 perl-image-exiftool                                   [########################################] 100%<br>:: 正在运行事务后钩子函数...<br>(1/2) Arming ConditionNeedsUpdate...<br>(2/2) Warn about old perl modules<br>➜ <br></code></pre></td></tr></table></figure><h3 id="提取一个照片的元信息">提取一个照片的元信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs bash">➜  exiftool 4bb1155c7d0bc9eb71ba7de55316786b_1604673582825.jpeg<br>ExifTool Version Number         : 12.00<br>File Name                       : 4bb1155c7d0bc9eb71ba7de55316786b_1604673582825.jpeg<br>Directory                       : .<br>File Size                       : 1605 kB<br>File Modification Date/Time     : 2020:11:06 23:22:37+08:00<br>File Access Date/Time           : 2020:11:06 23:22:37+08:00<br>File Inode Change Date/Time     : 2020:11:10 20:34:28+08:00<br>File Permissions                : rw-r--r--<br>File Type                       : JPEG<br>File Type Extension             : jpg<br>MIME Type                       : image/jpeg<br>JFIF Version                    : 1.01<br>Resolution Unit                 : None<br>X Resolution                    : 72<br>Y Resolution                    : 72<br>Exif Byte Order                 : Big-endian (Motorola, MM)<br>Orientation                     : Rotate 90 CW<br>Color Space                     : Uncalibrated<br>Exif Image Width                : 3088<br>Exif Image Height               : 2316<br>Current IPTC Digest             : d41d8cd98f00b204e9800998ecf8427e<br>IPTC Digest                     : d41d8cd98f00b204e9800998ecf8427e<br>Profile CMM Type                : Apple Computer Inc.<br>Profile Version                 : 4.0.0<br>Profile Class                   : Display Device Profile<br>Color Space Data                : RGB<br>Profile Connection Space        : XYZ<br>Profile Date Time               : 2017:07:07 13:22:32<br>Profile File Signature          : acsp<br>Primary Platform                : Apple Computer Inc.<br>CMM Flags                       : Not Embedded, Independent<br>Device Manufacturer             : Apple Computer Inc.<br>Device Model                    : <br>Device Attributes               : Reflective, Glossy, Positive, Color<br>Rendering Intent                : Perceptual<br>Connection Space Illuminant     : 0.9642 1 0.82491<br>Profile Creator                 : Apple Computer Inc.<br>Profile ID                      : ca1a9582257f104d389913d5d1ea1582<br>Profile Description             : Display P3<br>Profile Copyright               : Copyright Apple Inc., 2017<br>Media White Point               : 0.95045 1 1.08905<br>Red Matrix Column               : 0.51512 0.2412 -0.00105<br>Green Matrix Column             : 0.29198 0.69225 0.04189<br>Blue Matrix Column              : 0.1571 0.06657 0.78407<br>Red Tone Reproduction Curve     : (Binary data 32 bytes, use -b option to extract)<br>Chromatic Adaptation            : 1.04788 0.02292 -0.0502 0.02959 0.99048 -0.01706 -0.00923 0.01508 0.75168<br>Blue Tone Reproduction Curve    : (Binary data 32 bytes, use -b option to extract)<br>Green Tone Reproduction Curve   : (Binary data 32 bytes, use -b option to extract)<br>Image Width                     : 3088<br>Image Height                    : 2316<br>Encoding Process                : Baseline DCT, Huffman coding<br>Bits Per Sample                 : 8<br>Color Components                : 3<br>Y Cb Cr Sub Sampling            : YCbCr4:2:0 (2 2)<br>Image Size                      : 3088x2316<br>Megapixels                      : 7.2<br><br></code></pre></td></tr></table></figure><h2 id="orientation-rotate-90-cw1">Orientation : Rotate 90CW<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://exiftool.org/forum/index.php?topic=7909.0">[1]</span></a></sup></h2><pre><code class="hljs">1 = Horizontal (normal)2 = Mirror horizontal3 = Rotate 1804 = Mirror vertical5 = Mirror horizontal and rotate 270 CW6 = Rotate 90 CW7 = Mirror horizontal and rotate 90 CW8 = Rotate 270 CW</code></pre><p>CW: clock wise 顺时针旋转</p><h2 id="resource">Resource</h2><p><sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://zh.wikipedia.org/wiki/Exif">[6]</span></a></sup><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://www.impulseadventure.com/photo/exif-orientation.html">[2]</span></a></sup><sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://blog.csdn.net/jfsdggsd/article/details/40050959">[4]</span></a></sup><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://blog.csdn.net/wanshaobo888/article/details/94552288">[3]</span></a></sup><sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://blog.csdn.net/netdxy/article/details/49108489">[5]</span></a></sup></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1"class="footnote-text"><span>https://exiftool.org/forum/index.php?topic=7909.0<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2"class="footnote-text"><span>https://www.impulseadventure.com/photo/exif-orientation.html<a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:3"class="footnote-text"><span>https://blog.csdn.net/wanshaobo888/article/details/94552288<a href="#fnref:3" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:4"class="footnote-text"><span>https://blog.csdn.net/jfsdggsd/article/details/40050959<a href="#fnref:4" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:5"class="footnote-text"><span>https://blog.csdn.net/netdxy/article/details/49108489<a href="#fnref:5" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:6"class="footnote-text"><span>https://zh.wikipedia.org/wiki/Exif<a href="#fnref:6" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:7"class="footnote-text"><span>https://exiftool.org/#supported<a href="#fnref:7" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:8"class="footnote-text"><span>https://imagine.readthedocs.io/en/stable/usage/metadata.html#exif-metadata-reader<a href="#fnref:8" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>软件工具</tag>
      
      <tag>Exif</tag>
      
      <tag>照片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云打印原型调研</title>
    <link href="/2020/10/16/arch-rpi-salt-cups.html"/>
    <url>/2020/10/16/arch-rpi-salt-cups.html</url>
    
    <content type="html"><![CDATA[<h2 id="技术栈">技术栈</h2><p><img src="/assets/imgs/2020-10-16-cloud.print.drawio.png" /></p><h2 id="树莓派安装-archlinux">树莓派安装 ArchLinux</h2><p>https://qsctech-sange.github.io/arch-on-Raspberrypi.html</p><p>https://mirrors.tuna.tsinghua.edu.cn/archlinuxarm/os/</p><h3 id="pacman-guide">pacman guide</h3><p>https://kaosx.us/docs/pacman/</p><h2 id="archlinux-配置网络">ArchLinux 配置网络</h2><p>网线与 wifi 同时启用，网线优先级更高。</p><h3 id="iproute">iproute</h3><p>https://blog.csdn.net/leshami/article/details/78021859</p><h3 id="dhcpd">dhcpd</h3><p>https://wiki.archlinux.org/index.php/Dhcpcd</p><h3 id="wpa_supplicant">wpa_supplicant</h3><p>https://w1.fi/cgit/hostap/plain/wpa_supplicant/READMEhttps://wiki.archlinux.org/index.php/Wpa_supplicant</p><p>https://www.zcfy.cc/article/how-to-update-wifi-network-password-from-terminal-in-arch-linux</p><p>https://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-4</p><h2 id="archlinux-安装-cups">ArchLinux 安装 Cups</h2><pre><code class="hljs">pacman -Syy cups cups-pdf colord ipp-usb logrotate docx2txt  antiword foomatic-db-nonfree foomatic-db-engine foomatic-db  foomatic-db-gutenprint-ppds  gutenprint foomatic-db-nonfree-ppds  gsfonts ghostscript hplip</code></pre><p>https://wiki.archlinux.org/index.php/CUPS</p><p>https://developers.hp.com/hp-linux-imaging-and-printing/about</p><p>https://docs.oracle.com/cd/E26926_01/html/E25812/gllhj.html#gjokv</p><h3 id="cups-作为-systemd-服务">cups 作为 systemd 服务</h3><p>https://superuser.com/questions/490713/arch-linux-cannot-start-cups-service-with-systemdhttp://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html</p><h3 id="打印管理----基于-cups">打印管理 -- 基于 Cups</h3><p>https://blog.csdn.net/lhf_tiger/article/details/8055380</p><h3 id="cups-pdf">Cups Pdf</h3><p>Ubuntu18.04 配置Cups PDF虚拟打印机服务https://my.oschina.net/u/4400737/blog/3244045</p><p>https://www.archlinux.org/packages/extra/x86_64/cups-pdf/</p><h2 id="saltstacks-管理树莓派">Saltstacks 管理树莓派</h2><p><ahref="https://www.packtpub.com/product/learning-saltstack-second-edition/9781785881909">LearningSaltStack - Second Edition</a></p><h3 id="安装-saltstacks">安装 Saltstacks</h3><p>https://docs.saltstack.com/en/latest/topics/installation/index.html#quick-install</p><p>https://github.com/saltstack/salt-bootstrap ### salt minion id如何生成？ ###</p><pre><code class="hljs">cat /etc/machine-id| xargs -n 1 hostnamectl set-hostname | hostnamectl &amp;&amp; cat /etc/hostname</code></pre><h4 id="machine-id-调研">machine id 调研</h4><p>http://manpages.ubuntu.com/manpages/bionic/man5/machine-id.5.htmlhttps://jlk.fjfi.cvut.cz/arch/manpages/man/machine-id.5.zh_CNhttps://unix.stackexchange.com/questions/402999/is-it-ok-to-change-etc-machine-id</p><h3 id="管理命令">管理命令</h3><p>https://blog.51cto.com/6226001001/1909013</p><h3 id="s3-文件下载">s3 文件下载</h3><p>https://salt-zh.readthedocs.io/en/latest/ref/modules/all/salt.modules.s3.html</p><h3 id="salt-api">salt-api</h3><p>https://jaminzhang.github.io/saltstack/SaltStack-API-Config-and-Usage/</p><p>https://blog.51cto.com/6226001001/1909013</p><h3 id="todo-----saltstack-多-master-架构">[TODO] --- SaltStack 多Master 架构</h3><p>https://jaminzhang.github.io/saltstack/SaltStack-MultiMaster-Architecture/</p><h3 id="salt-事件转发到-普罗米修斯-监控">salt 事件转发到 普罗米修斯监控</h3>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>解决方案</tag>
      
      <tag>Saltstack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rust Rocket -- Hello World</title>
    <link href="/2020/09/30/rocket-hello-world.html"/>
    <url>/2020/09/30/rocket-hello-world.html</url>
    
    <content type="html"><![CDATA[<h2 id="使用-clion-新建项目">使用 CLion 新建项目</h2><p>目录路径 <code>~/rocket_hello_world</code></p><h2id="构建1">构建<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://rocket.rs/v0.4/guide/getting-started/">[1]</span></a></sup></h2><p>Rocket 只能使用 nightly 版本 进行编译。</p><blockquote><p>Rocket makes abundant use of Rust's syntax extensions and otheradvanced, unstable features. Because of this, we'll need to use anightly version of Rust</p></blockquote><h3 id="设置-rust-编译器版本">设置 Rust 编译器版本</h3><p>全局设置</p><p><code>rustup default nightly</code></p><p>单个项目设置</p><p><code>rustup override set nightly</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cat</span> ~/.rustup/settings.toml</span><br>default_host_triple = &quot;x86_64-apple-darwin&quot;<br>default_toolchain = &quot;stable-x86_64-apple-darwin&quot;<br>profile = &quot;default&quot;<br>version = &quot;12&quot;<br><br>[overrides]<br>&quot;~/rocket_hello_world&quot; = &quot;nightly-x86_64-apple-darwin&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">rustc -V</span><br>rustc 1.48.0-nightly (73dc675b9 2020-09-06)<br></code></pre></td></tr></table></figure><h3 id="添加依赖到-cargo.toml">添加依赖到 Cargo.toml</h3><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[dependencies]</span><br><span class="hljs-attr">rocket</span> = <span class="hljs-string">&quot;0.4.5&quot;</span><br></code></pre></td></tr></table></figure><h3 id="源码">源码</h3><p><code>main.rs</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#![feature(proc_macro_hygiene, decl_macro)]</span><br><br><span class="hljs-meta">#[macro_use]</span> <span class="hljs-keyword">extern</span> <span class="hljs-keyword">crate</span> rocket;<br><br><span class="hljs-meta">#[get(<span class="hljs-string">&quot;/&quot;</span>)]</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">index</span>() <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span> &#123;<br>    <span class="hljs-string">&quot;Hello, world!&quot;</span><br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    rocket::<span class="hljs-title function_ invoke__">ignite</span>().<span class="hljs-title function_ invoke__">mount</span>(<span class="hljs-string">&quot;/&quot;</span>, routes![index]).<span class="hljs-title function_ invoke__">launch</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="运行">运行</h3><p><code>cargo run</code></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1"class="footnote-text"><span>https://rocket.rs/v0.4/guide/getting-started/<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Rust</tag>
      
      <tag>Rocket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C 语言很难吗？</title>
    <link href="/2020/09/15/c-is-difficult-or-sth.html"/>
    <url>/2020/09/15/c-is-difficult-or-sth.html</url>
    
    <content type="html"><![CDATA[<p>昨晚边吃饭边扯淡， 不知怎么的就说起了 C 语言，说的难不可攀。</p><p>"C 语言有那么难吗？我怎么感觉没那么难？"</p><p>"写过线上项目吗？"</p><p>"没"</p><p>"你没写过那就别说了"</p><p>很小的事情，也没什么值得说道的。但是里面确隐藏了一些可以聊聊的常见问题。</p><h1 id="隐藏的问题">隐藏的问题</h1><ul><li><p>真正的问题没有得到解决。</p><p>C语言到底哪里难了？问题没有得到进一步的推进，反而又一次加深了个人主观的感受确实难，助长了不良的讨论风气，膜拜的人继续膜拜，吹嘘的继续吹嘘，有实际意义可探讨的技术问题仅仅沦为了谈资。</p></li><li><p>反驳逻辑不对</p><p>最后变成了，没写过线上项目就没有发言的权利。这是一个典型的逻辑谬误，将没有任何因果关系的事情强加上了因果关系。</p><p>通常来说我们有下面这个推断经验方法，即通过过往的经验来判断能否担当起将要做的事情，人员招聘与组织内部人员擢升贬降之时尤为明显。但注意其不是因果关系：</p><p><code>A 做过某些事 --&gt;  认为 A 有某些经验 ---&gt;   认为 A 在某些领域，能有的明辨是非的头脑 ---&gt;  能给出恰到好处的正确评论、做好相关的事情</code></p><p>此处的逻辑谬误是用了这么个经验规则推断命题的逆命题来进行论证：</p><p><code>你想评论  --&gt;  首先你的有线上项目的经验</code></p><p>搞出来正确的结论，靠明辨的头脑尚且无法做到完全无误，其荒谬之处昭然若揭。</p></li><li><p>经验</p><p>对经验拔的过高其实也是一个很严重的问题。关于经验我也有些个人的浅陋的看法。</p><p>经验也有其局限性所在，发挥的作用只在于<code>有助于塑造</code>，不同的人有相同的经历，最终却又有不同的思维逻辑。龙生九子，九子各不同谓之是也。</p><p>所以经验的缺失只可能会导致一些 case没有被想到，不一定会影响到对事情评论的对错。</p><p>且经验本身无法用于 思维逻辑的辩驳，真正能用来辩驳的还是其塑造的思维逻辑。</p></li><li><p>逻辑</p><p>所以到这里问题也很明确了：没写过线上项目，不代表没有经验，也不能代表评论的对错，更加不能表示没有任何发言的权利。</p><p>故又衍生出了一个新问题</p></li><li><p>什么样的人有发表评论的权利？让我感觉胡说八道的人如何拒绝。</p><p>发言是个政治权利，不能阻挡的，只能选择说我不想听然后不听，而不是你不能说。一般来说也会奏效，结束交流这个话题。</p></li></ul><h1 id="防微杜渐">防微杜渐</h1><p>智勇多困于所溺，祸患常积于忽微。如果没有对这个错误的事情之下所隐藏的逻辑做任何反驳，反而会鼓舞这种错误逻辑横行。日常生活、娱乐到工作早已屡见不鲜。最终实际应讨论的具体问题：<code>C 语言难在那里了？</code>最终会因为一些错误的逻辑占据头脑而被放置，无法前进。</p>]]></content>
    
    
    <categories>
      
      <category>职场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一条命令部署项目到开发机</title>
    <link href="/2020/07/08/deploy-php-git-project-in-one-shell-cmd.html"/>
    <url>/2020/07/08/deploy-php-git-project-in-one-shell-cmd.html</url>
    
    <content type="html"><![CDATA[<h2 id="流程">流程</h2><p><img src="/assets/git-deploy.workflow.png" /></p><ul><li>push 代码到 git 仓库</li><li>登陆远程机 (开发机、测试机)</li><li>进入项目目录，拉取最新代码 <code>git pull</code></li></ul><h2 id="公钥免密码登陆">公钥免密码登陆</h2><h3 id="服务器开启免密码登陆配置">服务器开启免密码登陆配置</h3><p><ahref="./2016-08-08-ssh.md">配置ssh使用密钥登录，禁止口令登录</a></p><h3 id="添加公钥到开发机">添加公钥到开发机</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-copy-id -i root@dev-host-ip<br></code></pre></td></tr></table></figure><h2 id="一句话-shell-更新项目">一句话 shell 更新项目</h2><p><code>ssh root@10.26.15.134 "shell command"</code></p><h4 id="例-更新一个-php-composer-管理的项目">例： 更新一个 php composer管理的项目</h4><p>假设项目在远程机的位置 /opt/src/project</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh root@10.26.15.134 &quot;cd /opt/src/project ;git reset --hard; git pull; /usr/local/php/bin/php  /usr/local/bin/composer install&quot;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Common Lisp - macro</title>
    <link href="/2020/07/05/common-lisp-macro.html"/>
    <url>/2020/07/05/common-lisp-macro.html</url>
    
    <content type="html"><![CDATA[<h2 id="数据类型">数据类型</h2><h3 id="列表">列表</h3><h3 id="原子">原子</h3><h2 id="引用反引用">引用、反引用</h2><h2 id="读取器求值器s-表达式">读取器、求值器、S-表达式</h2><h2 id="宏泄露">宏泄露</h2><h3 id="符号化-括号化-卫生化">符号化 括号化 卫生化</h3><h3 id="多重求值">多重求值</h3><h3 id="求值顺序">求值顺序</h3><h3 id="变量捕获">变量捕获</h3>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CommonLisp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Common Lisp - 函数</title>
    <link href="/2020/06/28/commonlisp-function.html"/>
    <url>/2020/06/28/commonlisp-function.html</url>
    
    <content type="html"><![CDATA[<ul><li>目录 {:toc}</li></ul><h1 id="无参数">无参数</h1><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lisp">(<span class="hljs-name">defun</span> hello ()<br><span class="hljs-string">&quot;print hello world&quot;</span><br>(<span class="hljs-name">format</span> <span class="hljs-literal">t</span> <span class="hljs-string">&quot;hello world~%&quot;</span>))<br>(<span class="hljs-name">hello</span>)<br></code></pre></td></tr></table></figure><h1 id="必要参数">必要参数</h1><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lisp">(<span class="hljs-name">defun</span> fun-params-must (<span class="hljs-name">x</span> y)<br><span class="hljs-string">&quot;x + y&quot;</span><br>(<span class="hljs-name">format</span> <span class="hljs-literal">t</span> <span class="hljs-string">&quot;~a~%&quot;</span> (<span class="hljs-name">+</span> x y)))<br><br>(<span class="hljs-name">fun-params-must</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h1 id="可选参数-默认值参数">可选参数 ( 默认值参数 )</h1><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lisp">(<span class="hljs-name">defun</span> fun-params-opt-default (<span class="hljs-name">x</span> y <span class="hljs-symbol">&amp;optional</span> w (<span class="hljs-name">z</span> (<span class="hljs-name">progn</span> (<span class="hljs-name">format</span> <span class="hljs-literal">t</span> <span class="hljs-string">&quot;opt z~%&quot;</span>) x) z-su ))<br><span class="hljs-string">&quot;function with opt   z-su ---&gt; z-supplied-p&quot;</span><br>(<span class="hljs-name">list</span> x y w z z-su))<br><br>(<span class="hljs-name">format</span> <span class="hljs-literal">t</span> <span class="hljs-string">&quot;~a ~%&quot;</span> (<span class="hljs-name">fun-params-opt-default</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>))<br>(<span class="hljs-name">format</span> <span class="hljs-literal">t</span> <span class="hljs-string">&quot;~a ~%&quot;</span> (<span class="hljs-name">fun-params-opt-default</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>))<br></code></pre></td></tr></table></figure><h1 id="剩余参数-可变参数">剩余参数 ( 可变参数 )</h1><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lisp">(<span class="hljs-name">defun</span> fun-params-rest (<span class="hljs-name">x</span><br><span class="hljs-symbol">&amp;optional</span> y<br>(<span class="hljs-name">z</span> (<span class="hljs-name">progn</span> (<span class="hljs-name">format</span> <span class="hljs-literal">t</span> <span class="hljs-string">&quot;z use default value ~%&quot;</span>) (<span class="hljs-name">+</span> x y)) z-supplied-p)<br><span class="hljs-symbol">&amp;rest</span> values)<br>(<span class="hljs-name">format</span> <span class="hljs-literal">t</span> <span class="hljs-string">&quot;~a ~%&quot;</span> (<span class="hljs-name">list</span> x y z z-supplied-p values)))<br>(<span class="hljs-name">fun-params-rest</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>) <span class="hljs-comment">;;; (1 2 3 NIL NIL)</span><br>(<span class="hljs-name">fun-params-rest</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span>) <span class="hljs-comment">;;;; result: (1 2 3 T (A 4 B 5 C 6) 4 5 6)</span><br></code></pre></td></tr></table></figure><h1 id="关键字参数">关键字参数</h1><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lisp">(<span class="hljs-name">defun</span> fun-params-key (<span class="hljs-name">x</span><br> <span class="hljs-symbol">&amp;key</span>  a (<span class="hljs-name">b</span> (<span class="hljs-name">*</span> <span class="hljs-number">10</span> x) b-supplied-p)  ((<span class="hljs-symbol">:callers-name</span> c) (<span class="hljs-name">*</span> <span class="hljs-number">20</span>  x) c-supplied-p))<br>(<span class="hljs-name">format</span> <span class="hljs-literal">t</span> <span class="hljs-string">&quot;~a ~%&quot;</span> (<span class="hljs-name">list</span> x a b b-supplied-p c c-supplied-p)))<br><br>(<span class="hljs-name">fun-params-key</span> <span class="hljs-number">1</span>) <span class="hljs-comment">;;; (1 NIL 10 NIL 20 NIL)</span><br>(<span class="hljs-name">fun-params-key</span> <span class="hljs-number">1</span> <span class="hljs-number">12</span> <span class="hljs-number">22</span> <span class="hljs-symbol">:b</span> <span class="hljs-number">5</span> <span class="hljs-symbol">:c</span> <span class="hljs-number">6</span>  <span class="hljs-symbol">:a</span> <span class="hljs-number">4</span>)  <span class="hljs-comment">;;; (1 4 5 T 20 NIL)  need restart-condition select</span><br>(<span class="hljs-name">fun-params-key</span> <span class="hljs-number">1</span> <span class="hljs-symbol">:b</span> <span class="hljs-number">5</span> <span class="hljs-symbol">:c</span> <span class="hljs-number">6</span>  <span class="hljs-symbol">:a</span> <span class="hljs-number">4</span>)  <span class="hljs-comment">;;; (1 4 5 T 20 NIL)</span><br>(<span class="hljs-name">fun-params-key</span> <span class="hljs-number">1</span> <span class="hljs-symbol">:b</span> <span class="hljs-number">5</span> <span class="hljs-symbol">:callers-name</span> <span class="hljs-number">6</span>  <span class="hljs-symbol">:a</span> <span class="hljs-number">4</span>)  <span class="hljs-comment">;;; (1 4 5 T 6 T)</span><br><br></code></pre></td></tr></table></figure><ul><li>关键字参数不要和可选参数、剩余参数混合使用，会出现一些奇怪的行为</li><li>关键字参数和可选参数同时存在时，用关键字参数替代</li></ul><h1 id="返回-return-from">返回 return-from</h1><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lisp">(<span class="hljs-name">defun</span> fun-retun-from (<span class="hljs-name">n</span>)<br>   (<span class="hljs-name">dotimes</span> (<span class="hljs-name">i</span> <span class="hljs-number">10</span>)<br>     (<span class="hljs-name">dotimes</span> (<span class="hljs-name">j</span> <span class="hljs-number">10</span>)<br>       (<span class="hljs-name">when</span> (<span class="hljs-name">&gt;</span> (<span class="hljs-name">*</span> i j) n)<br>         (<span class="hljs-name">return-from</span> fun-retun-from (<span class="hljs-name">list</span> i j))))))<br><br>(<span class="hljs-name">fun-retun-from</span> <span class="hljs-number">20</span>)<br></code></pre></td></tr></table></figure><h1 id="函数作为数据">函数作为数据</h1><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs lisp"> (<span class="hljs-name">defun</span> fun-call-apply (<span class="hljs-name">a</span>  b)<br>   (<span class="hljs-name">format</span> <span class="hljs-literal">t</span> <span class="hljs-string">&quot;~a~%&quot;</span> (<span class="hljs-name">list</span> a b)))<br>(<span class="hljs-name">funcall</span> #&#x27;fun-call-apply <span class="hljs-number">20</span> <span class="hljs-number">1</span>)<br>(<span class="hljs-name">apply</span> #&#x27;fun-call-apply &#x27;(<span class="hljs-number">1</span> (<span class="hljs-number">2</span> <span class="hljs-number">3</span>)))<br><br><br><br>(<span class="hljs-name">defun</span> fun-call-apply (<span class="hljs-name">a</span>  b <span class="hljs-symbol">&amp;key</span> k)<br>(<span class="hljs-name">format</span> <span class="hljs-literal">t</span> <span class="hljs-string">&quot;~a~%&quot;</span> (<span class="hljs-name">list</span> a b k)))<br><br>(<span class="hljs-name">funcall</span> #&#x27;fun-call-apply <span class="hljs-number">20</span> <span class="hljs-number">1</span>)<br>(<span class="hljs-name">apply</span> #&#x27;fun-call-apply &#x27;(<span class="hljs-number">1</span> (<span class="hljs-number">2</span> <span class="hljs-number">3</span>) <span class="hljs-symbol">:k</span> <span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CommonLisp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>定制 Yii2 框架</title>
    <link href="/2020/05/04/build-own-framework.html"/>
    <url>/2020/05/04/build-own-framework.html</url>
    
    <content type="html"><![CDATA[<p>今天写了<ahref="https://github.com/noname007/framework-over-yii2/commit/35a589fa6f6bc2b352ca3ce3b25b2ac2634f7a68">几行代码</a>，基于对框架模板的管用习惯封装了一个更贴合自己习惯、用法的框架。</p><p>每次创建新项目后总是有一些配置相关的<code>琐事</code>需要走一遍，徒增心智负担。</p><p>对于比较固化的<code>标准操作流程 (sop)</code>，特别适合提炼一个流程，然后用<code>工具</code>来实现这个<code>自动化</code>。</p><p>对于 <code>php</code> <code>composer</code>管理的项目，也可以直接封装到一个 <code>project</code>类型的包中。因为每次自动化流程脚本都跑出来的结果一致和这个包一致。</p><p>打完收工，念一去年学到的口号：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs">复杂问题简单化<br>简单问题标准化<br>标准问题流程化<br>流程问题配置化<br>配置问题模板化<br>模板问题工具化<br>所有问题自动化<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Yii2</tag>
      
      <tag>工作流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译、链接、装载</title>
    <link href="/2020/01/22/compile-link-load.html"/>
    <url>/2020/01/22/compile-link-load.html</url>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">gcc  -g  -v -Wall -c  -fPIC minus.c add.c</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">gcc  -g  -v -Wall -shared  -o libmycal.so add.o minus.o</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">ar rcs libmycal.a add.o minus.o</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">gcc  -g  -v -Wall main.c libmycal.so</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>C</tag>
      
      <tag>构建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Erlang 学习笔记</title>
    <link href="/2019/09/12/erlang-learning-note.html"/>
    <url>/2019/09/12/erlang-learning-note.html</url>
    
    <content type="html"><![CDATA[<h4 id="作者-joe-armstrong27-december-1950-20-april-2019s-blog">作者 JoeArmstrong(27 December 1950 – 20 April 2019)'s blog</h4><ul><li>https://joearms.github.io</li><li>http://armstrongonsoftware.blogspot.com</li></ul><h4 id="资料">资料</h4><ul><li><ahref="https://erldoc.com/doc/pdf/Erlang%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1(%E7%AC%AC2%E7%89%88).pdf">Erlang编程语言 第二版</a></li><li><a href="https://github.com/noname007/erlang-programming-e2">Erlang编程语言 第二版 书籍源码</a></li><li><a href="https://erldoc.com/">Erlang/OTP 中文手册</a></li></ul><h4 id="basic">Basic</h4><blockquote><p>hello.erl</p></blockquote><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-keyword">-module</span><span class="hljs-params">(hello)</span>.<br><span class="hljs-keyword">-export</span><span class="hljs-params">([start/<span class="hljs-number">0</span>])</span>.<br><br><span class="hljs-function"><span class="hljs-title">start</span><span class="hljs-params">()</span> -&gt;</span><br>    io:format(<span class="hljs-string">&quot;Hello world~n&quot;</span>).<br><br></code></pre></td></tr></table></figure><ul><li>erl shell</li></ul><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs inform7">$ erl<br>Erlang/OTP 22 <span class="hljs-comment">[erts-10.4.4]</span> <span class="hljs-comment">[source]</span> <span class="hljs-comment">[64-bit]</span> <span class="hljs-comment">[smp:4:4]</span> <span class="hljs-comment">[ds:4:4:10]</span> <span class="hljs-comment">[async-threads:1]</span> <span class="hljs-comment">[hipe]</span> <span class="hljs-comment">[dtrace]</span><br><br>Eshell V10.4.4  (abort with ^G)<br>1&gt;<br><br></code></pre></td></tr></table></figure><ul><li><p><code>=</code> 模式匹配</p><p>test &amp; bind</p><p><code>f()</code>释放所有绑定</p></li><li><p>模块</p><p>扩展名为 .erl 的文件</p></li><li><p>编译</p><p>erlang shell &gt; 1&gt; c(module_name)</p><p>shell &gt;$ erlc hello.erl</p></li><li><p>运行</p><p>erlang shell &gt; 2&gt; hello:start()</p><p>shell &gt;$ erl -noshell -s hello start -s init stop</p></li><li><p>进程</p><blockquote><p>3&gt; Pid = spawn(hello,start,[]).</p></blockquote></li><li><p>self()</p><p>获取当前进程的 Pid</p></li><li><p>!</p><p>往进程信箱投递消息 &gt; 5&gt; Pid ! "hello".</p></li><li><p>receive</p><p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">loop</span><span class="hljs-params">(Dir)</span> -&gt;</span><br><span class="hljs-keyword">receive</span><br>&#123;Client, list_dir&#125; -&gt;<br>Client ! &#123;self(), file:list_dir(Dir)&#125;;<br>&#123;Client, &#123;get_file, File&#125;&#125; -&gt;<br>Full = filename:join(Dir, File),<br>Client ! &#123;self(), file:read_file(Full)&#125;<br><span class="hljs-keyword">end</span>,<br>loop(Dir).<br></code></pre></td></tr></table></figure></p><p>作者利用分布式的 Erlang 节点 实现一个文件传输服务器: <ahref="http://armstrongonsoftware.blogspot.com/2006/09/why-i-often-implement-things-from.html">为什么我经常从零开始实现一个东西</a></p></li><li><p>erl shell 中的快捷键</p><p>C-c C-g</p></li><li><p>变量</p><p>大写字母开头</p><p>一次性赋值 --&gt; 无可变状态 --&gt; 无共享内存 --&gt; 无锁</p><p>模式匹配、变量绑定</p></li><li><p>/ div rem</p><p>5/2 --&gt; 2.5 浮点数</p><p>5 div 2 --&gt; 2</p><p>5 rem 2 --&gt; 1</p></li><li><p>浮点数</p><p>Erlang在内部使用64位的IEEE 754-1985浮点数</p></li><li><p>原子</p><p>全局</p><p>小写字母开头</p><p>单引号内大写字母开头或非字母数字外的字符</p><p>Erlang不会垃圾回收（garbage collect）原子</p></li><li><p>元组</p><p>把一些数量固定的项目归组成单一的实体</p><p>声明它们时自动创建</p><p>创建 、 析取</p><p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-number">15</span>&gt; X = &#123;joe, &#123;name, <span class="hljs-string">&quot;joe&quot;</span>&#125;, &#123;age, <span class="hljs-number">69</span>&#125;&#125;.<br>X = &#123;joe, &#123;name, <span class="hljs-string">&quot;joe&quot;</span>&#125;, &#123;age, <span class="hljs-number">69</span>&#125;&#125;.<br><br><span class="hljs-number">17</span>&gt; &#123;_,&#123;_, Name&#125;,&#123;_,Age&#125;&#125; = X.<br>&#123;_,&#123;_, Name&#125;,&#123;_,Age&#125;&#125; = X.<br>&#123;joe,&#123;name,<span class="hljs-string">&quot;joe&quot;</span>&#125;,&#123;age,<span class="hljs-number">69</span>&#125;&#125;<br><br><span class="hljs-number">18</span>&gt; Name.<br>Name.<br><span class="hljs-string">&quot;joe&quot;</span><br><br><span class="hljs-number">19</span>&gt; Age.<br>Age.<br><span class="hljs-number">69</span><br><br></code></pre></td></tr></table></figure></p></li><li><p>列表 [head | tail]</p><p>用来存放任意数量的事物</p><p>表头 head 一个项目</p><p>表尾 tail 也是一个列表</p><p>空列表 []</p><p>给tail 列表的开头添加不止一个元素 [E1,E2,..,En | tail]</p><p>创建、析取</p><p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-number">21</span>&gt; T = [X,X,X, <span class="hljs-number">1</span> + <span class="hljs-number">2</span>, <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-number">2.5</span>, joe, &#123;p,<span class="hljs-string">&quot;test&quot;</span>&#125;].<br>T = [X,X,X, <span class="hljs-number">1</span> + <span class="hljs-number">2</span>, <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-number">2.5</span>, joe, &#123;p,<span class="hljs-string">&quot;test&quot;</span>&#125;].<br>[&#123;joe,&#123;name,<span class="hljs-string">&quot;joe&quot;</span>&#125;,&#123;age,<span class="hljs-number">69</span>&#125;&#125;,<br> &#123;joe,&#123;name,<span class="hljs-string">&quot;joe&quot;</span>&#125;,&#123;age,<span class="hljs-number">69</span>&#125;&#125;,<br> &#123;joe,&#123;name,<span class="hljs-string">&quot;joe&quot;</span>&#125;,&#123;age,<span class="hljs-number">69</span>&#125;&#125;,<br> <span class="hljs-number">3</span>,<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-number">2.5</span>,joe,<br> &#123;p,<span class="hljs-string">&quot;test&quot;</span>&#125;]<br><span class="hljs-number">22</span>&gt; T2 = [<span class="hljs-string">&quot;H1&quot;</span>,<span class="hljs-string">&quot;h2&quot;</span>, <span class="hljs-number">3</span> | T].<br>T2 = [<span class="hljs-string">&quot;H1&quot;</span>,<span class="hljs-string">&quot;h2&quot;</span>, <span class="hljs-number">3</span> | T].<br>[<span class="hljs-string">&quot;H1&quot;</span>,<span class="hljs-string">&quot;h2&quot;</span>,<span class="hljs-number">3</span>,<br> &#123;joe,&#123;name,<span class="hljs-string">&quot;joe&quot;</span>&#125;,&#123;age,<span class="hljs-number">69</span>&#125;&#125;,<br> &#123;joe,&#123;name,<span class="hljs-string">&quot;joe&quot;</span>&#125;,&#123;age,<span class="hljs-number">69</span>&#125;&#125;,<br> &#123;joe,&#123;name,<span class="hljs-string">&quot;joe&quot;</span>&#125;,&#123;age,<span class="hljs-number">69</span>&#125;&#125;,<br> <span class="hljs-number">3</span>,<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-number">2.5</span>,joe,<br> &#123;p,<span class="hljs-string">&quot;test&quot;</span>&#125;]<br><br><span class="hljs-number">23</span>&gt; [H1,H2,H3,  &#123;_,&#123;_, Name1&#125;,&#123;_,Age1&#125;&#125;,  &#123;_,&#123;_, Name2&#125;,&#123;_,Age2&#125;&#125; | T3] = T2.<br>[H1,H2,H3,  &#123;_,&#123;_, Name1&#125;,&#123;_,Age1&#125;&#125;,  &#123;_,&#123;_, Name2&#125;,&#123;_,Age2&#125;&#125; | T3] = T2.<br>[<span class="hljs-string">&quot;H1&quot;</span>,<span class="hljs-string">&quot;h2&quot;</span>,<span class="hljs-number">3</span>,<br> &#123;joe,&#123;name,<span class="hljs-string">&quot;joe&quot;</span>&#125;,&#123;age,<span class="hljs-number">69</span>&#125;&#125;,<br> &#123;joe,&#123;name,<span class="hljs-string">&quot;joe&quot;</span>&#125;,&#123;age,<span class="hljs-number">69</span>&#125;&#125;,<br> &#123;joe,&#123;name,<span class="hljs-string">&quot;joe&quot;</span>&#125;,&#123;age,<span class="hljs-number">69</span>&#125;&#125;,<br> <span class="hljs-number">3</span>,<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-number">2.5</span>,joe,<br> &#123;p,<span class="hljs-string">&quot;test&quot;</span>&#125;]<br><span class="hljs-number">24</span>&gt; H1.<br>H1.<br><span class="hljs-string">&quot;H1&quot;</span><br><span class="hljs-number">25</span>&gt; H2.<br>H2.<br><span class="hljs-string">&quot;h2&quot;</span><br><span class="hljs-number">26</span>&gt; Name1.<br>Name1.<br><span class="hljs-string">&quot;joe&quot;</span><br><span class="hljs-number">27</span>&gt; Name2.<br>Name2.<br><span class="hljs-string">&quot;joe&quot;</span><br><br></code></pre></td></tr></table></figure></p></li><li><p>字符串</p><p>Erlang里没有字符串</p><p>表示方法：</p><pre><code class="hljs"> 整数组成的列表( 每个元素为 unicode codepoint 代码点) 二进制类型 字符串字面量 -- 双引号 围起来的一串字符 &quot;hello&quot; --  列表简写模式</code></pre><p>列表内的 所有 整数都为可打印字符时，打印出来的是字符串字面量，反之为列表</p><p>列表表示字符串时，每个整数代表对应的 Unicode 字符, 无穷大字符 --<code>"a\x&#123;221e&#125;b"</code></p><p>格式化输出</p><pre><code class="hljs"> - 输出 unicode 字符 erl shell 为 Latin 字符集，回显显示的是整数列表形式 - 字符串按照列表形式输出</code></pre><p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs erlang">Erlang/OTP <span class="hljs-number">22</span> [erts-<span class="hljs-number">10.4</span>.<span class="hljs-number">4</span>] [source] [<span class="hljs-number">64</span>-bit] [smp:<span class="hljs-number">4</span>:<span class="hljs-number">4</span>] [ds:<span class="hljs-number">4</span>:<span class="hljs-number">4</span>:<span class="hljs-number">10</span>] [async-threads:<span class="hljs-number">1</span>] [hipe] [dtrace]<br><br>Eshell V10.<span class="hljs-number">4.4</span>  (abort with ^G)<br><span class="hljs-number">1</span>&gt;  X2 =<span class="hljs-string">&quot;a\x&#123;221e&#125;b&quot;</span>.<br>[<span class="hljs-number">97</span>,<span class="hljs-number">8734</span>,<span class="hljs-number">98</span>]<br><span class="hljs-number">2</span>&gt; io:format(<span class="hljs-string">&quot;~ts~n&quot;</span>,[X2]).<br>a∞b<br>ok<br>  <br><span class="hljs-number">4</span>&gt; X1 = [<span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span>].<br><span class="hljs-string">&quot;abc&quot;</span><br><span class="hljs-number">5</span>&gt; X = <span class="hljs-string">&quot;abc&quot;</span>.<br><span class="hljs-string">&quot;abc&quot;</span><br><br><span class="hljs-number">9</span>&gt; io:format(<span class="hljs-string">&quot;~p~p~n&quot;</span>, [X,X1]).<br><span class="hljs-string">&quot;abc&quot;</span><span class="hljs-string">&quot;abc&quot;</span><br>ok<br><span class="hljs-number">10</span>&gt; io:format(<span class="hljs-string">&quot;~p~w~n&quot;</span>, [X,X1]).<br><span class="hljs-string">&quot;abc&quot;</span>[<span class="hljs-number">97</span>,<span class="hljs-number">98</span>,<span class="hljs-number">99</span>]<br>ok<br></code></pre></td></tr></table></figure></p><p>字符---&gt;整数 <code>$A %% 96</code></p></li><li><p>case</p></li><li><p>标点符号 <code>, ; .</code></p></li><li><p>try</p></li><li><p>fun</p></li><li><p>列表推导</p></li><li><p>BIF 内置函数 属于 模块 erlanghttp://erlang.org/doc/man/erlang.html</p></li><li><p><code>guard</code> : <code>when</code> : <code>, ;</code> --erlang 表达式子集</p></li><li><p>记录</p><p>记录其实就是元组的另一种形式，因此它们的存储与性能特性和元组一样</p><p><code>-record(todo , &#123;status = reminder, who=joe, text&#125;)</code></p><p><code>rr("record.hrl")</code> 读取记录定义</p><p>构建 直接创建 基于旧的创建 析取 模式匹配</p></li><li><p>映射</p><p><code>#&#123;a =&gt; 1, b:2&#125;</code></p><p>maps模块 操作映射组的内置模块</p><p>构建 直接创建 基于旧的创建 析取 模式匹配</p><p>比较</p><pre><code class="hljs">  大小  按照建的排序，比较键值的大小</code></pre><p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><br><span class="hljs-number">2</span>&gt; #&#123;age=&gt;<span class="hljs-number">20</span>, name:=<span class="hljs-string">&quot;yang&quot;</span>, friends:=[#&#123;name:=<span class="hljs-string">&quot;A&quot;</span>,age:=<span class="hljs-number">21</span>&#125;,#&#123;age:=<span class="hljs-number">19</span>,name:=<span class="hljs-string">&quot;B&quot;</span>&#125;]&#125;.<br>* <span class="hljs-number">1</span>: only association operators &#x27;=&gt;&#x27; are allowed in map construction<br><span class="hljs-number">3</span>&gt; #&#123;age=&gt;<span class="hljs-number">20</span>, name=&gt;<span class="hljs-string">&quot;yang&quot;</span>, friends=&gt;[#&#123;name=&gt;<span class="hljs-string">&quot;A&quot;</span>,age=&gt;<span class="hljs-number">21</span>&#125;,#&#123;age=&gt;<span class="hljs-number">19</span>,name =&gt; <span class="hljs-string">&quot;B&quot;</span>&#125;]&#125;.<br>#&#123;age =&gt; <span class="hljs-number">20</span>,<br>  friends =&gt;<br>  [#&#123;age =&gt; <span class="hljs-number">21</span>,name =&gt; <span class="hljs-string">&quot;A&quot;</span>&#125;,#&#123;age =&gt; <span class="hljs-number">19</span>,name =&gt; <span class="hljs-string">&quot;B&quot;</span>&#125;],<br>  name =&gt; <span class="hljs-string">&quot;yang&quot;</span>&#125;<br><span class="hljs-number">4</span>&gt; X1 = #&#123;age=&gt;<span class="hljs-number">20</span>, name=&gt;<span class="hljs-string">&quot;yang&quot;</span>, friends=&gt;[#&#123;name=&gt;<span class="hljs-string">&quot;A&quot;</span>,age=&gt;<span class="hljs-number">21</span>&#125;,#&#123;age=&gt;<span class="hljs-number">19</span>,name =&gt; <span class="hljs-string">&quot;B&quot;</span>&#125;]&#125;.<br>#&#123;age =&gt; <span class="hljs-number">20</span>,<br>  friends =&gt;<br>  [#&#123;age =&gt; <span class="hljs-number">21</span>,name =&gt; <span class="hljs-string">&quot;A&quot;</span>&#125;,#&#123;age =&gt; <span class="hljs-number">19</span>,name =&gt; <span class="hljs-string">&quot;B&quot;</span>&#125;],<br>  name =&gt; <span class="hljs-string">&quot;yang&quot;</span>&#125;<br><span class="hljs-number">5</span>&gt; X2 = X1#&#123;name:=<span class="hljs-string">&quot;test&quot;</span>&#125;.<br>#&#123;age =&gt; <span class="hljs-number">20</span>,<br>  friends =&gt;<br>  [#&#123;age =&gt; <span class="hljs-number">21</span>,name =&gt; <span class="hljs-string">&quot;A&quot;</span>&#125;,#&#123;age =&gt; <span class="hljs-number">19</span>,name =&gt; <span class="hljs-string">&quot;B&quot;</span>&#125;],<br>  name =&gt; <span class="hljs-string">&quot;test&quot;</span>&#125;<br><br><span class="hljs-number">6</span>&gt; X1 &gt;X2 .<br><span class="hljs-literal">true</span><br><span class="hljs-number">7</span>&gt; X1 &lt; X2.<br><span class="hljs-literal">false</span><br><span class="hljs-number">8</span>&gt; maps:to_list(X1).<br>[&#123;age,<span class="hljs-number">20</span>&#125;,<br> &#123;friends,[#&#123;age =&gt; <span class="hljs-number">21</span>,name =&gt; <span class="hljs-string">&quot;A&quot;</span>&#125;,<br>   #&#123;age =&gt; <span class="hljs-number">19</span>,name =&gt; <span class="hljs-string">&quot;B&quot;</span>&#125;]&#125;,<br> &#123;name,<span class="hljs-string">&quot;yang&quot;</span>&#125;]<br><span class="hljs-number">9</span>&gt; maps:to_list(X1) &gt; maps:to_list(X2).<br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></p><p>黑历史：https://stackoverflow.com/questions/27803001/undefined-function-mapsto-json-1</p></li><li><p>异常 错误</p><ul><li><p>典型系统内部产生错误： 模式匹配失败</p></li><li><p>使用函数主动产生错误</p><p>throw(Exception)</p><p>exit(Exception)</p><pre><code class="hljs">  终止当前进程。 异常未捕获 信号 &#123;&#39;EXIT&#39;, Pid, Why&#125;  发送给</code></pre><p>error(Exception)</p></li><li><p>let it crash</p><p>在Erlang里，防御式编程是内建的</p><p>永远不要在函数被错误参数调用时返回一个值，而是要抛出一个异常错误。要假定调用者会修复这个错误。</p><p>抛错要快而明显，也要文明。</p><p>立即崩溃是为了不让事情变得更糟。错误消息应当被写入永久性的错误日志，而且要包含足够多的细节，以便过后查明是哪里出了错。错误消息对程序员来说就像是来之不易的砂金，绝不能任由它们随着屏幕滚动而永远消失。</p><p>程序员才应该能看到程序崩溃时产生的详细错误消息。程序的用户绝对不能看到这些消息。用户应当得到警告，让他们知道有错误发生这一情况，以及可以采取什么措施来弥补错误。</p></li></ul></li><li><p>二进制 binary</p><p>位数都会是8的整数倍</p><p>构造</p><p>析构</p><p>类型转换函数</p><p>io 列表</p><p>type: iolist -&gt; [ iolist | I:int when 0&lt;= I &lt;= 255 | binary]</p><p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-number">2</span>&gt; &lt;&lt;<span class="hljs-number">255</span>&gt;&gt;.<br>&lt;&lt;<span class="hljs-string">&quot;ÿ&quot;</span>&gt;&gt;<br><span class="hljs-number">3</span>&gt; &lt;&lt;<span class="hljs-number">256</span>&gt;&gt;.<br>&lt;&lt;<span class="hljs-number">0</span>&gt;&gt;<br><span class="hljs-number">4</span>&gt; list_to_binary([<span class="hljs-number">256</span>]).<br>** exception error: bad argument<br>in function  list_to_binary/<span class="hljs-number">1</span><br>called as list_to_binary([<span class="hljs-number">256</span>])<br>   <span class="hljs-number">5</span>&gt; &lt;&lt;<span class="hljs-number">256</span>,<span class="hljs-number">257</span>,<span class="hljs-number">258</span>&gt;&gt;.<br>&lt;&lt;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&gt;&gt;<br><span class="hljs-number">6</span>&gt; &lt;&lt;<span class="hljs-string">&quot;abc&quot;</span>&gt;&gt;.<br>&lt;&lt;<span class="hljs-string">&quot;abc&quot;</span>&gt;&gt;<br><span class="hljs-number">7</span>&gt; list_to_binary([<span class="hljs-number">255</span>]).<br>&lt;&lt;<span class="hljs-string">&quot;ÿ&quot;</span>&gt;&gt;<br><span class="hljs-number">22</span>&gt; X = <span class="hljs-string">&quot;\777&quot;</span>.<br>X = <span class="hljs-string">&quot;\777&quot;</span>.<br>[<span class="hljs-number">511</span>]<br><br><span class="hljs-number">32</span>&gt; X = <span class="hljs-number">0.58</span>.<br><span class="hljs-number">35</span>&gt; &lt;&lt;X/float&gt;&gt;.<br>&lt;&lt;X/float&gt;&gt;.<br>&lt;&lt;<span class="hljs-number">63</span>,<span class="hljs-number">226</span>,<span class="hljs-number">143</span>,<span class="hljs-number">92</span>,<span class="hljs-number">40</span>,<span class="hljs-number">245</span>,<span class="hljs-number">194</span>,<span class="hljs-number">143</span>&gt;&gt;<br><br></code></pre></td></tr></table></figure></p><p><ahref="https://gist.github.com/noname007/bf25c7f053d164a833ddfd881741d4e0">0.58在内存中的实际数据</a></p><ul><li><p>整数截断</p></li><li><p>list_to_binary 只接受 io 列表</p></li><li><p>实际应用 解析 IP 协议 寻找 MPEG 数据里的同步帧</p></li></ul></li><li><p>位串</p><p>强调数据里的位数不是8的整数倍</p></li><li><p>杂项 programming erlang 2e chapter 8</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件工具</tag>
      
      <tag>Erlang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 erlang 构建一个 http 服务</title>
    <link href="/2019/09/11/erlang-build-first-http-service.html"/>
    <url>/2019/09/11/erlang-build-first-http-service.html</url>
    
    <content type="html"><![CDATA[<h2 id="输出-hello-world">输出 hello world</h2><ul><li>$(RELX_REL_NAME) 计算一直错误问题</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs makefile">...<br>...<br><br><span class="hljs-keyword">define</span> get_relx_release.erl<br>&#123;ok, Config&#125; = file:consult(<span class="hljs-string">&quot;$(call core_native_path,<span class="hljs-variable">$(RELX_CONFIG)</span>)&quot;</span>),<br>&#123;release, &#123;Name, Vsn0&#125;, _&#125; = lists:keyfind(release, 1, Config),<br>Vsn = case Vsn0 of<br>&#123;cmd, Cmd&#125; -&gt; os:cmd(Cmd);<br>semver -&gt; <span class="hljs-string">&quot;&quot;</span>;<br>&#123;semver, _&#125; -&gt; <span class="hljs-string">&quot;&quot;</span>;<br>VsnStr -&gt; Vsn0<br>end,<br>Extended = case lists:keyfind(extended_start_script, 1, Config) of<br>&#123;_, true&#125; -&gt; <span class="hljs-string">&quot;1&quot;</span>;<br>_ -&gt; <span class="hljs-string">&quot;&quot;</span><br>end,<br>io:format(<span class="hljs-string">&quot;~s ~s ~s&quot;</span>, [Name, Vsn, Extended]),<br>halt(0).<br><span class="hljs-keyword">endef</span><br><br>RELX_REL := <span class="hljs-variable">$(<span class="hljs-built_in">shell</span> $(<span class="hljs-built_in">call</span> erlang,$(get_relx_release.erl)</span>))<br>RELX_REL_NAME := <span class="hljs-variable">$(<span class="hljs-built_in">word</span> 1,<span class="hljs-variable">$(RELX_REL)</span>)</span><br>RELX_REL_VSN := <span class="hljs-variable">$(<span class="hljs-built_in">word</span> 2,<span class="hljs-variable">$(RELX_REL)</span>)</span><br>RELX_REL_CMD := <span class="hljs-variable">$(<span class="hljs-built_in">if</span> $(<span class="hljs-built_in">word</span> 3,<span class="hljs-variable">$(RELX_REL)</span>)</span>,console)<br><br><span class="hljs-keyword">ifeq</span> (<span class="hljs-variable">$(PLATFORM)</span>,msys2)<br>RELX_REL_EXT := .cmd<br><span class="hljs-keyword">endif</span><br><br><span class="hljs-section">run:: all</span><br><span class="hljs-variable">$(verbose)</span> <span class="hljs-variable">$(RELX_OUTPUT_DIR)</span>/<span class="hljs-variable">$(RELX_REL_NAME)</span>/bin/<span class="hljs-variable">$(RELX_REL_NAME)</span><span class="hljs-variable">$(RELX_REL_EXT)</span> <span class="hljs-variable">$(RELX_REL_CMD)</span><br>....<br>...<br><br><br></code></pre></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-comment">%% ~/.erlang</span><br>Home = os:getenv(<span class="hljs-string">&quot;HOME&quot;</span>),<br><br><br>io:format(<span class="hljs-string">&quot;~p~n&quot;</span>, [Home]),<br><br>Dir = Home ++ <span class="hljs-string">&quot;/nobackups/erlang_imports/_build/default/lib/&quot;</span>.<br><br>io:format(<span class="hljs-string">&quot;~p~n&quot;</span>, [Dir]).<br><br><span class="hljs-keyword">case</span> file:list_dir(Dir) <span class="hljs-keyword">of</span><br>    &#123;ok, L&#125; -&gt;<br>io:format(<span class="hljs-string">&quot;~p~n&quot;</span>, [L]),<br>lists:foreach(<span class="hljs-keyword">fun</span>(I) -&gt; <br>     Path = Dir ++ <span class="hljs-string">&quot;/&quot;</span> ++ I ++ <span class="hljs-string">&quot;/ebin&quot;</span>,<br>     io:format(<span class="hljs-string">&quot;add path: ~p~n&quot;</span>, [Path]),<br>     code:add_path(Path)<br>     <span class="hljs-keyword">end</span>, L);<br>    &#123;error, X&#125; -&gt;<br>      io:format(<span class="hljs-string">&quot;~p~n&quot;</span>, [X])<br><span class="hljs-keyword">end</span>.<br><br><br></code></pre></td></tr></table></figure><ul><li>https://ninenines.eu/docs/en/cowboy/2.6/guide/getting_started/</li><li>https://erlang.mk/guide/getting_started.html</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP</tag>
      
      <tag>Erlang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx 做 websocket 代理</title>
    <link href="/2019/09/02/Hoy-by-Hop.html"/>
    <url>/2019/09/02/Hoy-by-Hop.html</url>
    
    <content type="html"><![CDATA[<h2 id="个客户端连接">65535 个客户端连接</h2><p>前两天 FE 朋友转我一个问题。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss">关于pipeline回显这块，我还是建议做轮询，如果用websocket的话，假设单击(机)<br><br>我开<span class="hljs-number">30</span>个进程，<span class="hljs-number">3</span>台机器也就能同时处理<span class="hljs-number">90</span>个。而轮询的话是轮询一次后台就释<br><br>放。另外就是由于公司nginx的限制，websocket也只支持<span class="hljs-number">30s</span>内，超过<span class="hljs-number">30s</span>就强制<br><br>断开了。<br></code></pre></td></tr></table></figure><p>让我想起来了很久前的另一个事情：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">A:</span> 服务端最多支持 <span class="hljs-number">65535</span> 个客户端连接<br><span class="hljs-symbol">me:</span> 为什么呀？<br><span class="hljs-symbol">A:</span> 只有 <span class="hljs-number">65535</span> 个端口可用呀...<br></code></pre></td></tr></table></figure><p>世间怎还会有如此愚不可及、蠢不可耐的人。</p><p>至于 nginx 对 websocket 支持只有 30秒的事情，想了一会，愣是没有一点印象对。</p><p>先前还做过类似的工作: <ahref="https://github.com/orlabs/orange/pull/106/files，">feat: addwebsocket support to the proxy server</a>,</p><p>感觉有点奇怪，赶紧搜索资料简单验证了一下，发现真有超时的的问题。由仔细读一遍</p><p>文档，在尾部发现:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">By</span> <span class="hljs-keyword">default</span>, the <span class="hljs-keyword">connection</span> will be closed <span class="hljs-keyword">if</span> the proxied <span class="hljs-keyword">server</span> does <span class="hljs-keyword">not</span><br><br>transmit <span class="hljs-keyword">any</span> data <span class="hljs-keyword">within</span> <span class="hljs-number">60</span> seconds. This timeout can be increased <span class="hljs-keyword">with</span> <br><br>the proxy_read_timeout directive. Alternatively, the proxied <span class="hljs-keyword">server</span> can be<br><br>configured <span class="hljs-keyword">to</span> periodically send WebSocket ping frames <span class="hljs-keyword">to</span> <span class="hljs-keyword">reset</span> the timeout <br><br><span class="hljs-keyword">and</span> <span class="hljs-keyword">check</span> <span class="hljs-keyword">if</span> the <span class="hljs-keyword">connection</span> <span class="hljs-keyword">is</span> still alive. <br></code></pre></td></tr></table></figure><p>原文大意：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-number">60</span>s 没有数据传输，连接就会关闭，可以通过proxy_read_timeout 配置项增加时间。<br><br>或者，上游服务端定期发送 <span class="hljs-built_in">ping</span> 帧给 nginx  用于重置超时时间、检测连接是否<br><br>仍旧保持活着。<br></code></pre></td></tr></table></figure><p>一点印象没有，看来当时没有完全理解这段话的含义, 五十步笑百步而。</p><h2 id="再遇-hop-by-hop">再遇 Hop-by-Hop</h2><p>前两年写 orange 的插件的时候就发现 <ahref="https://github.com/thisverygoodhhhh/orange/wiki/%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%BF%AE%E6%94%B9#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E6%80%BB%E7%BB%93">HOP-by-Hop头无法用 ngx.req.set_header操作</a>，说来惭愧，当时虽然感觉概念很奇怪，但也一直没去调查具体的含义。凑着这次机会，往前走了一小步。发现了很有意思的另外一个概念End-to-End。</p><p>设想这么一个简单的场景，比如一个数据包的路径是 <code>C-P-K-S</code>若干节点，如果 C 发出的数据包中的字段，在 P 节点被丢弃，那么这个字段就是Hop-by-Hop ( 逐跳, 比如Http 1.1中的Upgrade)字段，如果这个字段需要原封不动的传递到 S，那么这个字段就是End-to-End(端到端)字段。</p><ul><li><p><a href="https://nginx.org/en/docs/http/websocket.html">WebSocketproxying</a></p></li><li><p><ahref="https://blog.csdn.net/u010369338/article/details/69397307">第6章HTTP头部(2) End-to-end、Hop-by-hop</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工作中的死锁</title>
    <link href="/2019/08/29/deadlock.html"/>
    <url>/2019/08/29/deadlock.html</url>
    
    <content type="html"><![CDATA[<p>前段时间发生了一件有意思的事情：</p><p>我们这边向供应商采购了一件设备及一套对应的业务定制软件，合同也已签署完。</p><p>等到我们这边对接的时候，发现对方居然没还有做开发，详细了解后发现原来他们</p><p>需要拿到首付款后才能给我们开始开发。采购也挺有意思，大意是说合同我们都签</p><p>了，钱也不会差你们的，你们先弄出来，回头一起给你们。两方角力扯皮了几天，</p><p>最后供应商同意后退了一步，先给开发。为什么出现这个问题、以及谁对谁错，涉及</p><p>太多流程、规范，我也无法简单的评判到底谁对谁错，但是这个事情很有意思，</p><p>从形式上可以用 <code>死锁</code> 这个概念套一套。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">产生死锁的四个必要条件：<br>（1） 互斥条件：一个资源每次只能被一个进程使用。<br>（2） 请求与保持条件：一个进程因请求其他资源时，对已获得的资源保持不放。<br>（3） 不剥夺条件:进程已获得的资源，在末使用完之前，不能强行剥夺。<br>（4） 循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。<br></code></pre></td></tr></table></figure><p>进程的概念这里稍微变下名字，叫执行者。比如供应商、采购都是实际的执行者。</p><p>需要的资源也很明确：首付款、交付(或者说开发)软件。</p><p>破除死锁的方式，供应商先开发，一开始个人感觉这是破坏的<code>必要条件2</code>，看上去让对方</p><p>没有对预付款的诉求了。实际最终是解除了对首付款这个资源的依赖，破坏的是<code>必要条件4</code>。</p><p>并没有让对方取消对预付款的要求，只是不会依赖什么时候能得到预付款这个资源了。</p><ul><li><ahref="https://zh.wikipedia.org/wiki/%E6%AD%BB%E9%94%81">https://zh.wikipedia.org/wiki/%E6%AD%BB%E9%94%81</a></li><li><ahref="https://zhuanlan.zhihu.com/p/25677118">https://zhuanlan.zhihu.com/p/25677118</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>职场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>锁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>沟通清楚</title>
    <link href="/2019/07/26/shuoqingchu.html"/>
    <url>/2019/07/26/shuoqingchu.html</url>
    
    <content type="html"><![CDATA[<p>最近一年的工作我最近大概想明白了，可以说就在做一件事情，就是能把事情说的清楚，让分析的逻辑更可靠。不只做到一板一眼的记录一些数据，有内在流程的约束，有真实可信数据对分析的逻辑做支撑。但这些都在围绕一个事情在做，说清楚。</p><p>说清楚这事多简单，还需要花这么多时间精力做？</p><p>咋一听这事很简单，不就是动动嘴皮子说清楚吗，细一想远不是嘴上沟通的事。于大节处都没什么问题，问题多出在细节这块上。绝大对数人都有着被人问着问着就回答不上来的，开始靠感觉说话，都是我觉的怎么怎么着。</p><p>细节是魔鬼啊，我们面临的问题总是会超越现有知识、记忆等能力边界的，总会有一块细节会让你栽进去，好的能知道怎么圈定边界总是能客观的去解释，坏的就开始个人主观感觉怎么怎么地，说差点就是张口就来、言之凿凿。那怎么办呢？</p><p>使用工具处理细节，人做更擅长的全局控制。</p><p>至于怎么界定是不是细节呢，很简单，问的答不上来的都值得考虑一下。</p>]]></content>
    
    
    <categories>
      
      <category>职场</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>谈&quot;怂&quot;</title>
    <link href="/2019/07/20/tan-song.html"/>
    <url>/2019/07/20/tan-song.html</url>
    
    <content type="html"><![CDATA[<p>最近思绪烦乱，胡乱地记下心中冒上来的一事</p><p>在我们的主流价值观里，我们一般都瞧不上怂货。</p><p>单说怂这个字让人感觉很有意思，上面两个人下面是个心。似是心有余而力不足，亦似跟随众人无主见，似有三人成虎的意味。</p><p>一般就是，困难大，心里面先怯懦了，然后认了~</p><p>工作中放眼望去也总能看到一些类似的影子。</p><!-- 当需要他人配合协作解决一个问题，推而不动之时，"你让我推，我推不动他啊，你还是让老大推动吧！"。 --><p>比如每当说起自运维之时不黏锅的领导总是会先提一些无聊的质疑"你选自运维，你能保证稳定性吗？保证SLA吗？"，而无法提出一些具有建设性的问题</p><p>总是在困难面前过快的认了，渲染恐惧氛围？本来啊，单纯只考虑一个一类指标意义不大，哪有顺风顺水的事放在面前去做？还不如谈一下选自运维有什么不可承受的风险更重要，分析下午可能根本也没什么风险~</p><p>现实总是面临各种挑战，从挑问题的角度总能找出来问题，要做好取舍不要杞人忧天。质疑是好事，但滑坡谬误就是个问题。</p><p>最后，还是要有勇气面对困难~</p>]]></content>
    
    
    <categories>
      
      <category>职场</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>选择的背后</title>
    <link href="/2019/07/15/choose-backend.html"/>
    <url>/2019/07/15/choose-backend.html</url>
    
    <content type="html"><![CDATA[<p>前段时间，在构建一个基于开源项目的大文件分发解决方案，跟同事的交流过程中，几次听到这么一个观点。</p><p>这个软件已经好久不更新了，会不会存在我们解决不了的问题，我们还是别用这个了，选一个开发维护更活跃的替代品吧。</p><p>当时打心底对其不屑一顾，嗤之以鼻。但是静心想想，自己也说过类似的言论。</p><p>18年1月初，当时需要汇总各个审批系统审批流程状态。其中一个系统是Kafka+ HTTP 实现 摘要 + 详情的模式来给其他开发业务方提供服务。当时对Kafka一码黑，感觉甚是棘手。</p><p>对 Kafka这个工具本身需要先有个感觉，了解其使用的心理模型自不必说。涉及到具体选用那个实现很是被同事“刁难”了一番。</p><p>当时心理已经打定主意要选用微博广告中心开源的实现客户端。当时用以回应的理由大概如下</p><p>纯PHP实现无外部扩展依赖，源码易读，维护人员开发比较活跃。了解到其他业务方使用c实现的客户端也发现了有卡死的现象，感觉稳定性也不怎么地。</p><p>先搁置主观认定、先入为主这块不提，所说理由虽然看上去还说的通，但一直对这个理由感觉很是心虚，总感觉不对这并不是一个正常的逻辑。感觉有点答非所问，论述的逻辑感觉不甚清楚。</p><p>最近在关于saltstacksocs的两次项目评审会上部门领导说的一段论述启发了我对这两个问题的一个新的看法。大意如下:</p><p>我们选定一个工具不是看其他大公司是不是用过，别人的环境、问题跟我们一模一样吗？我们面临的环境、问题是什么？工具本身的概念有哪些，这个工具是怎么对这个问题领域是怎么建模型的？然后才能对比两个工具那个好那个坏。</p><p>当时给我的启发是，首先要对要解决的问题自己要能分析出面临的问题，针对这些问题做了那些基础的定义，而后建立出来怎样的一个认知模型，其次对比两个工具不能单纯的从工具能干什么角度出发，而是应该从工具本身所代表的理念，建模思维，设计思路出发去比对两个思想的好坏。不能单纯的止于表面。</p><p>认识到这两点后我感觉上面的两个问题已是不言自明了。但我这页纸的空白处还是够用的，用此法分析上面的两个问题并简要的记录下自己看法。</p><p>首先我们对我们解决的问题都很清楚，主要问题是出在了没有对问题领域建立共同认可的模型，进而论述如何去选择一个工具。</p><p>影响一个工具选择的因素有很多，跟当时内心的诉求有很大关系，比如上面两个例子当时从稳定性，社区活跃性，工具项目本身的可参与度，面向的使用用户来分析。从逻辑上就能比较合理地解释清楚，或许也就没有那么多的不愉快沟通交流。</p><p>首先说下稳定性与社区活跃度，一个同事说过很有意思的一段话是，当天提需求，当天开发，当天上线，当天回滚，当天修bug，当然这是针对不怎么靠谱的人来说的。这里只是想说活跃跟稳定或许一点因果关系都没有。如果面向用户如果是全然不懂开发的，那么社区活跃度就会很容易成为最重要的选择项，活跃的社区更容易获取到帮助。</p><p>其次稳定性跟可参与程度，如果无法参与到项目的开发修改中，或者所需成本过高，最终可能导致需严重依赖他人，犹如被人卡住了脖子。这是很需要慎重选择的方案。</p>]]></content>
    
    
    <categories>
      
      <category>职场</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Yii2 数据模型 -- 基于场景的验证</title>
    <link href="/2018/08/07/yii2-rules.html"/>
    <url>/2018/08/07/yii2-rules.html</url>
    
    <content type="html"><![CDATA[<ul><li>目录 {:toc}</li></ul><!--破vim 回头高两件事1. 自动保存2. 自动折行换行--><!--先说一坨可能的实际遇到的情况, 爆料一下人世间的各种苦难 --><p>系统交互的过程中，对数据的接收方来说，对数据的格式、内容的校检、验证至关重要。比如后端在接受注册用户的数据时候，会对传送过来的邮箱、手机号、用户密码、填写的外链url、注册地点ip等每种格式都需要验证是否符合对应的规范，有时还需要根据数据库中的现有数据，判断新注册的登陆用户名是否重复,有时不只是单纯的验证某一项，需要依赖对其他的项的验证结果来决定是否验证,比如邮箱跟手机号两个二选一即可。有时换到另外一种场景，如在更新用户信息的时候，仔细观察后就会发现上述验证规则有很大的重复。</p><p>针对这些问题，在yii2中是使用元编程的思路，给出了一种很优雅的解决方式--- Validator。</p><p>yii2的Validator实现跟数据模型Model有很多的互相交互、依赖。下面给出以下从Model层面的使用样例。</p><!-- 救世主降生 --><!--如何使用救世主拯救 --><h2 id="样例">样例</h2><p>针对上述提到的几个问题，在yii2中的解法如下，仅仅使用了一个数组就描述清楚的每个字段在不同场景下的验证规则，关于核心验证器的用法参考yii2权威指南-核心验证器相关章节：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">yii</span>\<span class="hljs-title">base</span>\<span class="hljs-title">Model</span>  </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mobile</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$email</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$reg_ip</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$weibo_url</span>;<br><br>    <span class="hljs-keyword">const</span>  SCENARIO_REG = <span class="hljs-string">&#x27;reg&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rules</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> [<br>            <span class="hljs-comment">//邮箱、手机号必有一个不为空</span><br>            [[<span class="hljs-string">&#x27;email&#x27;</span>], <span class="hljs-string">&#x27;required&#x27;</span>, <span class="hljs-string">&#x27;when&#x27;</span> =&gt; <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">self</span> <span class="hljs-variable">$model</span></span>) </span>&#123;<br>               <span class="hljs-keyword">return</span> !(<span class="hljs-keyword">new</span> \yii\validators\<span class="hljs-title function_ invoke__">RequiredValidator</span>())<br>                            -&gt;<span class="hljs-title function_ invoke__">validate</span>(<span class="hljs-variable">$model</span>-&gt;mobile);<br>            &#125;],<br>            <span class="hljs-comment">//检查邮箱、ip的数据格式</span><br>            [<span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-string">&#x27;email&#x27;</span>],<br>            [<span class="hljs-string">&#x27;reg_ip&#x27;</span>, <span class="hljs-string">&#x27;ip&#x27;</span>],<br>            <span class="hljs-comment">//数据库中值唯一</span><br>            [<span class="hljs-string">&#x27;username&#x27;</span>,<span class="hljs-string">&#x27;unique&#x27;</span>, <span class="hljs-string">&#x27;on&#x27;</span> =&gt; [<br>                <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">SCENARIO_REG</span><br>            ], <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;你的用户名TMD热门了，已被占用，再换一个吧！！！&#x27;</span>],<br>            <span class="hljs-comment">//用户名，密码长度至少为8，最多为16</span><br>            [<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;string&#x27;</span>,<span class="hljs-string">&#x27;length&#x27;</span> =&gt; [<span class="hljs-number">8</span>,<span class="hljs-number">16</span>]],<br>            [<span class="hljs-string">&#x27;password&#x27;</span>, <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span> =&gt; <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;max&#x27;</span> =&gt; <span class="hljs-number">20</span>],<br><br>             <span class="hljs-comment">//用户名只含有52英文字母表字幕及数字，且只能以字母开始</span><br>            [<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;match&#x27;</span>, <span class="hljs-string">&#x27;pattern&#x27;</span> =&gt; <span class="hljs-string">&#x27;/[a-zA-Z]+[a-zA-Z0-9]*/&#x27;</span>],<br>        ];<br>    &#125;<br><br>&#125;<br><br><span class="hljs-variable">$model</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><span class="hljs-variable">$model</span>-&gt;<span class="hljs-title function_ invoke__">setScenario</span>(<span class="hljs-string">&#x27;default&#x27;</span>);<br><span class="hljs-variable">$model</span>-&gt;<span class="hljs-title function_ invoke__">load</span>(<span class="hljs-variable">$_POST</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$model</span>-&gt;<span class="hljs-title function_ invoke__">validate</span>()) &#123;<br>    <span class="hljs-title class_">Yii</span>::<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-variable">$model</span>-&gt;<span class="hljs-title function_ invoke__">getErrors</span>(),<span class="hljs-string">&#x27;DATA_VALIDATION&#x27;</span>);<br>    ...<br>&#125;<br><br>...<br><br></code></pre></td></tr></table></figure><h2 id="rules"><code>rules()</code></h2><p><code>rules()</code>返回结果是一个数组，其中的每一个数组元素描述了一条验证规则。每个元素的格式一般如下：</p><p><code>[attributes [] | String, Validator | Closure | String, Validator子类实例初始化列表]</code>通过下面的<code>createValidtor()</code>源码可以看出，其根据<code>rule()</code>返回的每条验证规则，构造对应的对象。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Creates validator objects based on the validation rules specified in [[rules()]].</span><br><span class="hljs-comment"> * Unlike [[getValidators()]], each time this method is called, a new list of validators will be returned.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> ArrayObject validators</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> InvalidConfigException if any validation rule configuration is invalid</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createValidators</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$validators</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayObject</span>();<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">rules</span>() <span class="hljs-keyword">as</span> <span class="hljs-variable">$rule</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$rule</span> <span class="hljs-keyword">instanceof</span> Validator) &#123;<br>            <span class="hljs-variable">$validators</span>-&gt;<span class="hljs-title function_ invoke__">append</span>(<span class="hljs-variable">$rule</span>);<br>        &#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$rule</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$rule</span>[<span class="hljs-number">0</span>], <span class="hljs-variable">$rule</span>[<span class="hljs-number">1</span>])) &#123; <span class="hljs-comment">// attributes, validator type</span><br>            <span class="hljs-variable">$validator</span> = <span class="hljs-title class_">Validator</span>::<span class="hljs-title function_ invoke__">createValidator</span>(<span class="hljs-variable">$rule</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$this</span>, (<span class="hljs-keyword">array</span>) <span class="hljs-variable">$rule</span>[<span class="hljs-number">0</span>], <span class="hljs-title function_ invoke__">array_slice</span>(<span class="hljs-variable">$rule</span>, <span class="hljs-number">2</span>));<br>            <span class="hljs-variable">$validators</span>-&gt;<span class="hljs-title function_ invoke__">append</span>(<span class="hljs-variable">$validator</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidConfigException</span>(<span class="hljs-string">&#x27;Invalid validation rule: a rule must specify both attribute names and validator type.&#x27;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$validators</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>每个元素的可以取值类型如下：</p><ul><li>attributes [] | String ,如果只有一个属性,其可以是一个字符串，否则为数组形式</li><li>Validator | Closure | String, 此处可以为yii2的子类实例, 或是是 Yii2内部实现的一组核心验证器（都是Validator的子类）的别名,如果没有这个别名的验证器,就会使用数据模型 <code>Model</code>子类实例中同名的方法，最后，其可以直接是一个闭包。后两种方式都是封装在一个InlineValidator中实现的。</li><li>再往后就是一些关联数组，每一对都是针对每个Validator属性的初始化。</li></ul><p>如此清晰易读的语法形式和初始化列表功能的存在，完全得益于yii2的基于配置这个特性。</p><h2 id="场景-scenario-属性-attribute">场景 scenario , 属性attribute</h2><p>场景本身也没什么，就是用来告诉验证器当前是在哪个场景之下,例如注册用户、更新用户信息可以设置两个场景。实际使用时，通过<code>setScenario</code> 设置完场景,在后面调用<code>validate</code>时 yii2 就可以自动选定对应场景下的规则进行验证，上列中用<code>on</code>指定规则在那些场景下启用,上例中没有使用<code>on</code>的规则,在所有场景下都会进行验证其内的属性。</p><p>rule()方法返回结果数组中每条验证规则内的活动属性(attribute)，既用来说明那些属性是安全的，可以对类中同名成员变量进行块赋值,也表示，调用<code>validate</code>时，将会使用本条规则对活动属性进行验证。</p><h2 id="load"><code>load()</code></h2><p>本例是对rule返回安全的活动属性进行块赋值到类实例的成员变量，</p><h2 id="on-except-属性"><code>on</code> <code>except</code> 属性：</h2><p><code>on</code>是用来指定当前的验证规则是在那些场景下启用。</p><ul><li>没有指定 <code>on</code> 属性的字段，规则会在所有场景中都被启用</li><li><code>on</code>的值可以为字符串,<code>'scenarino'</code>单个场景中起作用</li><li><code>on</code>的值可以为数组<code>['scenrino1',scenarino2]</code>多个场景中起作用</li></ul><p><code>except</code> 和 <code>on</code>类似，只是用来说明那些场景不启用当前规则。有个值得注意的问题就是<code>on</code>和<code>except</code>同时指定的时候只有<code>on</code>才会起效。</p><h2 id="message-属性"><code>message</code> 属性</h2><p>当针对属性的验证规则失败的时候，用于指定自定义的错误返回信息</p><h2 id="scenarios"><code>scenarios()</code></h2><p>这个数据模型 <code>Model</code>的方法返回每个场景及其对应的活动属性(active attribute)数组。</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<br>    <span class="hljs-symbol">&#x27;scenario1</span>&#x27; =&gt; [<span class="hljs-symbol">&#x27;active</span> attribute1&#x27;,<span class="hljs-symbol">&#x27;active</span> attribute2&#x27; ]<br>    <span class="hljs-symbol">&#x27;scenario2</span>&#x27; =&gt; [<span class="hljs-symbol">&#x27;active</span> attribute1&#x27;,<span class="hljs-symbol">&#x27;active</span> attribute2&#x27; ]<br>    <span class="hljs-symbol">&#x27;scenario3</span>&#x27; =&gt; [<span class="hljs-symbol">&#x27;active</span> attribute1&#x27;,<span class="hljs-symbol">&#x27;active</span> attribute2&#x27; ]<br>]<br></code></pre></td></tr></table></figure><p>在使用<code>setScenario</code>设置完当前的场景后，<code>scenarios()</code>返回的场景对应的安全的活动属性可以进行块赋值(即同时可以对多个属性进行赋值)，上例中使用<code>load()</code> 进行的块赋值。如果不想在<code>scenario1</code>中对某些活动属性使用块赋值，只需要在属性名前加<code>!</code>标记为非安全的活动属性即可。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-string">&#x27;scenario1&#x27;</span> =&gt; [<span class="hljs-string">&#x27;!active attribute1&#x27;</span>,<span class="hljs-string">&#x27;active attribute2&#x27;</span> ]<br></code></pre></td></tr></table></figure><p>如果这个方法没有被覆盖重写，默认的Model中的返回值是根据<code>rule()</code>的返回数组生成的。其中：</p><ul><li>有一个默认场景<code>default</code>,所有没有使用 <code>on</code><code>except</code>的其中的属性的都属于此场景</li><li>返回rules里面发现的所有场景和对应的属性，默认是属性是安全的可以进行块赋值</li><li>可以在每个属性前加一个<code>!</code>标记属性是非安全的，不使用块赋值。</li></ul><h2 id="总结">总结</h2><p>以上就是数据模型基于场景的验证的简单分析。<!-- 救世主的内部构造是怎么样的 --></p><!-- 救世主的内部构造是为什么是这样的 -->]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Yii2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闭包</title>
    <link href="/2018/05/08/clousure.html"/>
    <url>/2018/05/08/clousure.html</url>
    
    <content type="html"><![CDATA[<p>某年某月某日，发现什么是闭包，当时怎么也表述清楚这个概念。作为程序猿肯定不能这么没面子唉，大脑努力的憋了一刻钟一秒后，终于憋出了我的闭包定义。</p><pre><code class="hljs">闭包是匿名函数及生成其时的上下文环境</code></pre><p>下定义时的感觉估计应该是人生最快乐的事情，这一刻，思维会异常清晰，表达也会非常流畅，有种激扬文字的感觉，也是废话最多的时刻。人生的快乐与成就感估计源于倾倒废话。</p><p>纳尼，还是来看个例子吧,写一个用来返回闭包的函数:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scheme">#lang racket<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> b <span class="hljs-number">6</span>)<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">make-closure</span>)<br>  (<span class="hljs-name"><span class="hljs-built_in">let</span></span> [(<span class="hljs-name">a</span> <span class="hljs-number">1</span>)]<br>    (<span class="hljs-name"><span class="hljs-built_in">lambda</span></span> ()<br>      (<span class="hljs-name"><span class="hljs-built_in">+</span></span> a b))))<br><span class="hljs-comment">;生成闭包,其上下文环境为 [(a 1) (b 6)]</span><br>(<span class="hljs-name">make-closure</span>)<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$b</span> = <span class="hljs-number">6</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">make_closure</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)<span class="hljs-keyword">use</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$a</span> + <span class="hljs-variable">$b</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一看很容易明白，一说就说的稀里糊涂。经过深刻面壁反思，我觉得这里面还隐藏着对其他一些基础概念的说明</p><h2id="对象的作用域函数是第一类类型">对象的作用域、函数是第一类类型</h2><p>说白就是函数内的变量能否引用到函数外的变量，本例中的<code>b</code>当然h是可引用的，但变态如PHP,默认就不能，必须使用关键字use或者global。</p><p>函数是第一类类型其意即为函数可以作为函数的参数与返回值</p><h2 id="对象的生命周期">对象的生命周期</h2><p>一般来说函数 <code>make-closure</code> 内的对象（此处为a)在其调用完后会得到释放，但当闭包内对其引用时却不会立即释放。</p><!-- ## 词法作用域 --><h2 id="上下文环境信息">上下文环境信息</h2><p>创建匿名函数的时候，其所能引用到的对象集合。</p><!-- ## 动态作用域 -->]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Lisp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laravel Eloquent Builder 的使用、源码简单分析总结</title>
    <link href="/2018/04/03/laravel-eloquent-builder.html"/>
    <url>/2018/04/03/laravel-eloquent-builder.html</url>
    
    <content type="html"><![CDATA[<h2 id="为什么要使用-query-builder">为什么要使用 Query Builder</h2><p>Query builder的最大好处就是，对于SQL的 <code>select</code><code>from</code> <code>where</code> <code>join</code><code>group by</code> <code>order by</code> <code>limit</code><code>offset</code> <code>having</code><code>on</code>等关键字都转换为了类的方法，简化了SQL的使用成本，大大简化了代码量，原先一些操作数据库相关的一次性的servicelogic相关的函数，可以替换为直接Builder 操作数据库。</p><p>Laravel中关键字都实现在了下面两个类中：</p><p><code>\Illuminate\Database\Query\Builder</code></p><p><code>\Illuminate\Database\Query\JoinClause</code></p><h2 id="创建库-和-model">创建库 和 Model</h2><p>接着上篇文章<ahref="notes/2018/03/22/comment-summary.html">对评论系统设计的一点总结</a>，总结一下LaravelEloquent Builder的一些用法。</p><p>首先用下面的 MySQL语句创建存储评论的数据库表，并生成Laravel对应的Model，用于检索数据库中的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE TABLE</span> `Comment` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键,评论id&#x27;</span>,<br>  `replied_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;被评论id&#x27;</span>,<br>  `replied_root_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;直接评论id&#x27;</span>,<br>  `content` text COMMENT <span class="hljs-string">&#x27;评论内容&#x27;</span>,<br>  `status` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-string">&#x27;评论状态&#x27;</span>,<br>  `from_user_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;评论人id&#x27;</span>,<br>  `from_user_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;评论人姓名&#x27;</span>,<br>  `to_user_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;被评论人id&#x27;</span>,<br>  `to_user_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;被评论人姓名&#x27;</span>,<br>  `create_at` <span class="hljs-type">timestamp</span> <span class="hljs-keyword">NOT NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY KEY</span> (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by PhpStorm.</span><br><span class="hljs-comment"> * User: yangzhen</span><br><span class="hljs-comment"> * Date: 2018/4/3</span><br><span class="hljs-comment"> * Time: 20:26</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">App</span>\<span class="hljs-title class_">Model</span>;<br><br><br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Eloquent</span>\<span class="hljs-title">Model</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * App\Model\Comment</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@property</span> int $id 主键,评论id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@property</span> int $replied_id 被评论id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@property</span> int $replied_root_id 直接评论id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@property</span> string|null $content 评论内容</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@property</span> int|null $status</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@property</span> int $from_user_id 评论人id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@property</span> string $from_user_name 评论人姓名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@property</span> int|null $to_user_id 被评论人id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@property</span> string $to_user_name 被评论人姓名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@property</span> string $create_at</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@method</span> static \Illuminate\Database\Eloquent\Builder|\App\Model\Comment whereContent($value)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@method</span> static \Illuminate\Database\Eloquent\Builder|\App\Model\Comment whereCreateAt($value)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@method</span> static \Illuminate\Database\Eloquent\Builder|\App\Model\Comment whereFromUserId($value)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@method</span> static \Illuminate\Database\Eloquent\Builder|\App\Model\Comment whereFromUserName($value)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@method</span> static \Illuminate\Database\Eloquent\Builder|\App\Model\Comment whereId($value)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@method</span> static \Illuminate\Database\Eloquent\Builder|\App\Model\Comment whereRepliedId($value)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@method</span> static \Illuminate\Database\Eloquent\Builder|\App\Model\Comment whereRepliedRootId($value)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@method</span> static \Illuminate\Database\Eloquent\Builder|\App\Model\Comment whereStatus($value)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@method</span> static \Illuminate\Database\Eloquent\Builder|\App\Model\Comment whereToUserId($value)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@method</span> static \Illuminate\Database\Eloquent\Builder|\App\Model\Comment whereToUserName($value)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Comment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$table</span> = <span class="hljs-string">&#x27;Comment&#x27;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$primaryKey</span> = <span class="hljs-string">&#x27;id&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$timestamps</span> = <span class="hljs-literal">false</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用案例">使用案例</h2><p>好，现在假想下面一个场景：</p><p>查询直接评论id分别为<code>10,11,12</code>的最近7天、评论内容含有关键字知识、发表评论用户名为<code>soull11201</code>或被评论用户名为<code>soul11201</code>、按照创建时间倒排后的前10条数据，并分别计算每个直接评论下面一共含有多少条数据。</p><p>粗暴的构造 sql 如下：。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 10</span><br><span class="hljs-keyword">select</span>  <span class="hljs-operator">*</span>  <span class="hljs-keyword">from</span> Comment <br><span class="hljs-keyword">where</span> <br>    content  <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;知识&#x27;</span> <br>    <span class="hljs-keyword">and</span> (from_user_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;soul11201&#x27;</span> <span class="hljs-keyword">or</span> to_user_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;soul11201&#x27;</span>)<br>    <span class="hljs-keyword">and</span>  replied_root_id <span class="hljs-operator">=</span> <span class="hljs-number">10</span> <br>    <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> create_at <span class="hljs-keyword">desc</span><br>    limit <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">select</span>  <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) replied_root_id10_total_num  <span class="hljs-keyword">from</span> Comment <br><span class="hljs-keyword">where</span> <br>    content  <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;知识&#x27;</span> <br>    <span class="hljs-keyword">and</span> (from_user_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;soul11201&#x27;</span> <span class="hljs-keyword">or</span> to_user_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;soul11201&#x27;</span>)<br>    <span class="hljs-keyword">and</span>  replied_root_id <span class="hljs-operator">=</span> <span class="hljs-number">10</span> <br><br><span class="hljs-comment">-- 11</span><br><span class="hljs-keyword">select</span>  <span class="hljs-operator">*</span>  <span class="hljs-keyword">from</span> Comment <br><span class="hljs-keyword">where</span> <br>    content  <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;知识&#x27;</span> <br>    <span class="hljs-keyword">and</span> (from_user_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;soul11201&#x27;</span> <span class="hljs-keyword">or</span> to_user_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;soul11201&#x27;</span>)<br>    <span class="hljs-keyword">and</span>  replied_root_id <span class="hljs-operator">=</span> <span class="hljs-number">11</span> <br>    <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> create_at <span class="hljs-keyword">desc</span><br>    limit <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">select</span>  <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) replied_root_id10_total_num  <span class="hljs-keyword">from</span> Comment <br><span class="hljs-keyword">where</span> <br>    content  <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;知识&#x27;</span> <br>    <span class="hljs-keyword">and</span> (from_user_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;soul11201&#x27;</span> <span class="hljs-keyword">or</span> to_user_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;soul11201&#x27;</span>)<br>    <span class="hljs-keyword">and</span>  replied_root_id <span class="hljs-operator">=</span> <span class="hljs-number">11</span> <br><br><span class="hljs-comment">-- 12</span><br><span class="hljs-keyword">select</span>  <span class="hljs-operator">*</span>  <span class="hljs-keyword">from</span> Comment <br><span class="hljs-keyword">where</span> <br>    content  <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;知识&#x27;</span> <br>    <span class="hljs-keyword">and</span> (from_user_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;soul11201&#x27;</span> <span class="hljs-keyword">or</span> to_user_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;soul11201&#x27;</span>)<br>    <span class="hljs-keyword">and</span>  replied_root_id <span class="hljs-operator">=</span> <span class="hljs-number">12</span><br>    <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> create_at <span class="hljs-keyword">desc</span><br>    limit <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">select</span>  <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) replied_root_id10_total_num  <span class="hljs-keyword">from</span> Comment <br><span class="hljs-keyword">where</span> <br>    content  <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;知识&#x27;</span> <br>    <span class="hljs-keyword">and</span> (from_user_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;soul11201&#x27;</span> <span class="hljs-keyword">or</span> to_user_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;soul11201&#x27;</span>)<br>    <span class="hljs-keyword">and</span>  replied_root_id <span class="hljs-operator">=</span> <span class="hljs-number">12</span> <br></code></pre></td></tr></table></figure><p>根据上面的 sql 构造，转换成如下的Eloquent Builder使用的代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by PhpStorm.</span><br><span class="hljs-comment"> * User: yangzhen</span><br><span class="hljs-comment"> * Date: 2018/4/3</span><br><span class="hljs-comment"> * Time: 20:46</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-variable">$replied_root_ids</span> = [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>];<br><br><span class="hljs-comment">//获取一个 \Illuminate\Database\Eloquent\Builder 实例</span><br><span class="hljs-variable">$query</span> = <span class="hljs-title class_">\App\Model\Comment</span>::<span class="hljs-title function_ invoke__">query</span>();<br><br><span class="hljs-variable">$query</span>-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-string">&#x27;content&#x27;</span>,<span class="hljs-string">&#x27;知识&#x27;</span>)<br>    -&gt;<span class="hljs-title function_ invoke__">where</span>(function (\Illuminate\Database\Eloquent\Builder <span class="hljs-variable">$builder</span>)&#123;<br>        <span class="hljs-comment">//$builder 这是一个新的 builder 作为 $query  一个嵌入的查询 builder ,否则的话orWhere 根本无法实现（因为or的优先级问题），</span><br>        <span class="hljs-variable">$builder</span>-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-string">&#x27;from_user_name&#x27;</span>, <span class="hljs-string">&#x27;soul11201&#x27;</span>);<br>        <span class="hljs-variable">$builder</span>-&gt;<span class="hljs-title function_ invoke__">orWhere</span>(<span class="hljs-string">&#x27;to_user_name&#x27;</span>, <span class="hljs-string">&#x27;soul11201&#x27;</span>);<br>    &#125;);<br><br><br><span class="hljs-variable">$coments</span> = [];<br><span class="hljs-variable">$total_num</span> = [];<br><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$replied_root_ids</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$replied_root_id</span>) &#123;<br><br>    <span class="hljs-variable">$new_query</span> = <span class="hljs-title class_">\App\Model\Comment</span>::<span class="hljs-title function_ invoke__">whereRepliedRootId</span>(<span class="hljs-variable">$replied_root_id</span>)<br>        -&gt;<span class="hljs-title function_ invoke__">addNestedWhereQuery</span>(<span class="hljs-variable">$query</span>);<br>    <br>    <span class="hljs-comment">//此处先用来查询总条数</span><br>    <span class="hljs-variable">$total_num</span>[<span class="hljs-variable">$replied_root_id</span>] = <span class="hljs-variable">$new_query</span>-&gt;<span class="hljs-title function_ invoke__">count</span>();<br>    <span class="hljs-comment">//然后用来查询10条信息，顺序反之不可。</span><br>    <span class="hljs-variable">$coments</span>[<span class="hljs-variable">$replied_root_id</span>] = <span class="hljs-variable">$new_query</span>-&gt;<span class="hljs-title function_ invoke__">orderBy</span>(<span class="hljs-string">&#x27;create_at&#x27;</span>, <span class="hljs-string">&#x27;desc&#x27;</span>)<br>        -&gt;<span class="hljs-title function_ invoke__">limit</span>(<span class="hljs-number">10</span>)<br>        -&gt;<span class="hljs-title function_ invoke__">get</span>()<br>        -&gt;<span class="hljs-title function_ invoke__">all</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="执行流程分析">执行流程分析</h2><h3id="illuminatedatabaseeloquentbuilderwhere"><code>\Illuminate\Database\Eloquent\Builder::where()</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Add a basic where clause to the query.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>  string|array|\Closure  $column</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>  string  $operator</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>  mixed  $value</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>  string  $boolean</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> $this</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">where</span>(<span class="hljs-params"><span class="hljs-variable">$column</span>, <span class="hljs-variable">$operator</span> = <span class="hljs-literal">null</span>, <span class="hljs-variable">$value</span> = <span class="hljs-literal">null</span>, <span class="hljs-variable">$boolean</span> = <span class="hljs-string">&#x27;and&#x27;</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$column</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Closure</span>) &#123;<br>        <span class="hljs-comment">// 返回一个新的 Eloquent Builder</span><br>        <span class="hljs-variable">$query</span> = <span class="hljs-variable language_">$this</span>-&gt;model-&gt;<span class="hljs-title function_ invoke__">newQueryWithoutScopes</span>();<br>        <span class="hljs-comment">//匿名函数调用，</span><br>        <span class="hljs-comment">//当 where 条件有复杂的条件表达式的时候</span><br>        <span class="hljs-comment">//比如解决上面 表达式中 (from_user_name = &#x27;soul11201&#x27; or to_user_name = &#x27;soul11201&#x27;) or 优先级的问题</span><br>        <span class="hljs-comment">//直接使用 where() 无法解决，只能使用一个新的Builder来嵌入到原先的Builder中</span><br>        <span class="hljs-variable">$column</span>(<span class="hljs-variable">$query</span>);<br>        <span class="hljs-comment">//$this-&gt;query 是类 \Illuminate\Database\Query\Builder 的实例</span><br>        <span class="hljs-comment">//将新的 Eloquent builder 的 Query\Builder 最为一个整体嵌入到原先Eloquent Builder的 `Query\Builder`的where表达式中，</span><br>        <span class="hljs-comment">//就可以解决上面 or 优先级的问题</span><br>        <span class="hljs-variable language_">$this</span>-&gt;query-&gt;<span class="hljs-title function_ invoke__">addNestedWhereQuery</span>(<span class="hljs-variable">$query</span>-&gt;<span class="hljs-title function_ invoke__">getQuery</span>(), <span class="hljs-variable">$boolean</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;query-&gt;<span class="hljs-title function_ invoke__">where</span>(...<span class="hljs-title function_ invoke__">func_get_args</span>());<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="mixin">mixin</h3><p>因为 <code>\Illuminate\Database\Eloquent\Builder</code> mixin类<code>\Illuminate\Database\Query</code></p><p><code>\Illuminate\Database\Eloquent\Builder::count()</code><code>\Illuminate\Database\Eloquent\Builder::orderby()</code><code>\Illuminate\Database\Eloquent\Builder::limit()</code></p><p>都是利用魔术方法<code>__call</code>间接使用的<code>\Illuminate\Database\Query</code>的方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The base query builder instance.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@var</span> \Illuminate\Database\Query\Builder</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$query</span>;<br><br>...<br> 此处省略<br>...<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>, <span class="hljs-variable">$parameters</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    ...<br>    此处省略<br>    ...<br>    <span class="hljs-variable language_">$this</span>-&gt;query-&gt;&#123;<span class="hljs-variable">$method</span>&#125;(...<span class="hljs-variable">$parameters</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3id="illuminatedatabaseeloquentbuilderget"><code>\Illuminate\Database\Eloquent\Builder::get()</code></h3><p><code>\Illuminate\Database\Eloquent\Builder</code> 是<code>\Illuminate\Database\Eloquent\Model</code>子类与<code>\Illuminate\Database\Query\Builder</code>沟通的桥梁。其中一个作用就是对<code>\Illuminate\Database\Query\Builder</code>查询的数组结果(由<code>\Illuminate\Support\Collection</code>进行包裹)渲染成<code>\Illuminate\Database\Eloquent\Model</code>子类的对象数组结果(由<code>\Illuminate\Database\Eloquent\Collection</code>进行包裹)。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Execute the query as a &quot;select&quot; statement.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>  array  $columns</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> \Illuminate\Database\Eloquent\Collection|static[]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$columns</span> = [<span class="hljs-string">&#x27;*&#x27;</span>]</span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//应用其他注入构造条件</span><br>    <span class="hljs-variable">$builder</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">applyScopes</span>();<br><br>    <span class="hljs-comment">// If we actually found models we will also eager load any relationships that</span><br>    <span class="hljs-comment">// have been specified as needing to be eager loaded, which will solve the</span><br>    <span class="hljs-comment">// n+1 query issue for the developers to avoid running a lot of queries.</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$models</span> = <span class="hljs-variable">$builder</span>-&gt;<span class="hljs-title function_ invoke__">getModels</span>(<span class="hljs-variable">$columns</span>)) &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-variable">$models</span> = <span class="hljs-variable">$builder</span>-&gt;<span class="hljs-title function_ invoke__">eagerLoadRelations</span>(<span class="hljs-variable">$models</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$builder</span>-&gt;<span class="hljs-title function_ invoke__">getModel</span>()-&gt;<span class="hljs-title function_ invoke__">newCollection</span>(<span class="hljs-variable">$models</span>);<br>&#125;<br><br> <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Get the hydrated models without eager loading.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>  array  $columns</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> \Illuminate\Database\Eloquent\Model[]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getModels</span>(<span class="hljs-params"><span class="hljs-variable">$columns</span> = [<span class="hljs-string">&#x27;*&#x27;</span>]</span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;model-&gt;<span class="hljs-title function_ invoke__">hydrate</span>(<br>        <span class="hljs-variable">$this</span>-&gt;query-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$columns</span>)-&gt;<span class="hljs-title function_ invoke__">all</span>()<br>    )-&gt;<span class="hljs-title function_ invoke__">all</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3id="illuminatesupportcollectionall"><code>Illuminate\Support\Collection::all()</code></h3><p><code>\Illuminate\Database\Eloquent\Collection</code>是<code>Illuminate\Support\Collection</code>的子类，<code>all()</code>方法指向的是同一个方法，直接返回其所包裹的数组。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对评论系统设计的一点总结</title>
    <link href="/2018/03/22/comment-summary.html"/>
    <url>/2018/03/22/comment-summary.html</url>
    
    <content type="html"><![CDATA[<ul><li>目录 {:toc}</li></ul><p>从我个人的理解，评论顾名思义，一般是由一个主题引发出来的一系列的讨论。</p><p>从现在的微博、百度贴吧、知乎等来看，评论系统一般来说可由多个小的部分组成，不同产品一般分别含有以下若干种小的功能，如评论主题、对评论进行回复、互评、点赞、举报、删除评论、查看两个人的会话列表。</p><p>本质上来看，如果把主题和每一条评论都抽象成一个节点，整个系统构成了一棵树，下面以微博为例做一次简单的模仿设计。</p><p><img src="/assets/2018-03-22-comment-sumary-1.png"alt="1" />{:width="450px"}</p><p>针对上图中的微博系统做一些形式化抽象与定义：</p><ul><li>主题是一个节点</li><li>每一条评论是一个节点</li><li>评论、主题的发布人信息、点赞信息等都认为是节点的属性</li><li>直接对主题进行的评论叫直接评论</li><li>在直接评论下面的评论叫子评论</li></ul><p>显然会得到如下结论： 1. 以主题节点为根可以构造一颗树 2.以直接评论为根节点可以构造一个子树， 3.所有子树和主题节点构成以主题节点为根的树。</p><p>抛开主题节点，对每个评论节点抽象，设计出如下的数据结构（c代码表示节点中的属性）:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>  <span class="hljs-type">int</span> id;<br>  <span class="hljs-type">int</span> replied_id; <span class="hljs-comment">//被评论的id</span><br>  <span class="hljs-type">int</span> replied_root_id;<span class="hljs-comment">//直接评论的ID,不是主题的id</span><br>  <span class="hljs-type">char</span> * content; <span class="hljs-comment">//评论的内容</span><br>  <br>&#125; CommentNode;<br><br></code></pre></td></tr></table></figure><p>现在根据这个简单的数据结构怎么实现互评、评论功能？仔细观察不难发现，构造规则其实很简单，如下：</p><ol type="1"><li>如果节点为直接评论节点，replied_id，replied_root_id 直接置为0</li><li>如果为子评论，则 replied_id 为被回复的评论id, replied_root_id为所在的直接评论id</li></ol><p>现实中经常有一条信息可能会由于种种原因会被删除。那我们是否是就真的要删除这个节点呢？</p><p>直接删除节点会引出其他一些问题。</p><p>首先，整个树形结构将被破坏，结构出现不完整。其次，本节点为根节点的子树中其他节点将丢失父节点信息。</p><p>删评论的本质并不是删的这个节点，而是要清空这个节点的内容。直接的方式就是清空content字段的内容，并增加一个字段表示节点的状态。</p><p>如下所示设置一个color枚举字段，用于对节点着色，用以表示不同的节点的状态。达到了删评论的目的，同时保留了结构的完整性。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span>&#123;</span><br>  GREEN, <span class="hljs-comment">//表示节点正常</span><br>  RED,<span class="hljs-comment">//表示节点被删除</span><br>&#125;NodeColor;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>  <span class="hljs-type">int</span> id;<span class="hljs-comment">//所有的值 &gt; 0</span><br>  <span class="hljs-type">int</span> replied_id; <span class="hljs-comment">//被评论的id</span><br>  <span class="hljs-type">int</span> replied_root_id;<span class="hljs-comment">//直接评论的ID,不是主题的id</span><br>  <span class="hljs-type">char</span> * content; <span class="hljs-comment">//评论的内容</span><br>  NodeColor color;<br>&#125; CommentNode;<br></code></pre></td></tr></table></figure><p>类似赞成数、反对数的等功能，在这个基础上额外的增加两个字段就简单的实现这个功能，但也会有一致性的问题存在其中，此处不再赘述。</p><p>对于会话列表这个功能应该怎么实现呢？会话列表从形态来看就是两个人直接互相回复的评论构成的对话流。在节点中增加发评论用户和被评论用户两个基础的用户信息比如user_id即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span>&#123;</span><br>  GREEN, <span class="hljs-comment">//表示节点正常</span><br>  RED,<span class="hljs-comment">//表示节点被删除</span><br>&#125;NodeColor;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>  <span class="hljs-type">int</span> id;<span class="hljs-comment">//所有的值 &gt; 0</span><br>  <span class="hljs-type">int</span> replied_id; <span class="hljs-comment">//被评论的id</span><br>  <span class="hljs-type">int</span> replied_root_id;<span class="hljs-comment">//直接评论的ID,不是主题的id</span><br>  <span class="hljs-type">char</span> * content; <span class="hljs-comment">//评论的内容</span><br>  NodeColor color;<span class="hljs-comment">//节点状态</span><br>  <span class="hljs-type">int</span> from_user_id; <span class="hljs-comment">//回复人id</span><br>  <span class="hljs-type">int</span> to_user_id; <span class="hljs-comment">//被回复的用户id</span><br>&#125; CommentNode;<br></code></pre></td></tr></table></figure><p>程序设计的关键在数据结构的设计，良好的数据结构设计往往能起到事半功倍的效果。在评论系统设计的过程中，每当需要增加一个新功能的时候，就去扩充一下数据结构，对应的功能就能得到扩充，修改成本不大，也保证了前向兼容。</p><p>以上就是在设计评论系统实现中的一点简单的个人总结。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>系统设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(= (PHP require) 引起的 SIGBUS)</title>
    <link href="/2017/06/28/php-require-sigbus.html"/>
    <url>/2017/06/28/php-require-sigbus.html</url>
    
    <content type="html"><![CDATA[<h2 id="sigbus-coredump">sigbus coredump</h2><p>php中有这么一个<ahref="https://bugs.php.net/bug.php?id=52752">问题</a>,到2017年仍然没有解决。大概是这么一个问题运行下面这句 shell就可能出现下面的coredump。</p><p><code>for ((n=0;n&lt;100;n++)); do sapi/cli/php test.php &amp; done</code></p><p>test.php <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$c</span> = <span class="hljs-string">&#x27;&lt;?php $string = &quot;&#x27;</span>. <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">1</span>, <span class="hljs-number">256</span> * <span class="hljs-number">1024</span>)) .<span class="hljs-string">&quot;; ?&gt;.\r\n&quot;</span><br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">&#x27;/test.tpl&#x27;</span>, <span class="hljs-variable">$c</span>);<br>    <span class="hljs-keyword">require_once</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">&#x27;/test.tpl&#x27;</span>;<br></code></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">(gdb) bt<br><span class="hljs-meta prompt_">#</span><span class="language-bash">0  0x082fd8d6 <span class="hljs-keyword">in</span> lex_scan (zendlval=0xbff7295c) at Zend/zend_language_scanner.c:930</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">1  0x08324d5d <span class="hljs-keyword">in</span> zendlex (zendlval=0xbff72958) at /root/php-5.3.3/Zend/zend_compile.c:4947</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2  0x082f7447 <span class="hljs-keyword">in</span> zendparse () at /root/php-5.3.3/Zend/zend_language_parser.c:3280</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">3  0x082fcc97 <span class="hljs-keyword">in</span> compile_file (file_handle=0xbff72ad0, <span class="hljs-built_in">type</span>=2) at Zend/zend_language_scanner.l:354</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">4  0x082fcdec <span class="hljs-keyword">in</span> compile_filename (<span class="hljs-built_in">type</span>=2, filename=0xa179af0) at Zend/zend_language_scanner.l:397</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">5  0x0837983e <span class="hljs-keyword">in</span> ZEND_INCLUDE_OR_EVAL_SPEC_TMP_HANDLER (execute_data=0xa179a04) at /root/php-5.3.3/Zend/zend_vm_execute.h:5199</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">6  0x08369b48 <span class="hljs-keyword">in</span> execute (op_array=0xa1467a4) at /root/php-5.3.3/Zend/zend_vm_execute.h:107</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">7  0x083398ca <span class="hljs-keyword">in</span> zend_execute_scripts (<span class="hljs-built_in">type</span>=8, retval=0x0, file_count=3) at /root/php-5.3.3/Zend/zend.c:1266</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">8  0x082cc48f <span class="hljs-keyword">in</span> php_execute_script (primary_file=0xbff77034) at /root/php-5.3.3/main/main.c:2275</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">9  0x0840f171 <span class="hljs-keyword">in</span> main (argc=3, argv=0xbff77174) at /root/php-5.3.3/sapi/fpm/fpm/fpm_main.c:1865</span><br></code></pre></td></tr></table></figure><p>问题的原因 nikic 给出了很清晰的解释： <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">The issue here seems pretty <span class="hljs-built_in">clear</span>. We are mmap()ing <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span>. While <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span> is mapped, <span class="hljs-keyword">it</span> is modified, resulting <span class="hljs-keyword">in</span> <span class="hljs-keyword">an</span> <span class="hljs-keyword">effective</span> ftruncate(). Here is what <span class="hljs-keyword">the</span> man page <span class="hljs-keyword">for</span> ftruncate() has <span class="hljs-built_in">to</span> say <span class="hljs-keyword">on</span> <span class="hljs-title">the</span> <span class="hljs-title">topic</span>:<br><br>If <span class="hljs-keyword">the</span> effect <span class="hljs-keyword">of</span> ftruncate() is <span class="hljs-built_in">to</span> decrease <span class="hljs-keyword">the</span> size <span class="hljs-keyword">of</span> <span class="hljs-keyword">a</span> shared memory object <span class="hljs-keyword">or</span> memory mapped <span class="hljs-built_in">file</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">whole</span> pages beyond <span class="hljs-keyword">the</span> <span class="hljs-built_in">new</span> <span class="hljs-function"><span class="hljs-keyword">end</span> <span class="hljs-title">were</span> <span class="hljs-title">previously</span> <span class="hljs-title">mapped</span>, <span class="hljs-title">then</span> <span class="hljs-title">the</span> <span class="hljs-title">whole</span> <span class="hljs-title">pages</span> <span class="hljs-title">beyond</span> <span class="hljs-title">the</span> <span class="hljs-title">new</span> <span class="hljs-title">end</span> <span class="hljs-title">shall</span> <span class="hljs-title">be</span> <span class="hljs-title">discarded</span>.</span><br> <br>If <span class="hljs-keyword">the</span> Memory Protection option is supported, references <span class="hljs-built_in">to</span> discarded pages shall <span class="hljs-built_in">result</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> generation <span class="hljs-keyword">of</span> <span class="hljs-keyword">a</span> SIGBUS signal; otherwise, <span class="hljs-keyword">the</span> <span class="hljs-built_in">result</span> <span class="hljs-keyword">of</span> such references is undefined.<br><br>This is precisely what we are observing here.<br></code></pre></td></tr></table></figure></p><p>说白了就是<code>require_once</code>的<code>test.tpl</code>这个文件的大小在不停的变化，从而导致这个问题。具体想深入了解下怎么回事的参考下 <ahref="https://github.com/noname007/some-software-bak/blob/master/The%20Linux%20Programming%20Interface.pdf">tlpiChapter 49</a>。</p><p>怎么知道系统底层用 mmap引起的？可以用strace 跟踪上面 php的运行，观察到 <code>require/require_once/include/include_once</code>底层的系统调用。另外nikic上面也有提示。</p><h2 id="sigbus-最小完整问题复现">sigbus 最小完整问题复现</h2><p>下面是一段c代码模拟出现sigbus的情况，其实也是上面这个问题触发<code>sigbus</code>时，最小完整问题复现代码。 - 我的系统页面大小为 4k （具体数值 linux 下可用<code>getconf PAGESIEZE</code> 获得）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br>  <span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;test.tpl&quot;</span>, O_WRONLY);<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">s</span>;</span><br>  fstat(fd, &amp;s);<br>  <span class="hljs-type">char</span> * file = mmap(<span class="hljs-literal">NULL</span>, <span class="hljs-number">8192</span> , PROT_READ, MAP_PRIVATE, fd, <span class="hljs-number">0</span>);<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,*(file + <span class="hljs-number">4096</span>)); <span class="hljs-comment">//coredump sigbus</span><br><br><span class="hljs-comment">// 打印文件 test.tpl 内容</span><br><span class="hljs-comment">//  for(int i = 0; i&lt;= s.st_size; ++i, a++)</span><br><span class="hljs-comment">//  &#123;</span><br><span class="hljs-comment">//    printf(&quot;%c&quot;,*a);</span><br><span class="hljs-comment">//  &#125;</span><br><span class="hljs-comment">////  sleep(5);</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>如何避免这个 sigbus 引起的 coredump</p><ul><li>不使用 <code>require/inlude</code> 函数加载大小变化文件。</li><li>如果非要加载的话，避免文件大小变化的同时加载文件。</li><li>如果文件大小变化的同时加载文件，保证<code>页面大小</code>不属于<code>文件大小变化的范围 (min,max) % 页面大小</code>。</li></ul><p>上面三个建议都可以。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>系统编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sed 正则表达式中的反转义</title>
    <link href="/2017/06/19/sed.html"/>
    <url>/2017/06/19/sed.html</url>
    
    <content type="html"><![CDATA[<ul><li>目录 {:toc}</li></ul><h2 id="两种正则">两种正则</h2><p>今天修复了 <a href="https://github.com/sumory/orange">orange</a>的一个 <ahref="https://github.com/sumory/orange/pull/127/commits/757a8367e13545170d354e9de1183cac7551502a">小瑕疵</a>。是sed s 命令使用正则的一个小问题。</p><p>可以说s命令时sed中最重要的命令，完成输入流的查找、替换。使用格式有如下两种方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed  &quot;s/regexp/replacement/&quot; input.file<br><br>sed -r &quot;s/regexp/replacement/&quot; input.file<br></code></pre></td></tr></table></figure><p>和其他编程语言相比 regexp，replacement的使用也没什么太大的区别，例如<code>反向引用</code>都是可以使用的。</p><p>上面第一条命令使用的是<code>基础正则表达式（BRE)</code>，第二条命令中<code>-r</code>表示使用的是<code>扩展的正则表达式（ERE）</code>，其区别可 <ahref="https://www.gnu.org/software/sed/manual/html_node/Extended-regexps.html">参考gnu附录文档</a>。</p><h2 id="反转义">反转义</h2><p>在 <code>sed</code><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://www.gnu.org/software/sed/manual/sed.html#sed-regular-expressions">[1]</span></a></sup>中两种正则表达式非常有意思，其两种模式互相转换<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://www.gnu.org/software/sed/manual/sed.html#BRE-vs-ERE">[2]</span></a></sup>。</p><p>元字符 不起效，如下两种方式 + 只是表示其字面量字符加号。<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ echo <span class="hljs-string">&quot;a+b=c&quot;</span> | sed -n <span class="hljs-string">&#x27;/a+b/p&#x27;</span><br>a+<span class="hljs-attribute">b</span>=c<br><br>$ echo <span class="hljs-string">&quot;a+b=c&quot;</span> | sed -E -n <span class="hljs-string">&#x27;/a\+b/p&#x27;</span><br>a+<span class="hljs-attribute">b</span>=c<br></code></pre></td></tr></table></figure></p><p>元字符 起效，如下两种方式 + 表示匹配一个或多个。 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;aab&quot;</span> | sed -n <span class="hljs-string">&#x27;/a\+b/p&#x27;</span></span><br>aab<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;aab&quot;</span> | sed -E -n <span class="hljs-string">&#x27;/a+b/p&#x27;</span></span><br>aab<br></code></pre></td></tr></table></figure></p><h2 id="参考">参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1"class="footnote-text"><span>https://www.gnu.org/software/sed/manual/sed.html#sed-regular-expressions<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2"class="footnote-text"><span>https://www.gnu.org/software/sed/manual/sed.html#BRE-vs-ERE<a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>软件工具</tag>
      
      <tag>sed</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理-几个练习题</title>
    <link href="/2017/05/15/compilers-homework.html"/>
    <url>/2017/05/15/compilers-homework.html</url>
    
    <content type="html"><![CDATA[<figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-number">1.</span> 给定如下的正则表达式<br><br>（a|<span class="hljs-type">b</span>)(c|<span class="hljs-type">d</span>)*<br><br>（<span class="hljs-number">1</span>）使用Thompson算法将其转换成NFA；<br><br>（<span class="hljs-number">2</span>）使用子集构造算法将NFA转换成DFA；<br><br>（<span class="hljs-number">3</span>）使用Hopcroft算法将上述DFA最小化。<br><br></code></pre></td></tr></table></figure><p><imgsrc="https://github.com/noname007/mooc163-compiler/raw/master/compiler/finalimgs/20170516182012.jpg" /></p><p><imgsrc="https://github.com/noname007/mooc163-compiler/raw/master/compiler/finalimgs/20170516182046.jpg" /></p><p><imgsrc="https://github.com/noname007/mooc163-compiler/raw/master/compiler/finalimgs/20170516182056.jpg" /></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">2.</span> 对于下述的两个上下文无关文法：<br><br>（第一个文法）<br><br>E -&gt; n + E<br><br>   | n<br><br>（第二个文法）<br><br>E -&gt; E + n<br><br>   | n<br><br>问题：<br><br><span class="hljs-code">    简要说明为什么上述两个文法产生的语言是一样的；</span><br><span class="hljs-code"></span><br><span class="hljs-code">    哪个文法可以用LL(1)分析；为什么？</span><br><span class="hljs-code"></span><br><span class="hljs-code">    哪个文法可以用LR(1)分析；为什么？</span><br><span class="hljs-code"></span><br><span class="hljs-code">    用LR分析法，对这两个文法的分析效率哪个高？为什么？</span><br><span class="hljs-code"></span><br></code></pre></td></tr></table></figure><p><imgsrc="https://github.com/noname007/mooc163-compiler/raw/master/compiler/finalimgs/20170516182110.jpg" /></p><p><imgsrc="https://github.com/noname007/mooc163-compiler/raw/master/compiler/finalimgs/20170516182122.jpg" /></p><p><imgsrc="https://github.com/noname007/mooc163-compiler/raw/master/compiler/finalimgs/20170516182130.jpg" /></p><p><imgsrc="https://github.com/noname007/mooc163-compiler/raw/master/compiler/finalimgs/20170516182136.jpg" /></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">3.</span> 在C语言中，函数在使用前必须声明其原型；<br>而在Java中，调用其它类中的方法不需要提前进行原型的声明。<br>这两种不同的规定，对语义检查器有什么影响？<br><br><br><br><span class="hljs-bullet">4.</span> 在类型检查前就进行编译优化会有什么问题？请简单解释。<br></code></pre></td></tr></table></figure><p><imgsrc="https://github.com/noname007/mooc163-compiler/raw/master/compiler/finalimgs/20170516182142.jpg" /></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">5</span>. 考虑如下两种不同结合性的表达式：<br><br>（第一种）<br><br>((<span class="hljs-built_in">k1</span>+<span class="hljs-built_in">k2</span>)+...+kn-<span class="hljs-number">1</span>)+kn<br><br>（第二种）<br><br><span class="hljs-built_in">k1</span>+(<span class="hljs-built_in">k2</span>+...(kn-<span class="hljs-number">1</span> + kn))<br><br>对栈式计算机生成代码的话，哪种表达式会消耗更多的操作数栈的空间。简要解释你的结论。<br><br><span class="hljs-number">6</span>. 你学习本课程有何收获？对本课程有什么意见建议？对下轮授课有何期待？请提出你的建议。<br>【任何答案，除非没有作答，都将得到满分。】<br><br></code></pre></td></tr></table></figure><p><imgsrc="https://github.com/noname007/mooc163-compiler/raw/master/compiler/finalimgs/20170516182149.jpg" /></p><p><imgsrc="https://github.com/noname007/mooc163-compiler/raw/master/compiler/finalimgs/20170516182155.jpg" /></p><blockquote><p>整个课程所写的代码 <ahref="https://github.com/noname007/mooc163-compiler">https://github.com/noname007/mooc163-compiler</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thrift 入门学习 笔记</title>
    <link href="/2017/04/05/thrift-intro.html"/>
    <url>/2017/04/05/thrift-intro.html</url>
    
    <content type="html"><![CDATA[<ul><li>目录 {:toc}</li></ul><h2 id="入门教程">入门教程</h2><p>可以参考其中的一个做下简单的整体了解</p><ol type="1"><li>thrif 入门<ul><li><ahref="http://www.jianshu.com/p/0f4113d6ec4b">http://www.jianshu.com/p/0f4113d6ec4b</a></li></ul></li><li>thrif 入门<ul><li><ahref="http://wuchong.me/blog/2015/10/07/thrift-induction/">http://wuchong.me/blog/2015/10/07/thrift-induction/</a></li><li><ahref="http://wuchong.me/blog/2015/10/07/thrift-practice/">http://wuchong.me/blog/2015/10/07/thrift-practice/</a></li></ul></li></ol><h2 id="深入一点">深入一点</h2><p>更加深入的了解一些 thrift内部类、方法可以参考这个系列的三篇文章，</p><ol type="1"><li><ahref="http://dongxicheng.org/search-engine/thrift-framework-intro/">http://dongxicheng.org/search-engine/thrift-framework-intro/</a></li><li><ahref="http://dongxicheng.org/search-engine/thrift-guide/">http://dongxicheng.org/search-engine/thrift-guide/</a></li><li><ahref="http://dongxicheng.org/search-engine/thrift-rpc/">http://dongxicheng.org/search-engine/thrift-rpc/</a></li></ol><p>系列还有一篇 浅谈Thrift内部实现原理 的文章，</p><p>​<ahref="http://dongxicheng.org/search-engine/thrift-internals/">http://dongxicheng.org/search-engine/thrift-internals/</a></p><p>讲的不是那么容易理解，直接分析生成的c++的代码，初步的参考价值反而不如前三篇文章大。</p><p>这个系列我感觉还缺少一篇这样的文章：</p><pre><code class="hljs">分析rpc通信数据具体格式，序列化、反序列化的过程中如何跟具体的一门语言对象是如何对应的。</code></pre><p>当然这个要求难度还是挺难的。：）</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Thrift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c 中的 forward-declare</title>
    <link href="/2017/03/31/typedef-forward-declare.html"/>
    <url>/2017/03/31/typedef-forward-declare.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>欢迎邮件交流</p></blockquote><p>有下面一段构建列表 c 语言代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">List</span> * <span class="hljs-title">List</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">List</span></span><br><span class="hljs-class">&#123;</span><br>  List next;<br>&#125;;<br></code></pre></td></tr></table></figure><p>懵逼了吗？没有的话，说明你的水平比我高，不用看了。:)</p><p><code>struct tag&#123;...&#125;;</code>tag可以为任意标识符，关键字（int,if)除外</p><p><code>typedef A B</code> A可以为任意类型，前提是编译器能算出来所占用的内存空间。 B可以为任意标识符，关键字（int,if)除外。<code>typedef struct List List</code>就不合法，<code>struct List</code> 内存占用多少信息无法获知。</p><p>下面是两段验证程序：</p><ul><li><ahref="https://github.com/noname007/mooc163-compiler/blob/master/c/poc/forward-declare/1.c">1.c</a></li><li><ahref="https://github.com/noname007/mooc163-compiler/blob/master/c/poc/forward-declare/2.c">2.c</a></li></ul><p>你可能会有疑问<code>struct L</code> <code>L</code>是怎么区分开的?但是其实也很容易想明白，你说呢:)</p><h2 id="c-不能这么玩">c++ 不能这么玩</h2><p>参考资料里面也有提及到。不信可以试下。自行观看下面的编译过程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc 1.c -v #cc1<br>g++ 1.c -v #cc1plus<br></code></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>有个用途就是做数据隐藏，在一个头文件中只写如下代码（抄自参考资料）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> <span class="hljs-title">Node</span>;</span><br>Node * <span class="hljs-title function_">list_new</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br>Node * <span class="hljs-title function_">list_append</span><span class="hljs-params">(Node *head, Node *new_tail)</span>;<br><span class="hljs-type">size_t</span> <span class="hljs-title function_">list_length</span><span class="hljs-params">(<span class="hljs-type">const</span> Node *head)</span>;<br></code></pre></td></tr></table></figure><p>从中可以看出，即使此前从未声明过的类型，也不会对编译有多大影响。从这里做个简单的结论，<code>编译器能获得类型占用多少内存空间信息，要比在此前获得其定义声明信息更加重要。</code></p><hr /><h2 id="参阅资料">参阅资料</h2><ul><li><p>http://stackoverflow.com/questions/3988041/how-to-define-a-typedef-struct-containing-pointers-to-itself</p></li><li><p>http://stackoverflow.com/questions/7474774/why-does-typdef-struct-struct-s-s-s-containing-a-pointer-to-same-type-c</p></li><li><p>http://stackoverflow.com/questions/804894/forward-declaration-of-a-typedef-in-c<!-- - https://gcc.gnu.org/onlinedocs/gcc-3.3/gcc/Type-Attributes.html --></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【译】Openresty OOM 臭虫</title>
    <link href="/2017/03/25/translate-nginx-oom.html"/>
    <url>/2017/03/25/translate-nginx-oom.html</url>
    
    <content type="html"><![CDATA[<p><ahref="http://www.elvinefendi.com/2017/03/07/my-experience-with-lua-nginx-openssl-strace-gdb-glibc-and-linux-vm.html">原文链接</a></p><blockquote><p>http://www.elvinefendi.com/2017/03/07/my-experience-with-lua-nginx-openssl-strace-gdb-glibc-and-linux-vm.html</p></blockquote><p><strong>在<ahref="https://github.com/openresty/lua-nginx-module/blob/37e5362088bd659e318aae568b268719bd0d6707/src/ngx_http_lua_module.c#L1294">lua-nginx-module</a>中，一个内存相关的黑魔法导致冗余的大内存分配。</strong></p><p>最近我在线上改变了一个的 Nginx 配置，导致 OOM（Out of Memory） killer在 Nginx 加载新配置的过程中 杀死了 Nginx进程。这是添加到配置中的行：</p><pre><code class="hljs">lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;</code></pre><p>在这篇文章中，我将会阐述我是如何找出这个问题的根本原因、记录在这个过程中现学现用的工具。这篇文章内容细节非常琐碎。在进行深入阅读前，先列下使用的软件栈：</p><ul><li>Openssl <code>1.0.2j</code></li><li>OS:<code>Ubuntu Trusty with Linux 3.19.0-80-generic</code></li><li>Nginx:<code>Openresty bundle 1.11.2</code></li><li>glibc:<code>Ubuntu EGLIBC 2.19-0ubuntu6.9</code></li></ul><p>我们从 OOM Killer 开始。它是一个 Linux内核函数，当内核不能分配更多的内存空间的时候它将会被触发。OOM Killer的任务是探测哪一个进程是对系统危害最大（参考<ahref="https://linux-mm.org/OOM_Killer">https://linux-mm.org/OOM_Killer</a>,获取更多关于坏评分是如何计算出来的信息），一旦检测出来，将会杀死进程、释放内存。也就是说我遇到的情况是，Nginx 是在申请越来越多的内存，最终内核申请内存失败并且触发OOMKiller，杀死 Nginx 进程。</p><p>到此为止，现在让我们看看当 Nginx 重新加载配置的时候做了什么。可以使用<code>strace</code>进行跟踪。这是一个非常棒的工具，能在不用阅读源码的情况下查看程序正在做什么。</p><p>在我这里，执行：</p><pre><code class="hljs">sudo strace -p `cat /var/run/nginx.pid` -f</code></pre><p>接着</p><pre><code class="hljs">sudo /etc/inid.t/nginx reload</code></pre><p><code>-f</code> 选项告诉 <code>strace</code> 也要对子进程进行跟踪。在<ahref="http://jvns.ca/zines/#strace-zine.">http://jvns.ca/zines/#strace-zine.</a>你能看到一个对<code>strace</code>非常好的评价。下面是一个非常有趣的片段，执行完<code>strace</code>后输出的：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><br>[pid <span class="hljs-number">31774</span>] open(<span class="hljs-string">&quot;/etc/ssl/certs/ca-certificates.crt&quot;</span>, <span class="hljs-symbol">O_RDONLY</span>) = <span class="hljs-number">5</span><br>[pid <span class="hljs-number">31774</span>] fstat(<span class="hljs-number">5</span>, &#123;st_mode=<span class="hljs-symbol">S_IFREG</span>|<span class="hljs-number">0644</span>, st_size=<span class="hljs-number">274340</span>, ...&#125;) = <span class="hljs-number">0</span><br>[pid <span class="hljs-number">31774</span>] mmap(<span class="hljs-symbol">NULL</span>, <span class="hljs-number">4096</span>, <span class="hljs-symbol">PROT_READ</span>|<span class="hljs-symbol">PROT_WRITE</span>, <span class="hljs-symbol">MAP_PRIVATE</span>|<span class="hljs-symbol">MAP_ANONYMOUS</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>) = <span class="hljs-number">0x7f6dc8266000</span><br>[pid <span class="hljs-number">31774</span>] read(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;-----BEGIN CERTIFICATE-----\nMIIH&quot;</span>..., <span class="hljs-number">4096</span>) = <span class="hljs-number">4096</span><br>[pid <span class="hljs-number">31774</span>] read(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;WIm\nfQwng4/F9tqgaHtPkl7qpHMyEVNE&quot;</span>..., <span class="hljs-number">4096</span>) = <span class="hljs-number">4096</span><br>[pid <span class="hljs-number">31774</span>] read(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;Ktmyuy/uE5jF66CyCU3nuDuP/jVo23Ee&quot;</span>..., <span class="hljs-number">4096</span>) = <span class="hljs-number">4096</span><br>...&lt;stripped for clarity&gt;...<br>[pid <span class="hljs-number">31774</span>] read(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;MqAw\nhi5odHRwOi8vd3d3Mi5wdWJsaWM&quot;</span>..., <span class="hljs-number">4096</span>) = <span class="hljs-number">4096</span><br>[pid <span class="hljs-number">31774</span>] read(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;dc/BGZFjz+iokYi5Q1K7\ngLFViYsx+tC&quot;</span>..., <span class="hljs-number">4096</span>) = <span class="hljs-number">4096</span><br>[pid <span class="hljs-number">31774</span>] brk(<span class="hljs-number">0x26d3000</span>)              = <span class="hljs-number">0x26b2000</span><br>[pid <span class="hljs-number">31774</span>] mmap(<span class="hljs-symbol">NULL</span>, <span class="hljs-number">1048576</span>, <span class="hljs-symbol">PROT_READ</span>|<span class="hljs-symbol">PROT_WRITE</span>, <span class="hljs-symbol">MAP_PRIVATE</span>|<span class="hljs-symbol">MAP_ANONYMOUS</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>) = <span class="hljs-number">0x7f6c927c3000</span><br>[pid <span class="hljs-number">31774</span>] read(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;/lmci3Zt1/GiSw0r/wty2p5g0I6QNcZ4&quot;</span>..., <span class="hljs-number">4096</span>) = <span class="hljs-number">4096</span><br>[pid <span class="hljs-number">31774</span>] read(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;iv9kuXclVzDAGySj4dzp30d8tbQk\nCAU&quot;</span>..., <span class="hljs-number">4096</span>) = <span class="hljs-number">4096</span><br>...&lt;stripped for clarity&gt;...<br>[pid <span class="hljs-number">31774</span>] read(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;ye8\nFVdMpEbB4IMeDExNH08GGeL5qPQ6&quot;</span>..., <span class="hljs-number">4096</span>) = <span class="hljs-number">4096</span><br>[pid <span class="hljs-number">31774</span>] read(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;VVNUIEVs\nZWt0cm9uaWsgU2VydGlmaWt&quot;</span>..., <span class="hljs-number">4096</span>) = <span class="hljs-number">4004</span><br>[pid <span class="hljs-number">31774</span>] read(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">4096</span>)           = <span class="hljs-number">0</span><br>[pid <span class="hljs-number">31774</span>] close(<span class="hljs-number">5</span>)                    = <span class="hljs-number">0</span><br>[pid <span class="hljs-number">31774</span>] munmap(<span class="hljs-number">0x7f6dc8266000</span>, <span class="hljs-number">4096</span>) = <span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><p>这段重复了很多次！有两行非常有意思。</p><pre><code class="hljs">open(&quot;/etc/ssl/certs/ca-certificates.crt&quot;, O_RDONLY) = 5</code></pre><p>这行意味着是跟修改的配置（上面提到的修改）有关的操作，</p><pre><code class="hljs">mmap(NULL, 1048576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f6c927c3000</code></pre><p>这行意味着在<code>read</code>过程中间请求内核分配 1M 内存空间。</p><p>在 <code>strace</code>的输出中，另一个有意思的细节是分配的内存从来没有执行<code>munmap</code>进行释放。注意在调用<code>close</code>后<code>0x7f6dc8266000</code>才被传入<code>munmap</code>。</p><p>这些事实让我相信，当设置<code>lua_ssl_trusted_certificate</code>这条指令后，Nginx 发生了内存泄露（尽管我对底层调试几乎没有任何经验）。什么？Nginx发生了内存泄露，难道那还不让人兴奋？！不要这么兴奋。</p><p>为了找出是Nginx 的哪个组件发生了内存泄露，我决定使用<code>gdb</code>。如果编译程序的时候打开了调试符号选项，<code>gdb</code>将会非常有用。如上所述，我使用的是Nginx Openresty 套件， 需要使用下面的命令开启调试符号选项重新编译：</p><pre><code class="hljs">~/openresty-1.11.2.2 $ ./configure -j2 --with-debug --with-openssl=../openssl-1.0.2j/ --with-openssl-opt=&quot;-d no-asm -g3 -O0 -fno-omit-frame-pointer -fno-inline-functions&quot;</code></pre><p><code>--with-openssl-opt="-d no-asm -g3 -O0 -fno-omit-frame-pointer -fno-inline-functions"</code>确保 OpenSSL编译的时候也开启调试符号信息。现在已经在Openresty的可执行程序中带有了调试符号信息，能通过<code>gdb</code>启动运行、找到上面提到的触发<code>mmap</code>的具体的调用函数。</p><p>首先我们需要启动<code>gdb</code>调试 Openresty 可执行程序：</p><pre><code class="hljs">sudo gdb `which openresty`</code></pre><p>这个命令将打开<code>gdb</code>命令行，像下面这样：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><br>GNU gdb (Ubuntu <span class="hljs-number">7.7</span><span class="hljs-number">.1</span><span class="hljs-number">-0</span>ubuntu5~<span class="hljs-number">14.04</span><span class="hljs-number">.2</span>) <span class="hljs-number">7.7</span><span class="hljs-number">.1</span><br>Copyright (C) <span class="hljs-number">2014</span> Free Software Foundation, Inc.<br>License GPLv3+: GNU GPL <span class="hljs-built_in">version</span> <span class="hljs-number">3</span> <span class="hljs-keyword">or</span> later &lt;<span class="hljs-keyword">http</span>://gnu.org/licenses/gpl.html&gt;<br>This is free software: you are free <span class="hljs-built_in">to</span> change <span class="hljs-keyword">and</span> redistribute <span class="hljs-keyword">it</span>.<br>There is NO WARRANTY, <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> extent permitted <span class="hljs-keyword">by</span> law.  Type <span class="hljs-string">&quot;show copying&quot;</span><br><span class="hljs-keyword">and</span> <span class="hljs-string">&quot;show warranty&quot;</span> <span class="hljs-keyword">for</span> details.<br>This GDB was configured <span class="hljs-keyword">as</span> <span class="hljs-string">&quot;x86_64-linux-gnu&quot;</span>.<br>Type <span class="hljs-string">&quot;show configuration&quot;</span> <span class="hljs-keyword">for</span> configuration details.<br>For bug reporting instructions, please see:<br>&lt;<span class="hljs-keyword">http</span>://www.gnu.org/software/gdb/bugs/&gt;.<br>Find <span class="hljs-keyword">the</span> GDB manual <span class="hljs-keyword">and</span> other documentation resources online <span class="hljs-keyword">at</span>:<br>&lt;<span class="hljs-keyword">http</span>://www.gnu.org/software/gdb/documentation/&gt;.<br>For help, type <span class="hljs-string">&quot;help&quot;</span>.<br>Type <span class="hljs-string">&quot;apropos word&quot;</span> <span class="hljs-built_in">to</span> search <span class="hljs-keyword">for</span> commands related <span class="hljs-built_in">to</span> <span class="hljs-string">&quot;word&quot;</span>...<br>Reading symbols <span class="hljs-built_in">from</span> /usr/<span class="hljs-built_in">local</span>/openresty/bin/openresty...done.<br>(gdb)<br><br></code></pre></td></tr></table></figure><p>接下来，设置程序的命令行参数</p><pre><code class="hljs">(gdb) set args -p `pwd` -c nginx.conf</code></pre><p>这将使<code>gdb</code>在启动 Opneresty/Nginx的时候把给出的命令行参数传递过去。接着配置断点，使其能够暂停程序到某一个文件的某一行或者是某一个函数。因为我想找出在<code>open</code>打开信任的验证文件后，那个令人奇怪的<code>mmap</code>的调用者，所以我首先添加了一个断点在</p><pre><code class="hljs">open(&quot;/etc/ssl/certs/ca-certificates.crt&quot;, O_RDONLY) = 5</code></pre><p>断点设置如下：</p><pre><code class="hljs">break open if strcmp($rdi, &quot;/etc/ssl/certs/ca-certificates.crt&quot;) == 0</code></pre><p>如果你先前没有了解过gdb，gdb是非常棒的工具，可以使用它添加一个自定义的条件来创建复杂的断点。这里我们告诉<code>gdb</code>暂停程序，如果<code>open</code>函数被调用并且<code>rdi</code>寄存器指向的数据是<code>/etc/ssl/certs/ca-certificates.crt</code>。我不知道是否还有更好的方式，<!-- 但是我是在观察了多次发现这种添加条件断点的方式 -->我是在反复尝试后，发现<code>open</code>函数的第一个参数（文件路径）保存在了<code>rdi</code>寄存器，所以才会如此设置断点。现在告诉<code>gdb</code>运行程序：</p><pre><code class="hljs">(gdb) run</code></pre><p>第一次出现<code>open("/etc/ssl/certs/ca-certificates.crt", O_RDONLY)</code>调用时，<code>gdb</code>将会暂停程序执行。现在我们可以使用其他的<code>gdb</code>辅助命令观察此刻程序的内部状态。下面是程序执行到断点的时候的内部状态：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs less"><br><span class="hljs-selector-tag">Breakpoint</span> <span class="hljs-number">1</span>, <span class="hljs-selector-tag">open64</span> () <span class="hljs-selector-tag">at</span> ../<span class="hljs-selector-tag">sysdeps</span>/<span class="hljs-selector-tag">unix</span>/<span class="hljs-selector-tag">syscall-template</span><span class="hljs-selector-class">.S</span>:<span class="hljs-number">81</span><br><span class="hljs-number">81</span>  ../<span class="hljs-selector-tag">sysdeps</span>/<span class="hljs-selector-tag">unix</span>/<span class="hljs-selector-tag">syscall-template</span><span class="hljs-selector-class">.S</span>: <span class="hljs-selector-tag">No</span> <span class="hljs-selector-tag">such</span> <span class="hljs-selector-tag">file</span> <span class="hljs-selector-tag">or</span> <span class="hljs-selector-tag">directory</span>.<br>(gdb) <span class="hljs-selector-tag">bt</span><br><span class="hljs-selector-id">#0</span>  <span class="hljs-selector-tag">open64</span> () <span class="hljs-selector-tag">at</span> ../<span class="hljs-selector-tag">sysdeps</span>/<span class="hljs-selector-tag">unix</span>/<span class="hljs-selector-tag">syscall-template</span><span class="hljs-selector-class">.S</span>:<span class="hljs-number">81</span><br><span class="hljs-selector-id">#1</span>  <span class="hljs-number">0</span><span class="hljs-selector-tag">x00007ffff6a3dec8</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">_IO_file_open</span> (is32not64=<span class="hljs-number">8</span>, read_write=<span class="hljs-number">8</span>, prot=<span class="hljs-number">438</span>, posix_mode=&lt;optimized out&gt;, filename=<span class="hljs-number">0</span>x7fffffffdb00 <span class="hljs-string">&quot;\346\f\362\367\377\177&quot;</span>, fp=<span class="hljs-number">0</span>x7ffff7f28a10) <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">fileops</span><span class="hljs-selector-class">.c</span>:<span class="hljs-number">228</span><br><span class="hljs-selector-id">#2</span>  <span class="hljs-selector-tag">_IO_new_file_fopen</span> (fp=fp<span class="hljs-variable">@entry</span>=<span class="hljs-number">0</span>x7ffff7f28a10, filename=filename<span class="hljs-variable">@entry</span>=<span class="hljs-number">0</span>x7ffff7f20ce6 <span class="hljs-string">&quot;/etc/ssl/certs/ca-certificates.crt&quot;</span>, mode=&lt;optimized out&gt;, mode<span class="hljs-variable">@entry</span>=<span class="hljs-number">0</span>x6fb62d <span class="hljs-string">&quot;r&quot;</span>, is32not64=is32not64<span class="hljs-variable">@entry</span>=<span class="hljs-number">1</span>) <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">fileops</span><span class="hljs-selector-class">.c</span>:<span class="hljs-number">333</span><br><span class="hljs-selector-id">#3</span>  <span class="hljs-number">0</span><span class="hljs-selector-tag">x00007ffff6a323d4</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">__fopen_internal</span> (filename=<span class="hljs-number">0</span>x7ffff7f20ce6 <span class="hljs-string">&quot;/etc/ssl/certs/ca-certificates.crt&quot;</span>, mode=<span class="hljs-number">0</span>x6fb62d <span class="hljs-string">&quot;r&quot;</span>, is32=<span class="hljs-number">1</span>) <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">iofopen</span><span class="hljs-selector-class">.c</span>:<span class="hljs-number">90</span><br><span class="hljs-selector-id">#4</span>  <span class="hljs-number">0</span><span class="hljs-selector-tag">x00000000005b3fd2</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">file_fopen</span> (filename=<span class="hljs-number">0</span>x7ffff7f20ce6 <span class="hljs-string">&quot;/etc/ssl/certs/ca-certificates.crt&quot;</span>, mode=<span class="hljs-number">0</span>x6fb62d <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">bss_file</span><span class="hljs-selector-class">.c</span>:<span class="hljs-number">164</span><br><span class="hljs-selector-id">#5</span>  <span class="hljs-number">0</span><span class="hljs-selector-tag">x00000000005b3fff</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">BIO_new_file</span> (filename=<span class="hljs-number">0</span>x7ffff7f20ce6 <span class="hljs-string">&quot;/etc/ssl/certs/ca-certificates.crt&quot;</span>, mode=<span class="hljs-number">0</span>x6fb62d <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">bss_file</span><span class="hljs-selector-class">.c</span>:<span class="hljs-number">172</span><br><span class="hljs-selector-id">#6</span>  <span class="hljs-number">0</span><span class="hljs-selector-tag">x00000000005e8ad3</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">X509_load_cert_crl_file</span> (ctx=<span class="hljs-number">0</span>x7ffff7f289e0, file=<span class="hljs-number">0</span>x7ffff7f20ce6 <span class="hljs-string">&quot;/etc/ssl/certs/ca-certificates.crt&quot;</span>, type=<span class="hljs-number">1</span>) <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">by_file</span><span class="hljs-selector-class">.c</span>:<span class="hljs-number">251</span><br><span class="hljs-selector-id">#7</span>  <span class="hljs-number">0</span><span class="hljs-selector-tag">x00000000005e8626</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">by_file_ctrl</span> (ctx=<span class="hljs-number">0</span>x7ffff7f289e0, cmd=<span class="hljs-number">1</span>, argp=<span class="hljs-number">0</span>x7ffff7f20ce6 <span class="hljs-string">&quot;/etc/ssl/certs/ca-certificates.crt&quot;</span>, argl=<span class="hljs-number">1</span>, ret=<span class="hljs-number">0</span>x0) <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">by_file</span><span class="hljs-selector-class">.c</span>:<span class="hljs-number">115</span><br><span class="hljs-selector-id">#8</span>  <span class="hljs-number">0</span><span class="hljs-selector-tag">x00000000005e5747</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">X509_LOOKUP_ctrl</span> (ctx=<span class="hljs-number">0</span>x7ffff7f289e0, cmd=<span class="hljs-number">1</span>, argc=<span class="hljs-number">0</span>x7ffff7f20ce6 <span class="hljs-string">&quot;/etc/ssl/certs/ca-certificates.crt&quot;</span>, argl=<span class="hljs-number">1</span>, ret=<span class="hljs-number">0</span>x0) <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">x509_lu</span><span class="hljs-selector-class">.c</span>:<span class="hljs-number">120</span><br><span class="hljs-selector-id">#9</span>  <span class="hljs-number">0</span><span class="hljs-selector-tag">x00000000005dd5c1</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">X509_STORE_load_locations</span> (ctx=<span class="hljs-number">0</span>x7ffff7f28750, file=<span class="hljs-number">0</span>x7ffff7f20ce6 <span class="hljs-string">&quot;/etc/ssl/certs/ca-certificates.crt&quot;</span>, path=<span class="hljs-number">0</span>x0) <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">x509_d2</span><span class="hljs-selector-class">.c</span>:<span class="hljs-number">94</span><br><span class="hljs-selector-id">#10</span> <span class="hljs-number">0</span><span class="hljs-selector-tag">x0000000000546e22</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">SSL_CTX_load_verify_locations</span> (ctx=<span class="hljs-number">0</span>x7ffff7f27fd0, CAfile=<span class="hljs-number">0</span>x7ffff7f20ce6 <span class="hljs-string">&quot;/etc/ssl/certs/ca-certificates.crt&quot;</span>, CApath=<span class="hljs-number">0</span>x0) <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">ssl_lib</span><span class="hljs-selector-class">.c</span>:<span class="hljs-number">3231</span><br><span class="hljs-selector-id">#11</span> <span class="hljs-number">0</span><span class="hljs-selector-tag">x0000000000477d94</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">ngx_ssl_trusted_certificate</span> (cf=cf<span class="hljs-variable">@entry</span>=<span class="hljs-number">0</span>x7fffffffe150, ssl=<span class="hljs-number">0</span>x7ffff7f27a78, cert=cert<span class="hljs-variable">@entry</span>=<span class="hljs-number">0</span>x7ffff7f22f20, depth=&lt;optimized out&gt;) <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">src</span>/<span class="hljs-selector-tag">event</span>/<span class="hljs-selector-tag">ngx_event_openssl</span><span class="hljs-selector-class">.c</span>:<span class="hljs-number">687</span><br><span class="hljs-selector-id">#12</span> <span class="hljs-number">0</span><span class="hljs-selector-tag">x00000000004f0a1b</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">ngx_http_lua_set_ssl</span> (llcf=<span class="hljs-number">0</span>x7ffff7f22ef8, cf=<span class="hljs-number">0</span>x7fffffffe150) <span class="hljs-selector-tag">at</span> ../<span class="hljs-selector-tag">ngx_lua-0</span><span class="hljs-selector-class">.10</span><span class="hljs-selector-class">.7</span>/<span class="hljs-selector-tag">src</span>/<span class="hljs-selector-tag">ngx_http_lua_module</span><span class="hljs-selector-class">.c</span>:<span class="hljs-number">1240</span><br><span class="hljs-selector-id">#13</span> <span class="hljs-selector-tag">ngx_http_lua_merge_loc_conf</span> (cf=<span class="hljs-number">0</span>x7fffffffe150, parent=<span class="hljs-number">0</span>x7ffff7f15808, child=<span class="hljs-number">0</span>x7ffff7f22ef8) <span class="hljs-selector-tag">at</span> ../<span class="hljs-selector-tag">ngx_lua-0</span><span class="hljs-selector-class">.10</span><span class="hljs-selector-class">.7</span>/<span class="hljs-selector-tag">src</span>/<span class="hljs-selector-tag">ngx_http_lua_module</span><span class="hljs-selector-class">.c</span>:<span class="hljs-number">1158</span><br><span class="hljs-selector-id">#14</span> <span class="hljs-number">0</span><span class="hljs-selector-tag">x000000000047e2b1</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">ngx_http_merge_servers</span> (cmcf=&lt;optimized out&gt;, cmcf=&lt;optimized out&gt;, ctx_index=&lt;optimized out&gt;, module=&lt;optimized out&gt;, cf=&lt;optimized out&gt;) <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">src</span>/<span class="hljs-selector-tag">http</span>/<span class="hljs-selector-tag">ngx_http</span><span class="hljs-selector-class">.c</span>:<span class="hljs-number">599</span><br><span class="hljs-selector-id">#15</span> <span class="hljs-selector-tag">ngx_http_block</span> (cf=<span class="hljs-number">0</span>x7fffffffe150, cmd=<span class="hljs-number">0</span>x0, conf=<span class="hljs-number">0</span>x1b6) <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">src</span>/<span class="hljs-selector-tag">http</span>/<span class="hljs-selector-tag">ngx_http</span><span class="hljs-selector-class">.c</span>:<span class="hljs-number">269</span><br><span class="hljs-selector-id">#16</span> <span class="hljs-number">0</span><span class="hljs-selector-tag">x0000000000460b5b</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">ngx_conf_handler</span> (last=<span class="hljs-number">1</span>, cf=<span class="hljs-number">0</span>x7fffffffe150) <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">src</span>/<span class="hljs-selector-tag">core</span>/<span class="hljs-selector-tag">ngx_conf_file</span><span class="hljs-selector-class">.c</span>:<span class="hljs-number">427</span><br><span class="hljs-selector-id">#17</span> <span class="hljs-selector-tag">ngx_conf_parse</span> (cf=cf<span class="hljs-variable">@entry</span>=<span class="hljs-number">0</span>x7fffffffe150, filename=filename<span class="hljs-variable">@entry</span>=<span class="hljs-number">0</span>x7ffff7f0b9e8) <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">src</span>/<span class="hljs-selector-tag">core</span>/<span class="hljs-selector-tag">ngx_conf_file</span><span class="hljs-selector-class">.c</span>:<span class="hljs-number">283</span><br><span class="hljs-selector-id">#18</span> <span class="hljs-number">0</span><span class="hljs-selector-tag">x000000000045e2f1</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">ngx_init_cycle</span> (old_cycle=old_cycle<span class="hljs-variable">@entry</span>=<span class="hljs-number">0</span>x7fffffffe300) <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">src</span>/<span class="hljs-selector-tag">core</span>/<span class="hljs-selector-tag">ngx_cycle</span><span class="hljs-selector-class">.c</span>:<span class="hljs-number">274</span><br><span class="hljs-selector-id">#19</span> <span class="hljs-number">0</span><span class="hljs-selector-tag">x000000000044cef4</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">main</span> (argc=&lt;optimized out&gt;, argv=&lt;optimized out&gt;) <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">src</span>/<span class="hljs-selector-tag">core</span>/<span class="hljs-selector-tag">nginx</span><span class="hljs-selector-class">.c</span>:<span class="hljs-number">276</span><br><br></code></pre></td></tr></table></figure><p>真令人兴奋，<code>gdb</code>向我们展示了完整的函数调用栈及参数！查看此刻寄存器中的数据，可以用<code>info registers</code>命令。为了更好的理解调用栈，我查看了一下<code>Nginx</code>的内部工作流程（我记得Openresty仅仅是组装了一些额外的模块的Nginx）。Nginx内部所有的（除了Nginx 核心）都被实现为模块，这些模块注册 handlers 和filters。Nginx的配置文件主要有三个主要的块组成，分别是main、server、location。假设您的自定义Nginx模块引入了一个新的配置指令，那么您还需要注册一个处理程序（handler）来处理该指令的配置的值。因此整个过程如下Nginx解析配置文件，每一个配置部分解析后就会调用注册的相应处理程序。下面是<code>lua-nginx-module</code>（OpenrestyNginx 组件的核心模块）的实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">ngx_http_module_t</span> ngx_http_lua_module_ctx = &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> (NGX_HTTP_LUA_HAVE_MMAP_SBRK)                                            \</span><br><span class="hljs-meta">    &amp;&amp; (NGX_LINUX)                                                           \</span><br><span class="hljs-meta">    &amp;&amp; !(NGX_HTTP_LUA_HAVE_CONSTRUCTOR)</span><br>    ngx_http_lua_pre_config,          <span class="hljs-comment">/*  preconfiguration */</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-literal">NULL</span>,                             <span class="hljs-comment">/*  preconfiguration */</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    ngx_http_lua_init,                <span class="hljs-comment">/*  postconfiguration */</span><br><br>    ngx_http_lua_create_main_conf,    <span class="hljs-comment">/*  create main configuration */</span><br>    ngx_http_lua_init_main_conf,      <span class="hljs-comment">/*  init main configuration */</span><br><br>    ngx_http_lua_create_srv_conf,     <span class="hljs-comment">/*  create server configuration */</span><br>    ngx_http_lua_merge_srv_conf,      <span class="hljs-comment">/*  merge server configuration */</span><br><br>    ngx_http_lua_create_loc_conf,     <span class="hljs-comment">/*  create location configuration */</span><br>    ngx_http_lua_merge_loc_conf       <span class="hljs-comment">/*  merge location configuration */</span><br>&#125;;<br><br><br></code></pre></td></tr></table></figure><p>这里是 Nginx 模块注册的处理程序。从注释中你也可以看到，Nginx解析出来一个 location 配置 就会调用<code>ngx_http_lua_merge_loc_conf</code> 将配置和 main块合并。回到我们的上面的<code>gdb</code>输出,可以看到<code>#13</code>就是这个函数调用。默认情况下对于每一个location 块配置这个函数将会被调用。通过<ahref="https://github.com/openresty/lua-nginx-module/blob/master/src/ngx_http_lua_module.c#L1093">源码</a>我们可以看到这个函数直接去读去配置值、继承server中的配置条目、设置默认值。如果设置了<code>lua_ssl_trusted_certificate</code>指令，可以看到其中调用了<code>ngx_http_lua_set_ssl</code>,在其内部又调用了NginxSSL 模块的<code>ngx_ssl_trusted_certificate</code>。<code>ngx_ssl_trusted_certificate</code>是一个非常简单的函数，对于给定的配置块（一个location 块），设置SSL环境(context)的验证深度，调用另外一个 OpenSSL API加载验证文件（还有一些错误处理）。</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs basic"><br><span class="hljs-symbol">0649 </span>ngx_int_t<br><span class="hljs-symbol">0650 </span>ngx_ssl_trusted_certificate(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *cert,<br><span class="hljs-symbol">0651 </span>    ngx_int_t depth)<br><span class="hljs-symbol">0652 </span>&#123;<br><span class="hljs-symbol">0653 </span>    SSL_CTX_set_verify_depth(ssl-&gt;ctx, depth);<br><span class="hljs-symbol">0654 </span><br><span class="hljs-symbol">0655 </span>    <span class="hljs-keyword">if</span> (cert-&gt;<span class="hljs-keyword">len</span> == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-symbol">0656 </span>        <span class="hljs-keyword">return</span> NGX_OK;<br><span class="hljs-symbol">0657 </span>    &#125;<br><span class="hljs-symbol">0658 </span><br><span class="hljs-symbol">0659 </span>    <span class="hljs-keyword">if</span> (ngx_conf_full_name(cf-&gt;cycle, cert, <span class="hljs-number">1</span>) != NGX_OK) &#123;<br><span class="hljs-symbol">0660 </span>        <span class="hljs-keyword">return</span> NGX_ERROR;<br><span class="hljs-symbol">0661 </span>    &#125;<br><span class="hljs-symbol">0662 </span><br><span class="hljs-symbol">0663 </span>    <span class="hljs-keyword">if</span> (SSL_CTX_load_verify_locations(ssl-&gt;ctx, (char *) cert-&gt;<span class="hljs-keyword">data</span>, NULL)<br><span class="hljs-symbol">0664 </span>        == <span class="hljs-number">0</span>)<br><span class="hljs-symbol">0665 </span>    &#123;<br><span class="hljs-symbol">0666 </span>        ngx_ssl_error(NGX_LOG_EMERG, ssl-&gt;<span class="hljs-keyword">log</span>, <span class="hljs-number">0</span>,<br><span class="hljs-symbol">0667 </span>                      <span class="hljs-string">&quot;SSL_CTX_load_verify_locations(\&quot;%s\&quot;) failed&quot;</span>,<br><span class="hljs-symbol">0668 </span>                      cert-&gt;<span class="hljs-keyword">data</span>);<br><span class="hljs-symbol">0669 </span>        <span class="hljs-keyword">return</span> NGX_ERROR;<br><span class="hljs-symbol">0670 </span>    &#125;<br><span class="hljs-symbol">0671 </span><br><span class="hljs-symbol">0672 </span>    /*<br><span class="hljs-symbol">0673 </span>     * SSL_CTX_load_verify_locations() may leave errors in the <span class="hljs-keyword">error</span> queue<br><span class="hljs-symbol">0674 </span>     * <span class="hljs-keyword">while</span> returning success<br><span class="hljs-symbol">0675 </span>     */<br><span class="hljs-symbol">0676 </span><br><span class="hljs-symbol">0677 </span>    ERR_clear_error();<br><span class="hljs-symbol">0678 </span><br><span class="hljs-symbol">0679 </span>    <span class="hljs-keyword">return</span> NGX_OK;<br><span class="hljs-symbol">0680 </span>&#125;<br><br></code></pre></td></tr></table></figure><p>Nginx SSL 模块的完整代码在<ahref="http://lxr.nginx.org/source/src/event/ngx_event_openssl.c">这里</a>能找到。</p><p>现在我们已经走到调用栈的一半了，并且走出了Nginx的世界。下一个函数调用是<code>SSL_CTX_load_verify_locations</code>，来自于OpenSSL。程序在这里程序打开了信任的验证文件，并且暂停。接下来将会读取文件（根据上面的<code>strace</code>输出）。</p><p>由于我最初的目的就是找出是谁调用了令人奇怪的<code>mmap</code>调用，很自然的下一个断点就是:</p><pre><code class="hljs">(gdb) b mmap</code></pre><p><code>b</code>是<code>break</code>的简写。<code>(gdb) c</code>将会继续程序的执行。程序暂停在了下一个断点：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><br>Breakpoint <span class="hljs-number">3</span>, mmap64 () <span class="hljs-meta">at</span> ../sysdeps/unix/<span class="hljs-keyword">syscall</span>-template<span class="hljs-number">.</span>S:<span class="hljs-number">81</span><br><span class="hljs-number">81</span>  ../sysdeps/unix/<span class="hljs-keyword">syscall</span>-template<span class="hljs-number">.</span>S: No such file <span class="hljs-keyword">or</span> directory.<br>(gdb) <span class="hljs-keyword">bt</span><br>#<span class="hljs-number">0</span>  mmap64 () <span class="hljs-meta">at</span> ../sysdeps/unix/<span class="hljs-keyword">syscall</span>-template<span class="hljs-number">.</span>S:<span class="hljs-number">81</span><br>#<span class="hljs-number">1</span>  <span class="hljs-number">0x00007ffff6a44ad2</span> <span class="hljs-keyword">in</span> sysmalloc (av=<span class="hljs-number">0x7ffff6d82760</span> &lt;main_arena&gt;, nb=<span class="hljs-number">48</span>) <span class="hljs-meta">at</span> malloc<span class="hljs-number">.</span>c:<span class="hljs-number">2495</span><br>#<span class="hljs-number">2</span>  _int_malloc (av=<span class="hljs-number">0x7ffff6d82760</span> &lt;main_arena&gt;, bytes=<span class="hljs-number">40</span>) <span class="hljs-meta">at</span> malloc<span class="hljs-number">.</span>c:<span class="hljs-number">3800</span><br>#<span class="hljs-number">3</span>  <span class="hljs-number">0x00007ffff6a466c0</span> <span class="hljs-keyword">in</span> __GI___libc_malloc (bytes=<span class="hljs-number">40</span>) <span class="hljs-meta">at</span> malloc<span class="hljs-number">.</span>c:<span class="hljs-number">2891</span><br>#<span class="hljs-number">4</span>  <span class="hljs-number">0x000000000057d829</span> <span class="hljs-keyword">in</span> default_malloc_ex (num=<span class="hljs-number">40</span>, file=<span class="hljs-number">0x6f630f</span> <span class="hljs-string">&quot;a_object.c&quot;</span>, line=<span class="hljs-number">350</span>) <span class="hljs-meta">at</span> mem<span class="hljs-number">.</span>c:<span class="hljs-number">79</span><br>#<span class="hljs-number">5</span>  <span class="hljs-number">0x000000000057deb9</span> <span class="hljs-keyword">in</span> CRYPTO_malloc (num=<span class="hljs-number">40</span>, file=<span class="hljs-number">0x6f630f</span> <span class="hljs-string">&quot;a_object.c&quot;</span>, line=<span class="hljs-number">350</span>) <span class="hljs-meta">at</span> mem<span class="hljs-number">.</span>c:<span class="hljs-number">346</span><br>&lt;internal OpenSSL function calls stripped for clarity&gt;<br>#<span class="hljs-number">30</span> <span class="hljs-number">0x000000000065e2f7</span> <span class="hljs-keyword">in</span> PEM_X509_INFO_read_bio (<span class="hljs-built_in">bp</span>=<span class="hljs-number">0x7ffff7f28c50</span>, sk=<span class="hljs-number">0x0</span>, cb=<span class="hljs-number">0x0</span>, u=<span class="hljs-number">0x0</span>) <span class="hljs-meta">at</span> pem_info<span class="hljs-number">.</span>c:<span class="hljs-number">248</span><br>#<span class="hljs-number">31</span> <span class="hljs-number">0x00000000005e8b22</span> <span class="hljs-keyword">in</span> X509_load_cert_crl_file (ctx=<span class="hljs-number">0x7ffff7f289e0</span>, file=<span class="hljs-number">0x7ffff7f20ce6</span> <span class="hljs-string">&quot;/etc/ssl/certs/ca-certificates.crt&quot;</span>, type=<span class="hljs-number">1</span>) <span class="hljs-meta">at</span> by_file<span class="hljs-number">.</span>c:<span class="hljs-number">256</span><br>#<span class="hljs-number">32</span> <span class="hljs-number">0x00000000005e8626</span> <span class="hljs-keyword">in</span> by_file_ctrl (ctx=<span class="hljs-number">0x7ffff7f289e0</span>, cmd=<span class="hljs-number">1</span>, argp=<span class="hljs-number">0x7ffff7f20ce6</span> <span class="hljs-string">&quot;/etc/ssl/certs/ca-certificates.crt&quot;</span>, argl=<span class="hljs-number">1</span>, <span class="hljs-keyword">ret</span>=<span class="hljs-number">0x0</span>) <span class="hljs-meta">at</span> by_file<span class="hljs-number">.</span>c:<span class="hljs-number">115</span><br>#<span class="hljs-number">33</span> <span class="hljs-number">0x00000000005e5747</span> <span class="hljs-keyword">in</span> X509_LOOKUP_ctrl (ctx=<span class="hljs-number">0x7ffff7f289e0</span>, cmd=<span class="hljs-number">1</span>, argc=<span class="hljs-number">0x7ffff7f20ce6</span> <span class="hljs-string">&quot;/etc/ssl/certs/ca-certificates.crt&quot;</span>, argl=<span class="hljs-number">1</span>, <span class="hljs-keyword">ret</span>=<span class="hljs-number">0x0</span>) <span class="hljs-meta">at</span> x509_lu<span class="hljs-number">.</span>c:<span class="hljs-number">120</span><br>#<span class="hljs-number">34</span> <span class="hljs-number">0x00000000005dd5c1</span> <span class="hljs-keyword">in</span> X509_STORE_load_locations (ctx=<span class="hljs-number">0x7ffff7f28750</span>, file=<span class="hljs-number">0x7ffff7f20ce6</span> <span class="hljs-string">&quot;/etc/ssl/certs/ca-certificates.crt&quot;</span>, path=<span class="hljs-number">0x0</span>) <span class="hljs-meta">at</span> x509_d2<span class="hljs-number">.</span>c:<span class="hljs-number">94</span><br>#<span class="hljs-number">35</span> <span class="hljs-number">0x0000000000546e22</span> <span class="hljs-keyword">in</span> SSL_CTX_load_verify_locations (ctx=<span class="hljs-number">0x7ffff7f27fd0</span>, CAfile=<span class="hljs-number">0x7ffff7f20ce6</span> <span class="hljs-string">&quot;/etc/ssl/certs/ca-certificates.crt&quot;</span>, CApath=<span class="hljs-number">0x0</span>) <span class="hljs-meta">at</span> ssl_lib<span class="hljs-number">.</span>c:<span class="hljs-number">3231</span><br>#<span class="hljs-number">36</span> <span class="hljs-number">0x0000000000477d94</span> <span class="hljs-keyword">in</span> ngx_ssl_trusted_certificate (cf=cf@entry=<span class="hljs-number">0x7fffffffe150</span>, ssl=<span class="hljs-number">0x7ffff7f27a78</span>, cert=cert@entry=<span class="hljs-number">0x7ffff7f22f20</span>, depth=&lt;optimized <span class="hljs-keyword">out</span>&gt;) <span class="hljs-meta">at</span> src/event/ngx_event_openssl<span class="hljs-number">.</span>c:<span class="hljs-number">687</span><br>#<span class="hljs-number">37</span> <span class="hljs-number">0x00000000004f0a1b</span> <span class="hljs-keyword">in</span> ngx_http_lua_set_ssl (llcf=<span class="hljs-number">0x7ffff7f22ef8</span>, cf=<span class="hljs-number">0x7fffffffe150</span>) <span class="hljs-meta">at</span> ../ngx_lua-<span class="hljs-number">0.10</span><span class="hljs-number">.7</span>/src/ngx_http_lua_module<span class="hljs-number">.</span>c:<span class="hljs-number">1240</span><br>#<span class="hljs-number">38</span> ngx_http_lua_merge_loc_conf (cf=<span class="hljs-number">0x7fffffffe150</span>, parent=<span class="hljs-number">0x7ffff7f15808</span>, child=<span class="hljs-number">0x7ffff7f22ef8</span>) <span class="hljs-meta">at</span> ../ngx_lua-<span class="hljs-number">0.10</span><span class="hljs-number">.7</span>/src/ngx_http_lua_module<span class="hljs-number">.</span>c:<span class="hljs-number">1158</span><br>#<span class="hljs-number">39</span> <span class="hljs-number">0x000000000047e2b1</span> <span class="hljs-keyword">in</span> ngx_http_merge_servers (cmcf=&lt;optimized <span class="hljs-keyword">out</span>&gt;, cmcf=&lt;optimized <span class="hljs-keyword">out</span>&gt;, ctx_index=&lt;optimized <span class="hljs-keyword">out</span>&gt;, module=&lt;optimized <span class="hljs-keyword">out</span>&gt;, cf=&lt;optimized <span class="hljs-keyword">out</span>&gt;) <span class="hljs-meta">at</span> src/http/ngx_http<span class="hljs-number">.</span>c:<span class="hljs-number">599</span><br>&lt;Nginx function calls stripped for clarity&gt;<br><br></code></pre></td></tr></table></figure><p>此刻我异常兴奋。我“发现”了一个OpenSSL内存泄露！带着异常兴奋的情绪，我开始阅读理解上个世纪90年代就开发的 OpenSSL 的<ahref="https://github.com/openssl/openssl/blob/master/crypto/x509/by_file.c#L2">代码</a>。如此高兴，接下来的几天几夜去理解这写函数并且试图找到我非常确定的函数中的内存泄露。看了许多给OpenSSL的内存泄露bug（尤其是和上面这个函数相关的）后，我信心大增，因此我有花了几天几夜去捉这个臭虫！</p><p>基本上这些函数做的事情是首先打开受信任的证书文件，分配缓冲（4096字节），从文件中读取 4KB内容到缓冲区，解密数据，转换成 OpenSSL 的内部表示，保存到给定的SSLcontext的<ahref="https://github.com/openssl/openssl/blob/75e314f2d573d4f984ff6a371be7a4966bf5f4c5/crypto/x509/by_file.c#L211">证书存储区</a>（这个属于一个location块上下文环境）。因此以后无论何时，在这个<code>location</code>块中，当Nginx需要验证SSL客户端证书的时候，都将会调用OpneSSL中的<code>SSL_get_verify_result</code>传递开始保存保存的 SSLcontext。接着那个函数将会使用已经加载的和内部初始化的受信任证书验证客户端。</p><p>这就是日日夜夜学习的那些所有的事情如何在一起工作的收获，但是没有发现一个bug。</p><p>也了解到<code>mmap</code>是被在<code>CRYPTO_malloc</code>触发的<code>malloc</code>调用的，<code>CRYPTO_malloc</code>是另一个OpenSSL函数，用来扩展证书存储大小，使其可以适应解密和内部初始化的证书数据。现在我已经知道究竟发生了什么，其不会释放所分配的内存，因为OpenSSL在这个进程生命周期中的后面可能会使用。</p><p><strong>但是这个主要的问题 ，当lua_ssl_trusted_certificate指令配置后，为什 么 Nginx消耗的内存增长如此之快，还是一个谜。</strong></p><p>从我手中掌握的已有数据来看是每个 location 块中的<code>mmap</code>导致了这个问题。现在我决定提出 Openresty/Nginx中的相关代码，用相同的 OpenSSL API 写一个独立C程序加载配置文件。</p><p>反复调用模拟多个 location 块（我这里是5000个）:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;openssl/ssl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read_cert</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span> ca_bundlestr[] = <span class="hljs-string">&quot;/etc/ssl/certs/ca-certificates.crt&quot;</span>;<br><br>        BIO               *outbio = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-type">int</span> ret;<br><br>        SSL_CTX *ctx;<br><br>        outbio  = <span class="hljs-built_in">BIO_new_fp</span>(stdout, BIO_NOCLOSE);<br><br>        <span class="hljs-built_in">SSL_library_init</span>();<br>        <span class="hljs-built_in">SSL_load_error_strings</span>();<br>        <span class="hljs-built_in">OpenSSL_add_all_algorithms</span>();<br><br>        ctx = <span class="hljs-built_in">SSL_CTX_new</span>(<span class="hljs-built_in">SSLv23_method</span>());<br><br>        <span class="hljs-built_in">SSL_CTX_set_mode</span>(ctx, SSL_MODE_RELEASE_BUFFERS);<br>        <span class="hljs-built_in">SSL_CTX_set_mode</span>(ctx, SSL_MODE_NO_AUTO_CHAIN);<br>        <span class="hljs-built_in">SSL_CTX_set_read_ahead</span>(ctx, <span class="hljs-number">1</span>);<br><br>        ret = <span class="hljs-built_in">SSL_CTX_load_verify_locations</span>(ctx, ca_bundlestr, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>)<br>                <span class="hljs-built_in">BIO_printf</span>(outbio, <span class="hljs-string">&quot;SSL_CTX_load_verify_locations failed&quot;</span>);<br><br>        <span class="hljs-built_in">BIO_free_all</span>(outbio);<br>        <span class="hljs-built_in">SSL_CTX_free</span>(ctx);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5000</span>; i++) &#123;<br>                <span class="hljs-built_in">read_cert</span>();<br>                <span class="hljs-comment">//malloc_trim(0);</span><br>        &#125;<br>        <span class="hljs-built_in">malloc_stats</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>如果我能解决这里的问题，我就能解决 Openresty/Nginx中的问题，由于这是等价于原问题的。但是猜猜发生了什么，<code>strace</code>的输出跟我预期的不同！</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs stylus">...<br><span class="hljs-function"><span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;fqaEQn6/Ip3Xep1fvj1KcExJW4C+FEaG&quot;</span>..., <span class="hljs-number">4096</span>)</span></span> = <span class="hljs-number">4096</span><br><span class="hljs-function"><span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;IYWxvemF0Yml6dG9u\nc2FnaSBLZnQuMR&quot;</span>..., <span class="hljs-number">4096</span>)</span></span> = <span class="hljs-number">4096</span><br><span class="hljs-function"><span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;nVz\naXR2YW55a2lhZG8xHjAcBgkqhkiG&quot;</span>..., <span class="hljs-number">4096</span>)</span></span> = <span class="hljs-number">4096</span><br><span class="hljs-function"><span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;A\nMIIBCgKCAQEAy0+zAJs9Nt350Ulqax&quot;</span>..., <span class="hljs-number">4096</span>)</span></span> = <span class="hljs-number">4096</span><br><span class="hljs-function"><span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;MRAwDgYDVQQHEwdDYXJhY2FzMRkwFwYD&quot;</span>..., <span class="hljs-number">4096</span>)</span></span> = <span class="hljs-number">4096</span><br><span class="hljs-function"><span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;OR1YqI0JDs3G3eicJlcZaLDQP9nL9bFq&quot;</span>..., <span class="hljs-number">4096</span>)</span></span> = <span class="hljs-number">4096</span><br><span class="hljs-function"><span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;E7zelaTfi5m+rJsziO+1ga8bxiJTyPbH&quot;</span>..., <span class="hljs-number">4096</span>)</span></span> = <span class="hljs-number">4096</span><br><span class="hljs-function"><span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;Xtdj182d6UajtLF8HVj71lODqV0D1VNk&quot;</span>..., <span class="hljs-number">4096</span>)</span></span> = <span class="hljs-number">4096</span><br><span class="hljs-function"><span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;AAOCAQ8AMIIBCgKCAQEAt49VcdKA3Xtp&quot;</span>..., <span class="hljs-number">4096</span>)</span></span> = <span class="hljs-number">4096</span><br><span class="hljs-function"><span class="hljs-title">brk</span><span class="hljs-params">(<span class="hljs-number">0</span>x1cfb000)</span></span>                          = <span class="hljs-number">0</span>x1cfb000<br><span class="hljs-function"><span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;396gwpEWoGQRS0S8Hvbn+mPeZqx2pHGj&quot;</span>..., <span class="hljs-number">4096</span>)</span></span> = <span class="hljs-number">4096</span><br><span class="hljs-function"><span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;QYwDwYDVR0T\nAQH/BAUwAwEB/zANBgkq&quot;</span>..., <span class="hljs-number">4096</span>)</span></span> = <span class="hljs-number">4096</span><br><span class="hljs-function"><span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;ETzsemQUHS\nv4ilf0X8rLiltTMMgsT7B&quot;</span>..., <span class="hljs-number">4096</span>)</span></span> = <span class="hljs-number">4096</span><br><span class="hljs-function"><span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;wVU3RhYXQgZGVyIE5lZGVybGFuZGVuMS&quot;</span>..., <span class="hljs-number">4096</span>)</span></span> = <span class="hljs-number">4096</span><br><span class="hljs-function"><span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;N/uLicFZ8WJ/X7NfZTD4p7dN\ndloedl4&quot;</span>..., <span class="hljs-number">4096</span>)</span></span> = <span class="hljs-number">4096</span><br><span class="hljs-function"><span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;fzDtgUx3M2FIk5xt/JxXrAaxrqTi3iSS&quot;</span>..., <span class="hljs-number">4096</span>)</span></span> = <span class="hljs-number">4096</span><br><span class="hljs-function"><span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;sO+wmETRIjfaAKxojAuuK\nHDp2KntWFh&quot;</span>..., <span class="hljs-number">4096</span>)</span></span> = <span class="hljs-number">4096</span><br><span class="hljs-function"><span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;8z+uJGaYRo2aWNkkijzb2GShROfyQcsi&quot;</span>..., <span class="hljs-number">4096</span>)</span></span> = <span class="hljs-number">4096</span><br><span class="hljs-function"><span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;CydAXFJy3SuCvkychVSa1ZC+N\n8f+mQA&quot;</span>..., <span class="hljs-number">4096</span>)</span></span> = <span class="hljs-number">4096</span><br>...<br><br></code></pre></td></tr></table></figure><p><code>brk</code> 调用后面没有 <code>mmap</code>调用，内存消耗也没有按照超出预期的增长！</p><p>好吧，我现在非常恼火也想放弃。但是我我的好奇心没让我放弃。我决定了解更多的关于内存分配如何工作的。</p><p>通常来说当程序中申请更多的内存的时候会调用glibc中的<code>malloc</code>(或者改版)。对于用户空间的程序，<code>glibc</code>抽象了很多内存管理的工作、提供了一个使用虚拟内存的API 。</p><p>默认情况下，当一个程序调用<code>malloc</code>的申请更多的堆上内存时候，将会使用<code>brk</code>申请需要的内存空间。如果堆上有洞，brk将不能正常工作。</p><p>现在假设你有1G的堆上内存空闲空间。在上面直接创建一个洞，可以使用mmap指定具体地址A这种方式，指定内存空间大小。这样mmap就会从堆上的内存地址A开始，申请指定大小的内存空间。</p><p>但是因为程序中断点还在堆开始的地方,这时如果使用<code>sbrk</code>函数申请的B&gt; A字节大小的内存空间，此次请求将会失败，因为<code>brk</code>尝试申请的一部分内存区域已经被分配（洞）。这时候<code>malloc</code>会使用<code>mmap</code>代替申请内存空间。</p><p>因为<code>mmap</code>调用代价非常高，为了降低其调用次数，malloc 申请1M内存即使申请分配的内存不足1M。<ahref="https://code.woboq.org/userspace/glibc/malloc/malloc.c.html#406">https://code.woboq.org/userspace/glibc/malloc/malloc.c.html#406</a>注释文档中也有记载。你会发现上面的输出日志中，令人奇怪的<code>mmap</code>调用申请1048576字节内存，正好是1M--当brk失败后，<code>malloc</code>使用此默认值去调用mmap。</p><p>高潮来了！！！把这些线索放一起。一个明显的猜想是<strong><code>brk</code> 调用后面是mmap调用在Openresty上下文环境中，但是在独立的c中却不是，因为 Openresty 在配置文件加载之前在某个地方创建了一个洞。</strong></p><p>这不难验证，使用grep 命令在PRs,issus和<ahref="https://github.com/openresty/lua-nginx-module">lua-nginx-module</a>源码中查找。最后发现Luajit需要工作在低地址空间获得更高的效率，这是为什么<code>lua-nginx-module</code>那群家伙决定在程序开始执行之前执行下面这段代码：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">if</span> (<span class="hljs-built_in">sbrk</span>(<span class="hljs-number">0</span>) &lt; (void *) <span class="hljs-number">0</span>x40000000LL) &#123;<br>    <span class="hljs-selector-tag">mmap</span>(<span class="hljs-built_in">ngx_align_ptr</span>(<span class="hljs-built_in">sbrk</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">getpagesize</span>()), <span class="hljs-number">1</span>, PROT_READ,<br>         MAP_FIXED|MAP_PRIVATE|MAP_ANON, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>完整代码可以在<ahref="https://github.com/openresty/lua-nginx-module/blob/37e5362088bd659e318aae568b268719bd0d6707/src/ngx_http_lua_module.c#L1291">仓库</a>中找到。现在我还没太弄明白这段代码是如何让luajit拥有低地址空间的（如果有人能在评论里面解释清楚，我将非常感激），但是这确实是导致这个问题的代码。</p><p>为了证明，我拷贝出来这段代码到我的 独立 C 程序中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;openssl/ssl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ngx_align_ptr(p, a) \</span><br><span class="hljs-meta">        (u_char *) (((uintptr_t) (p) + ((uintptr_t) a - 1)) &amp; ~((uintptr_t) a - 1))</span><br><br>ngx_http_lua_limit_data_segment(<span class="hljs-type">void</span>) &#123;<br>        <span class="hljs-keyword">if</span> (sbrk(<span class="hljs-number">0</span>) &lt; (<span class="hljs-type">void</span> *) <span class="hljs-number">0x40000000L</span>L) &#123;<br>                mmap(ngx_align_ptr(sbrk(<span class="hljs-number">0</span>), getpagesize()), <span class="hljs-number">1</span>, PROT_READ,<br>                                MAP_FIXED|MAP_PRIVATE|MAP_ANON, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>        &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">read_cert</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span> ca_bundlestr[] = <span class="hljs-string">&quot;/etc/ssl/certs/ca-certificates.crt&quot;</span>;<br><br>        BIO               *outbio = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-type">int</span> ret;<br><br>        SSL_CTX *ctx;<br><br>        outbio  = BIO_new_fp(<span class="hljs-built_in">stdout</span>, BIO_NOCLOSE);<br><br>        SSL_library_init();<br>        SSL_load_error_strings();<br>        OpenSSL_add_all_algorithms();<br><br>        ctx = SSL_CTX_new(SSLv23_method());<br><br>        SSL_CTX_set_mode(ctx, SSL_MODE_RELEASE_BUFFERS);<br>        SSL_CTX_set_mode(ctx, SSL_MODE_NO_AUTO_CHAIN);<br>        SSL_CTX_set_read_ahead(ctx, <span class="hljs-number">1</span>);<br><br>        ret = SSL_CTX_load_verify_locations(ctx, ca_bundlestr, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>)<br>                BIO_printf(outbio, <span class="hljs-string">&quot;SSL_CTX_load_verify_locations failed&quot;</span>);<br><br>        BIO_free_all(outbio);<br>        SSL_CTX_free(ctx);<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>        ngx_http_lua_limit_data_segment();<br>        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5000</span>; i++) &#123;<br>                read_cert();<br>                <span class="hljs-comment">//malloc_trim(0);</span><br>        &#125;<br>        malloc_stats();<br>        usleep(<span class="hljs-number">1000</span> * <span class="hljs-number">60</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>当我编译运行这段程序的时候，通过<code>strace</code>我能看到和Openresty环境中相同的行为。为了更进一步的确认，我编辑Opneresty的源码、注释掉<code>ngx_http_lua_limit_data_segment</code>、重新编译运行，内存增长的现象没有发生。</p><p>搞定！！！</p><p>上面就是我这次的收获。根据这次结果，我提交了一个<ahref="https://github.com/openresty/lua-nginx-module/issues/1005">issue</a>。当你有很多的location块的时候，这真的会成为一个问题。例如加入你有一个很大的 Nginx配置文件，里面有超过4k 个location块，然后你加入了<code>lua_ssl_trusted_certificate</code>指令到 mian配置块，然后当你 reload/restart/start Nginx的时候，内存消耗将会增长到~4G(4k * 1MB)并且不会释放。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Nginx</tag>
      
      <tag>翻译</tag>
      
      <tag>troubleshooting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>systemtap 安装 总结</title>
    <link href="/2017/02/22/systemstap-install.html"/>
    <url>/2017/02/22/systemstap-install.html</url>
    
    <content type="html"><![CDATA[<h2 id="systemtap-是什么">systemtap 是什么</h2><p>systemtap是一个动态调试工具，春哥的一句话形容的很好，是一种线上活体检测技术。对于动态追踪技术的简述，参看<ahref="https://riboseyim.github.io/2016/11/26/DTrace/"title="动态追踪技术：Linux喜迎DTrace">睿哥的文章</a>，写的真好，不再赘述。</p><h2 id="安装">安装</h2><p>如果从未接触过，安装还是挺头疼的。我这里做了一个<ahref="https://github.com/noname007/script/blob/master/systemtap/Makefile">Makefile</a>，执行一条命令，喝杯水，等一会可能就装好了:) 。分别在<code>fedora 25</code>跟<code>ubuntu 16.04</code>测试成功。</p><pre><code class="hljs">pr is always welcome</code></pre><p>记得把这个文件夹都下下来，里面有个C文件是用来测试对用户态的程序追踪能否进行。先前一直用官方Beginner手册的例子来测试，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">stap -d /bin/ls --ldd \<br>-e &#x27;probe process(&quot;ls&quot;).function(&quot;xmalloc&quot;) &#123;print_usyms(ubacktrace())&#125;&#x27; \<br>-c &quot;ls /&quot;<br></code></pre></td></tr></table></figure><p>经过一番排查，参考邮件列表讨论https://sourceware.org/ml/systemtap/2012-q3/msg00226.html 初步推测样例有问题，并不能同通用。应该是有的系统把ls的符号信息干掉了(ubuntu)，有的没有（fedora）。</p><p>所以自己重新写了一个 用户态的程序测试。</p><p>ubuntu 16.04 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">make deb-systemtap<br>sudo su root<br>source /etc/profile.d/devops.sh <br>make systemtap-check<br></code></pre></td></tr></table></figure></p><p>fedora 25</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">make fedora-systemtap<br>sudo su root<br>make systemtap-check<br></code></pre></td></tr></table></figure><p>如果 ubuntu 系统，测试过程中出现些类型找不到，那么需要<code>安装内核相关的调试信息</code>请参考下面的内容进行安装。</p><p>如果选用fedora系统，你会发现这是最省心的安装系统，可能也是官方支持最好的。</p><h2 id="以前总结的">2017.04.03 以前总结的</h2><h3 id="centos-系列">centos 系列</h3><p>参考官方安装教程:</p><p><ahref="https://sourceware.org/systemtap/SystemTap_Beginners_Guide/using-systemtap.html#using-setup"title="using-systemtap">https://sourceware.org/systemtap/SystemTap_Beginners_Guide/using-systemtap.html#using-setup</a></p><p>如果是最近的<code>Fedora</code>版本系统也可以参考官方这里的安装方式：</p><p><ahref="https://sourceware.org/systemtap/getinvolved.html">https://sourceware.org/systemtap/getinvolved.html</a></p><h3 id="ubuntu的安装方式">ubuntu的安装方式</h3><p>apt-get 方式</p><pre><code class="hljs">sudo apt-get install systemstap</code></pre><h4 id="安装内核相关的调试信息">安装内核相关的调试信息</h4><p>发行版的内核调试信息镜像可在<ahref="http://ddebs.ubuntu.com/pool/main/l/linux/?C=M;O=D"title="kerneldebug_image">http://ddebs.ubuntu.com/pool/main/l/linux/?C=M;O=D</a>这里下载。</p><p>一定要找对应的内核版本和系统架构的，否则可能导致<ahref="http://www.hi-roy.com/2016/07/27/CentOS7%E5%AE%89%E8%A3%85systemtap/"title="CentOS7安装systemtap">错误</a>。如果不确定内核版本和系统架构，可以使用uname命令可以查看内核版本(<code>uname -r</code>)、系统架构(<code>uname -m</code>)。下载对应的镜像然后使用dpkg 进行安装：</p><pre><code class="hljs">dpkg -i linux-image-4.4.0-62-generic-dbgsym_4.4.0-62.83_amd64.ddeb</code></pre><h3 id="tips">tips</h3><p>原理不熟悉的可以参考 <ahref="http://www.cnblogs.com/hazir/p/systemtap_introduction.html"title="内核探测工具systemtap简介">"内核探测工具systemtap简介"</a></p><p>安装完后一定要用下面的两句命令测试一下，安装是否成功。两个都要测试一下，第一个只要systemtap安装成功，就可以成功运行，第二个必须是内核调试镜像安装成功后才能成功运行</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada"># stap -ve <span class="hljs-symbol">&#x27;probe</span> <span class="hljs-keyword">begin</span> &#123; log(<span class="hljs-string">&quot;hello world&quot;</span>) <span class="hljs-keyword">exit</span> () &#125;&#x27;<br># stap -c df -e <span class="hljs-symbol">&#x27;probe</span> syscall.* &#123; <span class="hljs-keyword">if</span> (target()==pid()) log(name.<span class="hljs-string">&quot; &quot;</span>.argstr) &#125;&#x27;<br></code></pre></td></tr></table></figure><p>其他的一下参考文章</p><ul><li><ahref="http://blog.jeffli.me/blog/2014/10/10/install-systemtap-in-ubuntu-14-dot-04/">InstallSystemTap in Ubuntu 14.04</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>systemtap</tag>
      
      <tag>trace</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符数组与字符串指针区别</title>
    <link href="/2017/02/18/strptr-strarr-diff.html"/>
    <url>/2017/02/18/strptr-strarr-diff.html</url>
    
    <content type="html"><![CDATA[<ul><li>目录 {:toc}</li></ul><h2 id="先来意淫一下">先来意淫一下</h2><p>群里大神分享了一个<code>Stack Overflow</code>上<code>字符数组与字符串指针数组的差别</code>的问答，感觉回答中说的都不太到我的心坎里，故也来凑下热闹。以下面代码为样例，从以下两个层次来说：</p><ul><li>类型</li><li>内存分配</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> * argv[])</span><br>&#123;<br><br>    <span class="hljs-type">char</span> * p = <span class="hljs-string">&quot;good morning&quot;</span>;<br>    <span class="hljs-type">char</span> h[] = <span class="hljs-string">&quot;hello world&quot;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,p);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,h);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">char * p = &quot;good morning&quot;;char h[] = &quot;hello world&quot;;</code></pre><h3 id="类型语义">类型（语义）</h3><p>从c语言种对两种类型使用时的感受来说，存在<code>char h[]</code>&lt;==&gt;<code>char * const h</code>这种等价关系。对于程序员来说，<code>使用</code>时候的差别也主要体现在<code>char * const h</code> 中的多出的<code>const</code>的差别。</p><h3 id="内存分配语义的实现">内存分配（语义的实现）</h3><p>两种类型表示的语义不同，其值所占的底层内存位置、生存时间也就不一样。</p><p>函数在底层实现的时候放在栈上的，运行结束的时候，栈会被回收，函数局部变量的值所占用的内存编译器会直接回收。</p><p>指针指向的内容表示指针指向的内存由程序员管理申请、释放等工作。</p><p><code>故指针的值在栈上，字符字面量填充的数组也在栈上，指针指向的内容分配在堆上。</code></p><p>另外指针在底层指令上会<code>多一次访存</code>。</p><h2 id="看看到底汇编长啥样">看看到底汇编长啥样</h2><h3 id="总结">总结</h3><pre><code class="hljs">总结据说该放最后，但我还是把它提上来了。：）</code></pre><p>原先我还担心高级别的优化，会把我上面的代码，堆上的也优化到栈上，故编译了两个优化级别的，其实并没有。反而都是验证了我上面的两个想法。</p><p>核心代码如下</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mel"><br><span class="hljs-comment">//预先分配一个空闲栈，32字节</span><br>subl$32, %esp<br><br><span class="hljs-comment">// char * p 这个局部变量 </span><br>movl$LC0, (%esp) <br><br><span class="hljs-comment">//char h[] 这个局部变量，下面这几个魔数就是 hello world </span><br>movl$1819043176, <span class="hljs-number">20</span>(%esp)<br>movl$1870078063, <span class="hljs-number">24</span>(%esp)<br>movl$6581362, <span class="hljs-number">28</span>(%esp)<br><br><span class="hljs-comment">//意外之获，c 中 printf 格式有换行,底层调用就是_puts，去掉换行就变成了另外一个：）</span><br><span class="hljs-comment">//_puts输出 栈顶存放的指针 所指向的字符串</span><br>call_puts<br><br><span class="hljs-comment">//-----</span><br>leal<span class="hljs-number">20</span>(%esp), %eax<br>movl%eax, (%esp)<br>call_puts<br><br></code></pre></td></tr></table></figure><h3 id="环境信息">环境信息</h3><ul><li><p>系统环境：<code>window + MinGw gcc 5.3.0</code></p></li><li><p>编译命令: <code>gcc -m32 -S -O0 Untitled1.c</code></p></li></ul><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">$ gcc</span> <span class="hljs-literal">-</span><span class="hljs-comment">v</span><br><span class="hljs-comment">Using built</span><span class="hljs-literal">-</span><span class="hljs-comment">in specs</span><span class="hljs-string">.</span><br><span class="hljs-comment">COLLECT_GCC=C:\MinGW\bin\gcc</span><span class="hljs-string">.</span><span class="hljs-comment">exe</span><br><span class="hljs-comment">COLLECT_LTO_WRAPPER=c:/mingw/bin/</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-comment">/libexec/gcc/mingw32/5</span><span class="hljs-string">.</span><span class="hljs-comment">3</span><span class="hljs-string">.</span><span class="hljs-comment">0/lto</span><span class="hljs-literal">-</span><span class="hljs-comment">wrapper</span><span class="hljs-string">.</span><span class="hljs-comment">exe</span><br><span class="hljs-comment">Target: mingw32</span><br><span class="hljs-comment">Configured with:</span> <span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-comment">/src/gcc</span><span class="hljs-literal">-</span><span class="hljs-comment">5</span><span class="hljs-string">.</span><span class="hljs-comment">3</span><span class="hljs-string">.</span><span class="hljs-comment">0/configure</span> <span class="hljs-literal">--</span><span class="hljs-comment">build=x86_64</span><span class="hljs-literal">-</span><span class="hljs-comment">pc</span><span class="hljs-literal">-</span><span class="hljs-comment">linux</span><span class="hljs-literal">-</span><span class="hljs-comment">gnu</span> <span class="hljs-literal">--</span><span class="hljs-comment">host=mingw32</span> <span class="hljs-literal">--</span><span class="hljs-comment">prefix=/mingw</span> <span class="hljs-literal">--</span><span class="hljs-comment">disable</span><span class="hljs-literal">-</span><span class="hljs-comment">win32</span><span class="hljs-literal">-</span><span class="hljs-comment">registry</span> <span class="hljs-literal">--</span><span class="hljs-comment">target=mingw32</span> <span class="hljs-literal">--</span><span class="hljs-comment">with</span><span class="hljs-literal">-</span><span class="hljs-comment">arch=i586</span> <span class="hljs-literal">--</span><span class="hljs-comment">enable</span><span class="hljs-literal">-</span><span class="hljs-comment">languages=c</span><span class="hljs-string">,</span><span class="hljs-comment">c</span><span class="hljs-literal">++</span><span class="hljs-string">,</span><span class="hljs-comment">objc</span><span class="hljs-string">,</span><span class="hljs-comment">obj</span><span class="hljs-literal">-</span><span class="hljs-comment">c</span><span class="hljs-literal">++</span><span class="hljs-string">,</span><span class="hljs-comment">fortran</span><span class="hljs-string">,</span><span class="hljs-comment">ada</span> <span class="hljs-literal">--</span><span class="hljs-comment">enable</span><span class="hljs-literal">-</span><span class="hljs-comment">static</span> <span class="hljs-literal">--</span><span class="hljs-comment">enable</span><span class="hljs-literal">-</span><span class="hljs-comment">shared</span> <span class="hljs-literal">--</span><span class="hljs-comment">enable</span><span class="hljs-literal">-</span><span class="hljs-comment">threads</span> <span class="hljs-literal">--</span><span class="hljs-comment">with</span><span class="hljs-literal">-</span><span class="hljs-comment">dwarf2</span> <span class="hljs-literal">--</span><span class="hljs-comment">disable</span><span class="hljs-literal">-</span><span class="hljs-comment">sjlj</span><span class="hljs-literal">-</span><span class="hljs-comment">exceptions</span> <span class="hljs-literal">--</span><span class="hljs-comment">enable</span><span class="hljs-literal">-</span><span class="hljs-comment">version</span><span class="hljs-literal">-</span><span class="hljs-comment">specific</span><span class="hljs-literal">-</span><span class="hljs-comment">runtime</span><span class="hljs-literal">-</span><span class="hljs-comment">libs</span> <span class="hljs-literal">--</span><span class="hljs-comment">with</span><span class="hljs-literal">-</span><span class="hljs-comment">libintl</span><span class="hljs-literal">-</span><span class="hljs-comment">prefix=/mingw</span> <span class="hljs-literal">--</span><span class="hljs-comment">enable</span><span class="hljs-literal">-</span><span class="hljs-comment">libstdcxx</span><span class="hljs-literal">-</span><span class="hljs-comment">debug</span> <span class="hljs-literal">--</span><span class="hljs-comment">with</span><span class="hljs-literal">-</span><span class="hljs-comment">tune=generic</span> <span class="hljs-literal">--</span><span class="hljs-comment">enable</span><span class="hljs-literal">-</span><span class="hljs-comment">libgomp</span> <span class="hljs-literal">--</span><span class="hljs-comment">disable</span><span class="hljs-literal">-</span><span class="hljs-comment">libvtv</span> <span class="hljs-literal">--</span><span class="hljs-comment">enable</span><span class="hljs-literal">-</span><span class="hljs-comment">nls : (reconfigured)</span> <span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-comment">/src/gcc</span><span class="hljs-literal">-</span><span class="hljs-comment">5</span><span class="hljs-string">.</span><span class="hljs-comment">3</span><span class="hljs-string">.</span><span class="hljs-comment">0/configure</span> <span class="hljs-literal">--</span><span class="hljs-comment">build=x86_64</span><span class="hljs-literal">-</span><span class="hljs-comment">pc</span><span class="hljs-literal">-</span><span class="hljs-comment">linux</span><span class="hljs-literal">-</span><span class="hljs-comment">gnu</span> <span class="hljs-literal">--</span><span class="hljs-comment">host=mingw32</span> <span class="hljs-literal">--</span><span class="hljs-comment">prefix=/mingw</span> <span class="hljs-literal">--</span><span class="hljs-comment">disable</span><span class="hljs-literal">-</span><span class="hljs-comment">win32</span><span class="hljs-literal">-</span><span class="hljs-comment">registry</span> <span class="hljs-literal">--</span><span class="hljs-comment">target=mingw32</span> <span class="hljs-literal">--</span><span class="hljs-comment">with</span><span class="hljs-literal">-</span><span class="hljs-comment">arch=i586</span> <span class="hljs-literal">--</span><span class="hljs-comment">enable</span><span class="hljs-literal">-</span><span class="hljs-comment">languages=c</span><span class="hljs-string">,</span><span class="hljs-comment">c</span><span class="hljs-literal">++</span><span class="hljs-string">,</span><span class="hljs-comment">objc</span><span class="hljs-string">,</span><span class="hljs-comment">obj</span><span class="hljs-literal">-</span><span class="hljs-comment">c</span><span class="hljs-literal">++</span><span class="hljs-string">,</span><span class="hljs-comment">fortran</span><span class="hljs-string">,</span><span class="hljs-comment">ada</span> <span class="hljs-literal">--</span><span class="hljs-comment">enable</span><span class="hljs-literal">-</span><span class="hljs-comment">static</span> <span class="hljs-literal">--</span><span class="hljs-comment">enable</span><span class="hljs-literal">-</span><span class="hljs-comment">shared</span> <span class="hljs-literal">--</span><span class="hljs-comment">enable</span><span class="hljs-literal">-</span><span class="hljs-comment">threads</span> <span class="hljs-literal">--</span><span class="hljs-comment">with</span><span class="hljs-literal">-</span><span class="hljs-comment">dwarf2</span> <span class="hljs-literal">--</span><span class="hljs-comment">disable</span><span class="hljs-literal">-</span><span class="hljs-comment">sjlj</span><span class="hljs-literal">-</span><span class="hljs-comment">exceptions</span> <span class="hljs-literal">--</span><span class="hljs-comment">enable</span><span class="hljs-literal">-</span><span class="hljs-comment">version</span><span class="hljs-literal">-</span><span class="hljs-comment">specific</span><span class="hljs-literal">-</span><span class="hljs-comment">runtime</span><span class="hljs-literal">-</span><span class="hljs-comment">libs</span> <span class="hljs-literal">--</span><span class="hljs-comment">with</span><span class="hljs-literal">-</span><span class="hljs-comment">libiconv</span><span class="hljs-literal">-</span><span class="hljs-comment">prefix=/mingw</span> <span class="hljs-literal">--</span><span class="hljs-comment">with</span><span class="hljs-literal">-</span><span class="hljs-comment">libintl</span><span class="hljs-literal">-</span><span class="hljs-comment">prefix=/mingw</span> <span class="hljs-literal">--</span><span class="hljs-comment">enable</span><span class="hljs-literal">-</span><span class="hljs-comment">libstdcxx</span><span class="hljs-literal">-</span><span class="hljs-comment">debug</span> <span class="hljs-literal">--</span><span class="hljs-comment">with</span><span class="hljs-literal">-</span><span class="hljs-comment">tune=generic</span> <span class="hljs-literal">--</span><span class="hljs-comment">enable</span><span class="hljs-literal">-</span><span class="hljs-comment">libgomp</span> <span class="hljs-literal">--</span><span class="hljs-comment">disable</span><span class="hljs-literal">-</span><span class="hljs-comment">libvtv</span> <span class="hljs-literal">--</span><span class="hljs-comment">enable</span><span class="hljs-literal">-</span><span class="hljs-comment">nls</span><br><span class="hljs-comment">Thread model: win32</span><br><span class="hljs-comment">gcc version 5</span><span class="hljs-string">.</span><span class="hljs-comment">3</span><span class="hljs-string">.</span><span class="hljs-comment">0 (GCC)</span><br><br></code></pre></td></tr></table></figure><h3 id="二级优化--o2">二级优化 -O2</h3><pre><code class="hljs">gcc -m32 -S -O2 Untitled1.c   -o 2.s</code></pre><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><br><span class="hljs-string">.file</span><span class="hljs-string">&quot;Untitled1.c&quot;</span><br><span class="hljs-string">.def</span>___main;<span class="hljs-string">.scl</span>2;<span class="hljs-string">.type</span>32;<span class="hljs-string">.endef</span><br><span class="hljs-string">.section</span> <span class="hljs-string">.rdata</span>,<span class="hljs-string">&quot;dr&quot;</span><br>LC0:<br><span class="hljs-string">.ascii</span> <span class="hljs-string">&quot;good morning\0&quot;</span><br><span class="hljs-string">.section</span><span class="hljs-string">.text.unlikely</span>,<span class="hljs-string">&quot;x&quot;</span><br>LCOLDB1:<br><span class="hljs-string">.section</span><span class="hljs-string">.text.startup</span>,<span class="hljs-string">&quot;x&quot;</span><br>LHOTB1:<br><span class="hljs-string">.p2align</span> 4,,15<br><span class="hljs-string">.globl</span>_main<br><span class="hljs-string">.def</span>_main;<span class="hljs-string">.scl</span>2;<span class="hljs-string">.type</span>32;<span class="hljs-string">.endef</span><br>_main:<br>LFB21:<br><span class="hljs-string">.cfi_startproc</span><br>pushl%ebp<br><span class="hljs-string">.cfi_def_cfa_offset</span> 8<br><span class="hljs-string">.cfi_offset</span> 5, -8<br>movl%esp, %ebp<br><span class="hljs-string">.cfi_def_cfa_register</span> 5<br>andl$-16, %esp<br>subl$32, %esp<br>call___main<br>movl$LC0, <span class="hljs-params">(%esp)</span><br>movl$1819043176, 20<span class="hljs-params">(%esp)</span><br>movl$1870078063, 24<span class="hljs-params">(%esp)</span><br>movl$6581362, 28<span class="hljs-params">(%esp)</span><br>call_puts<br>leal20<span class="hljs-params">(%esp)</span>, %eax<br>movl%eax, <span class="hljs-params">(%esp)</span><br>call_puts<br>xorl%eax, %eax<br>leave<br><span class="hljs-string">.cfi_restore</span> 5<br><span class="hljs-string">.cfi_def_cfa</span> 4, 4<br>ret<br><span class="hljs-string">.cfi_endproc</span><br>LFE21:<br><span class="hljs-string">.section</span><span class="hljs-string">.text.unlikely</span>,<span class="hljs-string">&quot;x&quot;</span><br>LCOLDE1:<br><span class="hljs-string">.section</span><span class="hljs-string">.text.startup</span>,<span class="hljs-string">&quot;x&quot;</span><br>LHOTE1:<br><span class="hljs-string">.ident</span><span class="hljs-string">&quot;GCC: (GNU) 5.3.0&quot;</span><br><span class="hljs-string">.def</span>_puts;<span class="hljs-string">.scl</span>2;<span class="hljs-string">.type</span>32;<span class="hljs-string">.endef</span><br></code></pre></td></tr></table></figure><h3 id="未优化--o0">未优化 -O0</h3><pre><code class="hljs">gcc -m32 -S -O0 Untitled1.c   -o 2.s</code></pre><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs mel"><br>.<span class="hljs-keyword">file</span><span class="hljs-string">&quot;Untitled1.c&quot;</span><br>.def___main;.scl<span class="hljs-number">2</span>;.type<span class="hljs-number">32</span>;.endef<br>.section .rdata,<span class="hljs-string">&quot;dr&quot;</span><br>LC0:<br>.ascii <span class="hljs-string">&quot;good morning\0&quot;</span><br>.<span class="hljs-keyword">text</span><br>.globl_main<br>.def_main;.scl<span class="hljs-number">2</span>;.type<span class="hljs-number">32</span>;.endef<br>_main:<br>LFB12:<br>.cfi_startproc<br>pushl%ebp<br>.cfi_def_cfa_offset <span class="hljs-number">8</span><br>.cfi_offset <span class="hljs-number">5</span>, <span class="hljs-number">-8</span><br>movl%esp, %ebp<br>.cfi_def_cfa_register <span class="hljs-number">5</span><br>andl$-<span class="hljs-number">16</span>, %esp<br>subl$32, %esp<br>call___main<br>movl$LC0, <span class="hljs-number">28</span>(%esp)<br>movl$1819043176, <span class="hljs-number">16</span>(%esp)<br>movl$1870078063, <span class="hljs-number">20</span>(%esp)<br>movl$6581362, <span class="hljs-number">24</span>(%esp)<br>movl<span class="hljs-number">28</span>(%esp), %eax<br>movl%eax, (%esp)<br>call_puts<br>leal<span class="hljs-number">16</span>(%esp), %eax<br>movl%eax, (%esp)<br>call_puts<br>movl$0, %eax<br>leave<br>.cfi_restore <span class="hljs-number">5</span><br>.cfi_def_cfa <span class="hljs-number">4</span>, <span class="hljs-number">4</span><br>ret<br>.cfi_endproc<br>LFE12:<br>.ident<span class="hljs-string">&quot;GCC: (GNU) 5.3.0&quot;</span><br>.def_puts;.scl<span class="hljs-number">2</span>;.type<span class="hljs-number">32</span>;.endef<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wrk 使用</title>
    <link href="/2016/12/19/wrk.html"/>
    <url>/2016/12/19/wrk.html</url>
    
    <content type="html"><![CDATA[<h2 id="what">what</h2><p>wrk的实现使用了多线程和事件机制，使其在一台多核的cpu上也能跑出很好的测试效果。在请求的生成，响应的处理，自定义测试报告的生成的时候，能嵌入lua脚本（luajit）做一些操作，比如，当使用POST传递数据的时候就需要用到lua脚本将数据填入。</p><h2 id="usage">usage</h2><p>可以使用的参数不多，但是足以完成需求。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br>$ ./wrk<br>Usage: wrk &lt;options&gt; &lt;url&gt;<br>  Options:<br>    -c, --connections &lt;N&gt;  Connections to keep open<br>    -d, --duration    &lt;T&gt;  Duration of <span class="hljs-built_in">test</span><br>    -t, --threads     &lt;N&gt;  Number of threads to use<br><br>    -s, --script      &lt;S&gt;  Load Lua script file<br>    -H, --header      &lt;H&gt;  Add header to request<br>        --latency          Print latency statistics<br>        --<span class="hljs-built_in">timeout</span>     &lt;T&gt;  Socket/request <span class="hljs-built_in">timeout</span><br>    -v, --version          Print version details<br><br>  Numeric arguments may include a SI unit (1k, 1M, 1G)<br>  Time arguments may include a <span class="hljs-keyword">time</span> unit (2s, 2m, 2h)<br></code></pre></td></tr></table></figure><pre><code class="hljs">wrk -t12 -c400 -d30s http://127.0.0.1:8080/index.html</code></pre><p>这个例子表示，<code>用12 个线程 保持打开400个连接，持续30s</code></p><h2 id="docker">docker</h2><p>如果因为各种原因无法编译，可以尝试一下docker版本的。首先是你的先装个docker,:)。</p><pre><code class="hljs">docker run --rm williamyeh/wrk -t2 -c5 -d5s -H &#39;Host: example.com&#39; --timeout 2s http://$APP1_PRIVATE_IP:3000/</code></pre><hr />]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>软件工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Window 10 中安装 Ubuntu</title>
    <link href="/2016/12/15/unbuntu-in-win10.html"/>
    <url>/2016/12/15/unbuntu-in-win10.html</url>
    
    <content type="html"><![CDATA[<ul><li>目录 {:toc}</li></ul><h2 id="启用-ubuntu-subsystem">启用 ubuntu subsystem</h2><h4 id="在控制面板中启用linux子系统">在控制面板中启用linux子系统</h4><ul><li>不要忘记重启，:) <img src="/assets/1xa3.png" /></li></ul><h4 id="打开bash">打开bash</h4><p><img src="/assets/1xax.png" /></p><h3 id="安装">安装</h3><p><img src="/assets/1xx.png" /></p><p>后面两步可以在window cmd命令行下执行下面一条命令自动完成</p><pre><code class="hljs">lxrun /install /y</code></pre>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>这不是一篇 gdb 如何使用的文章</title>
    <link href="/2016/12/11/gdb.html"/>
    <url>/2016/12/11/gdb.html</url>
    
    <content type="html"><![CDATA[<ul><li>目录 {:toc}</li></ul><h2id="当说到调试器ide的时候我们期望这个家伙能带来什么">当说到调试器、ide的时候我们期望这个家伙能带来什么</h2><ul><li>方便修改程序依赖的一些上下文、如环境变量、查找路径</li><li>方便源码阅读，如上下文源码、函数、宏、类、实现和结构，变量的类型、值、</li><li>方便查看修改运行时态信息，变量信息查看</li><li>方便跟踪、断点、单步</li></ul><p>大概说了什么呢，我们希望它此时能是一个全家桶、起到一“个”制敌的作用</p><h2 id="gdb">gdb</h2><h3 id="gdb-是什么">gdb 是什么？</h3><p>跟踪、调试、阅读分析c/c++程序、甚至可以认为是提供了一个简单的沙盒，可以修改程序运行时一些所依赖的上下文</p><h3id="调试程序的种类-----按照调试时候程序的运行态来分">调试程序的种类-----按照调试时候程序的运行态来分</h3><ul><li>跟踪已经运行中程序</li><li>调试运行崩溃的程序、排查问题</li><li>使用gdb 启动、跟踪的程序</li></ul><h3 id="gdb-能有的功能">gdb 能有的功能。</h3><ol type="1"><li>查看运行到当前位置时的函数调用栈信息</li><li>查看当前位置的前后的源码</li><li>调用函数的传入参数的值</li><li>设置、删除断点</li><li>单步 ---- 步入、步出、运行到下一个断点、忽略后续断点运行</li><li>查看当前帧中局部变量的值</li><li>设置环境变量、查找路径</li><li>查看函数、宏、数据结构的定义、实现源码</li><li>更改变量的值</li></ol>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>gdb</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用composer vcs 构建私有资源库</title>
    <link href="/2016/12/09/composer-privare.html"/>
    <url>/2016/12/09/composer-privare.html</url>
    
    <content type="html"><![CDATA[<ul><li>目录 {:toc} <!--## 背景很简单一件事，居然还跳进坑里面了，该死。项目庞杂需要重构，要把基础的代码提出来。貌似可以以组件的方式可以搞一搞，选择 composer 解决依赖问题。但又有很大的业务针对性，代码不可以公开。故最后选择使用composer+git的方式构建私有资源。 --></li></ul><h2 id="composer-repositories">composer repositories</h2><p>根据<a href="http://docs.phpcomposer.com/04-schema.html#repositories"title="composer repositories">文档</a>可知，composer资源库使用<code>repositories</code>属性字段来定义所使用的包资源。 -<code>packagist</code> 指定一个资源服务器，例如下面实例中用于指定<code>Packagist / Composer 的中国全量镜像</code> - <code>vcs</code>版本控制仓库</p><!--- [`path`][2] 本地路径 --><h3 id="例">例</h3><pre><code class="hljs">  在now代码库中使用私有的base代码库</code></pre><p>base 代码库的composer.json配置如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json"><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vendor/base&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;authors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;soul11201&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;soul11201@gmail.com&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;require&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;phalcon/devtools&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.0&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;repositories&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;packagist&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;composer&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://packagist.phpcomposer.com&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>now 代码库的composer.json配置如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json"><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vendor2/now&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;authors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;soul11201&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;soul11201@gmail.com&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><br> <span class="hljs-attr">&quot;repositories&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;git&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span>  <span class="hljs-string">&quot;url:vendor/base.git&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-attr">&quot;require&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;vendor/base&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;dev-master&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><ul><li>注意保证now 中require key值和 base中的name 保持一致</li></ul><!-- ## 参考 -->]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>版本管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jekyll 搭建小记</title>
    <link href="/2016/11/11/jekyllbuildblog.html"/>
    <url>/2016/11/11/jekyllbuildblog.html</url>
    
    <content type="html"><![CDATA[<ul><li>目录 {:toc}</li></ul><!-- 命令行下安装 --><h2 id="安装依赖环境">安装依赖环境</h2><ul><li>ruby</li><li>gem</li><li>nodejs</li><li>python</li><li>pygements</li></ul><h3 id="ubuntu-使用rvm-来安装">ubuntu 使用rvm 来安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br>curl -sSL https://rvm.io/mpapis.asc | gpg --import -<br><br>curl -sSL https://get.rvm.io | bash -s stable<br><br><span class="hljs-built_in">sudo</span> apt-get install nodejs<br><br></code></pre></td></tr></table></figure><h3 id="windows-下安装">windows 下安装</h3><p><a href="http://rubyinstaller.org/downloads/">下载</a><code>Ruby</code>、<code>DevKit</code>，并分别安装</p><h4 id="安装gem">安装gem</h4><p>进入DevKit目录，运行命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">ruby dk.rb init<br>ruby dk.rb install<br><br></code></pre></td></tr></table></figure><h2 id="安装jekyll">安装jekyll</h2><ul><li>换成国内的gem源</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">gem sources --add http://gems.ruby-china.org/ --remove https://rubygems.org/ -V<br>gem install liquid kramdown jekyll pygments.rb bundler<br> bundler install<br></code></pre></td></tr></table></figure><h2 id="参考">参考</h2><ul><li><p>http://ruby-china.org/wiki/rvm-guide</p></li><li><p>http://blog.csdn.net/fnzsjt/article/details/41729463</p></li><li><p>http://www.jianshu.com/p/609e1197754c</p></li><li><p>https://segmentfault.com/q/1010000000261050</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件工具</tag>
      
      <tag>jekyll</tag>
      
      <tag>ruby</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 百度、 google 站长工具中使用 sitemap 总结</title>
    <link href="/2016/08/09/sitemap.html"/>
    <url>/2016/08/09/sitemap.html</url>
    
    <content type="html"><![CDATA[<h2 id="背景">背景</h2><p>使用 jekyll 生成的 blog sitemap 提交后，一直提示<strong>xml解析失败</strong>，最后发现是sitemap种类使用错误导致的，把索引文件当成了地图文件使用。</p><h2 id="sitemap-种类">sitemap 种类</h2><p>百度 sitemap分两类：<strong>站点地图索引文件</strong> 和<strong>站点地图</strong>,站点地图就是站点中每个页面的链接，而站点地图索引文件即为指向站点地图的链接，发现问题原因后，问题自然很容易解决。同时发现，利用__站点地图索引文件__很容易解决另外一个一直想解决的问题。</p><h2 id="站点地图索引文件的一种-使用姿势">站点地图索引文件的一种使用姿势</h2><p>我写blog的域名是<code>blog.soul11201.com</code>,原先一直使用hexo在写文章，现在想换用jekyll，但是还想使用这个域名，但是原先写了很多文章也不想做迁移，故用了一个新的域名 <code>hexo.soul11201.com</code>指向原来的站点,<code>这样就需要解决同一域名下多站点的索引问题</code>。</p><p>但如果如果使用站点地图索引文件，把两个站点的站点地图放到站点地图索引文件，很容易解决了多站点的索引问题。我使用的具体的解决方案就是：</p><ul><li>首先生成站点索引文件和站点地图文件（下面两个文件内容即是）</li><li>然后将www.soul11201.com cname到 blog.soul11201.com</li><li>直接提交站点索引文件<code>http://www.soul11201.com/mulsitemap.xml</code>到百度</li></ul><p>jekyll 站点索引文件 <code>/mulsitemap.xml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs liquid">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br>&lt;sitemapindex xmlns=&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;&gt;<br>&lt;sitemapindex&gt;<br>    &lt;sitemap&gt;<br>        &lt;loc&gt;http://blog.soul11201.com/sitemap.xml&lt;/loc&gt;<br>        &lt;lastmod&gt;&#123;&#123; site.time | date: &quot;%Y-%m-%d&quot; &#125;&#125;&lt;/lastmod&gt;<br>    &lt;/sitemap&gt;<br><br>    &lt;sitemap&gt;<br>        &lt;loc&gt;http://hexo.soul11201.com/atom.xml&lt;/loc&gt;<br>        &lt;lastmod&gt;2016-05-07&lt;/lastmod&gt;<br>    &lt;/sitemap&gt;<br> <br>&lt;/sitemapindex&gt;<br><br></code></pre></td></tr></table></figure><p>jekyll blog 站点地图生成文件 <code>/sitmap.xml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs liquid">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br>&lt;sitemapindex xmlns=&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;&gt;<br>&lt;sitemapindex&gt;<br>    &lt;sitemap&gt;<br>        &lt;loc&gt;http://blog.soul11201.com/sitemap.xml&lt;/loc&gt;<br>        &lt;lastmod&gt;&#123;&#123; site.time | date: &quot;%Y-%m-%d&quot; &#125;&#125;&lt;/lastmod&gt;<br>    &lt;/sitemap&gt;<br><br>    &lt;sitemap&gt;<br>        &lt;loc&gt;http://hexo.soul11201.com/atom.xml&lt;/loc&gt;<br>        &lt;lastmod&gt;2016-05-07&lt;/lastmod&gt;<br>    &lt;/sitemap&gt;<br> <br>&lt;/sitemapindex&gt;<br></code></pre></td></tr></table></figure><!-- 又看了一下谷歌的sitemap分类，发现也是和百度类似。 --><hr /><h2 id="扩展阅读">扩展阅读</h2><ul><li><ahref="http://zhanzhang.baidu.com/college/courseinfo?id=267&amp;page=2#h2_article_title16">百度sitemap格式</a></li><li><ahref="https://support.google.com/webmasters/answer/75712?hl=zh-Hans&amp;authuser=2&amp;ref_topic=4581190">谷歌-简化多站点地图管理</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jekyll</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置ssh使用密钥登录，禁止口令登录</title>
    <link href="/2016/08/08/ssh.html"/>
    <url>/2016/08/08/ssh.html</url>
    
    <content type="html"><![CDATA[<p>使用秘钥登录，可以免去输入密码头痛问题，也能提高安全性。在服务器上搞这个的动机不是上面的两个原因，主要是公司有个哥们老使用公司的服务器，做代理搞自己的东西，悲催的是被老板发现了。本来想着用这个方法防止他老去搞这个事，后来发现虽然给他制造了一点麻烦，但是并不能解决“内奸”这个社会工程学问题。配置的过程中一直无法实现禁用口令。最后发现是有个配置选项参考文章都没有提及。</p><p>故简要的记述一下整个配置的流程。</p><h2 id="ssh-登录的原理">ssh 登录的原理</h2><p>本地机器使用私钥加密一个字符串，发送给服务器，服务器使用公钥验证通过，说明是个合法的用户，然后就直接可以登录了。</p><h2 id="公钥秘钥生成">公钥秘钥生成</h2><p>可以在本地也可以在服务器生成，下面是在本地生成<code>ssh-keygen -t rsa</code> 运行结束以后，在<spanclass="math inline">\(HOME/.ssh/目录下，会新生成id_rsa.pub和id_rsa两个文件。前者是公钥，后者是私钥。## 上传公钥然后把公钥文件中的内容添加到服务上的`\)</span>HOME/.ssh/authorized_key<code>文件末尾(或者是下面配置文件中AuthorizedKeysFile 选项指定文件的末尾，默认值是</code>$HOME/.ssh/authorized_key`)。</p><h2 id="修改配置">修改配置</h2><p>ssh服务启动的时候使用配置文件<code>/etc/ssh/sshd_config</code>中的配置。ssh使用密钥登录必须配置如下两项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">　RSAAuthentication yes<br>　PubkeyAuthentication yes<br>　AuthorizedKeysFile .ssh/authorized_keys<br></code></pre></td></tr></table></figure><h2 id="禁止口令登录">禁止口令登录</h2><p>我看到的参考文档都只是要求修改配置文件中的一个选项如下</p><p><code>PasswordAuthentication no</code></p><p>但是并没有什么乱用，用口令该怎么登录还是怎么登录。还应该修改配置中的另外一个选项如下:</p><p><code>ChallengeResponseAuthentication no</code></p><p><code>/etc/init.d/sshd reload</code> ssh服务重启后，问题解决。。。</p><h2 id="小结">小结</h2><p>简单来说就是</p><ul><li>首先生成公钥、秘钥。</li><li>在服务器中authorized_key 文件中添加公钥，私钥发送给登录用户。</li><li>然后修改服务器中的下面几个配置选项：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">　RSAAuthentication yes<br>　PubkeyAuthentication yes<br>　AuthorizedKeysFile .ssh/authorized_keys<br>PasswordAuthentication no<br>PasswordAuthentication no<br></code></pre></td></tr></table></figure><hr /><h2 id="扩展阅读-_">扩展阅读 ^_^</h2><ol type="1"><li><ahref="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html">SSH原理与运用（一）：远程登录</a></li><li><ahref="http://www.2cto.com/os/201401/272738.html">sshd_config配置详解</a></li><li><ahref="http://blog.chinaunix.net/uid-10540984-id-313293.html?bsh_bid=228834567">使用ssh公钥实现免密码登录</a></li><li><ahref="http://blog.chinaunix.net/uid-8116903-id-334714.html">如何配置ssh使用密钥登录，禁止口令登录？</a></li><li><a href="http://www.nnbbxx.net/post-3845.html">SSH使用密钥登录并禁止口令登录实践</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件工具</tag>
      
      <tag>SSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git submodule 笔记</title>
    <link href="/2016/06/08/submodule.html"/>
    <url>/2016/06/08/submodule.html</url>
    
    <content type="html"><![CDATA[<p>1 . 添加 submodule</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>git submodule add git-url local-path<br><br>git commit -am&quot;add submodule to git project&quot; //<br><br>git push<br><br>git submodule init<br><br></code></pre></td></tr></table></figure><p>2 . clone 带有submodule 的仓库 repos1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>git clone repos-1-url repos<br><br>cd repos<br><br>git submodule init<br><br>git submodule update<br><br></code></pre></td></tr></table></figure><p>3 . git 项目中修改 submodule</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>cd submodule-path<br><br>git checkout master<br><br>...do somthing modify...<br><br> git commit -am&quot;do modify&quot;<br><br> git push<br><br>cd respo-root-path<br><br>git commit -am&quot;update submodule&quot;<br><br>git push<br><br></code></pre></td></tr></table></figure><p>4 . 主项目更新 其他人 对 submodule做的修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>cd repos－submodule－path <br><br>git checkout master<br><br>git pull<br><br><br><br>//git submodule foreach git pull<br><br>.....<br><br>cd repos-paht<br><br>git commit  -am&quot;update submodule reference&quot; //commit id<br><br>git push<br><br></code></pre></td></tr></table></figure><ul><li><p>记录 submodule 引用的仓库</p></li><li><p>记录submodule在主项目中的目录位置</p></li><li><p>记录submodule 的commit id</p></li></ul><p>http://www.kafeitu.me/git/2012/03/27/git-submodule.html</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件工具</tag>
      
      <tag>git</tag>
      
      <tag>版本控制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dig</title>
    <link href="/2016/05/07/dig.html"/>
    <url>/2016/05/07/dig.html</url>
    
    <content type="html"><![CDATA[<!-- >1. dig 是什么？>1. 能用来做什么>1. 输出结果表示什么 --><h2 id="dig-是什么">dig 是什么？</h2><p>dig 是一个调试dns server相关问题的工具。比nslookup,host功能更强悍，或许是现在最好使的工具。</p><h2 id="能用来做什么">能用来做什么</h2><ul><li>解析域名的A记录</li><li>解析域名的MX记录</li><li>解析域名的CNAME记录</li><li>解析域名的NS记录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">dig soul11201.com  ;;A 记录<br>dig ns soul11201.com ;;ns 记录<br>dig CNAME soul11201.com ;;CNAME 记录<br></code></pre></td></tr></table></figure><ul><li>在指定的ns上解析域名的A记录</li></ul><blockquote><p>dig <span class="citation"data-cites="223.125.43.67">@223.125.43.67</span> -p 2345www.google.com</p></blockquote><h2 id="输出结果表示什么">输出结果表示什么</h2><p>输出的结果是dns<code>响应报文</code>和<code>请求报文查询问题</code>的可读形式，分别在下面三个区域中<code>Question/Answer/Authority sections</code>。dns报文查询和响应格式详细参考经典著作<code>TCPv1,14</code><ahref="#fn1" class="footnote-ref" id="fnref1"role="doc-noteref"><sup>1</sup></a>。或者简单的可以参考一下<ahref="http://www.cnblogs.com/feng-qi/archive/2013/05/05/DNS_packet_analysis.html">这篇文章</a></p><p>输出结果大概分为下面几个区域：</p><ul><li><code>Header</code>: 展示版本信息</li><li><code>QUESTION SECTION</code>:dns请求报文查询的问题，默认是<code>A</code>类型的查询</li><li><code>ANSWER SECTION</code>: 从dns收到的应答报文</li><li><code>AUTHORITY SECTION</code>: 授权的dns</li><li><code>ADDITIONAL SECTION</code>:授权dns的ip</li><li><code>Stats section</code>:最下面的统计部分，包括执行查询的时间和实际进行dns应答的机器ip和端口</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs dig">; &lt;&lt;&gt;&gt; DiG 9.9.5-3ubuntu0.8-Ubuntu &lt;&lt;&gt;&gt; redhat.com<br>;; global options: +cmd<br>;; Got answer:<br>;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 61818<br>;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 4, ADDITIONAL: 5<br><br>;; OPT PSEUDOSECTION:<br>; EDNS: version: 0, flags:; udp: 4096<br>;; QUESTION SECTION:<br>;redhat.com.            IN  A<br><br>;; ANSWER SECTION:<br>redhat.com.     600 IN  A   209.132.183.105<br><br>;; AUTHORITY SECTION:<br>redhat.com.     384 IN  NS  ns2.redhat.com.<br>redhat.com.     384 IN  NS  ns4.redhat.com.<br>redhat.com.     384 IN  NS  ns1.redhat.com.<br>redhat.com.     384 IN  NS  ns3.redhat.com.<br><br>;; ADDITIONAL SECTION:<br>ns3.redhat.com.     30  IN  A   209.132.176.100<br>ns4.redhat.com.     393 IN  A   209.132.188.218<br>ns2.redhat.com.     9   IN  A   209.132.183.2<br>ns1.redhat.com.     175 IN  A   209.132.186.218<br><br>;; Query time: 2010 msec<br>;; SERVER: 127.0.1.1#53(127.0.1.1)<br>;; WHEN: Sat May 07 11:53:30 CST 2016<br>;; MSG SIZE  rcvd: 191<br></code></pre></td></tr></table></figure><p><strong>输出结果控制</strong></p><p>对于上面的输出结果区域，通过下面的选项是可以控制是否显示的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">+nocomments – 关闭 comment lines<br>+noauthority – 关闭 authority section<br>+noadditional – 关闭 additional section<br>+nostats – 关闭 stats section<br>+noanswer – 关闭 answer section<br>+noall  - 关闭所有<br></code></pre></td></tr></table></figure><p>只显示answer记录:</p><blockquote><p>dig redhat.com +nocomments +noquestion +noauthority +noadditional+nostats</p></blockquote><p>或者</p><blockquote><p>dig redhat.com +noall +answer</p></blockquote><h2 id="参考">参考</h2><ul><li><a href="http://www.linuxnix.com/surendras-dig-notes/">DIG commandexplained with examples in Linux</a></li><li><ahref="https://mediatemple.net/community/products/grid/204644130/understanding-the-dig-command">UNDERSTANDINGTHE DIG COMMAND</a></li><li><ahref="http://www.cyberciti.biz/faq/linux-unix-dig-command-examples-usage-syntax/dig-command-output/">Understandingthe dig command output</a></li><li><ahref="http://www.thegeekstuff.com/2012/02/dig-command-examples/">10Linux DIG Command Examples for DNS Lookup</a></li></ul><h2 id="tips">tips</h2><section id="footnotes" class="footnotes footnotes-end-of-document"role="doc-endnotes"><hr /><ol><li id="fn1"><p>TCP/IP 详解卷1：协议，第14章 dns：域名系统<ahref="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件工具</tag>
      
      <tag>dig</tag>
      
      <tag>域名</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 内核分析 -- Linux内核学习总结</title>
    <link href="/2016/04/18/mooc-linux-kernel-9.html"/>
    <url>/2016/04/18/mooc-linux-kernel-9.html</url>
    
    <content type="html"><![CDATA[<!-- Linux内核学习总结用自己的话简要总结您对Linux系统的理解及学习Linux内核的心得；将您之前的所有博客作业做成目录列表，可以修改原博客理解有误或不准确的地方，可以在目录中给每篇博客加个简要引言，总之，您的这篇学习总结博客能为其他学习者提供一个参考索引；根据本课程所学知识阐述您对Linux系统的理解，撰写一篇署名博客，并在博客文章中注明“真实姓名（与最后申请证书的姓名务必一致） + 原创作品转载请注明出处 + 《Linux内核分析》MOOC课程http://mooc.study.163.com/course/USTC-1000029000 ”，博客内容的具体要求如下：题目自拟，内容围绕您对Linux系统的理解及学习Linux内核的心得进行；将您之前的所有博客作业做成目录列表放在博客中；总结部分：您在学习《Linux内核分析》课程中最大的收获？学习完《Linux内核分析》课程后您最大的遗憾是什么？请提交博客文章URL到MOOC平台。 --><p><ahref="http://blog.soul11201.com/tags/Linux-%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90/">所有作业目录列表</a></p><h2 id="简单的学习总结">简单的学习总结</h2><ol type="1"><li><p>选修这门课，是很早以前就想学Linux内核相关的内容，当发现这门课程的时候，选修那就是在自然而然的事情了。当听完以后，发现孟老师讲授的方式特别符合自己的听的方式，也感觉这是一门锻炼动手能力好课程。</p></li><li><p>学习时间，也没什么大块的时间区学习，基本上就是见缝插针，利用午休，晚饭后休息的，每个小时休息一会的，小片段时间的一点点的接上的，也幸亏每集视频都不太长适合这种零碎时间学习。作业也基本上都是在周日有时间的时候才能做，有一次作业都到周日晚上８点了才想起来没有做，想着放弃吧，又心有不甘。决定还是做一下吧，能做多少做多少。最后成绩还不错，让我感觉只要认真的去写、做，总能收到对应的回报。</p></li><li><p>这门课最大是收获就是基本上会使用了gdb和写一写简单的makefile，对嵌入式汇编现在看起来，至少没有以前那么头大了，慢慢的还能看懂,掌握住了基本的调试内核的技巧。其次硬着头皮啃完了课程推荐的一本书《程序员的自我修养》，基本上是粗读吧，很多内容没有掌握，但是心里面，建立起来了一个大的框架，也基本上有一个概念。</p></li><li><p>实验环境用的实验楼真是奇卡无比，所以自己在本地搭建了一套环境，并且写成了makefile,基本上找个Ubuntu（个人偏好）系统　make一下环境就搞定了。</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget http://blog.soul11201.com/attach.d/moocOsEnvBuild.makefile &amp;&amp; make -f moocOsEnvBuild.makefile install<br></code></pre></td></tr></table></figure><ol start="5" type="1"><li><p>这门课程基本上全是围绕操作系统的六大主题中的一个主题－－进程调度这个主题做铺垫展开的。如庖丁解牛，讲述原理，和调试技巧，这是很受用的技术。但是对于我来说，学完这门课程基本上算是入个门。虽说进程调度算是核心的内容，但是其他几个主题亦不容小觑，还需要自己找一些其他书籍前来阅读。</p></li><li><p>最后有幸见到了孟老师，感觉孟老师本人和视频中一样比较风趣。哈哈。。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux 内核分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>指针、引用与内存</title>
    <link href="/2016/04/15/pointer-reference-mem.html"/>
    <url>/2016/04/15/pointer-reference-mem.html</url>
    
    <content type="html"><![CDATA[<blockquote><ol type="1"><li>指针两个变量之间的关系是什么,<code>T *a,*b = a</code>;</li><li>引用两个变量之间的关系是什么,<code>T *a,* &amp;b = a</code>？</li><li>delete后堆上数据有没有回收怎么判断？</li><li>类的函数中可以使用<code>delete this</code>吗？</li></ol></blockquote><h2 id="引用">引用</h2><p>一般类型引用格式是：<code>T a,&amp;b = a</code>表示变量a,b指向了同一块内存区域。可以使用如下方式验证<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>,&amp;a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>,&amp;b);<br></code></pre></td></tr></table></figure></p><p>指针类类型的引用：</p><p><code>T *a,*b = a</code> 在内存中有两块内存区域。</p><p><code>T *a,*&amp;b = a</code> 内存中有一块内存区域</p><p><code>int *a = new int</code>在堆上申请一块内存区域，地址赋值给a。</p><p><code>delete a</code>回收<code>a</code>所指向的堆上的内存。但是<code>a == NULL</code>不一定成立</p><!-- 指针b是指针a的引用 --><h2 id="指针deletenew">指针、delete、new</h2><p>内存使用的基本规则: &gt;谁使用谁回收</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些搜索技巧</title>
    <link href="/2016/04/14/serach-engin-tips.html"/>
    <url>/2016/04/14/serach-engin-tips.html</url>
    
    <content type="html"><![CDATA[<p>一些搜索技巧</p><h3 id="site">site</h3><p>今天看到一个新闻</p><blockquote><p>英国将首次实现VR全球直播手术过程</p></blockquote><p>但是没有直播地址，那就直接去其官网，看了看也没找到原文。在bing中使用如下搜索，立马找到了原文。</p><blockquote><p>vr site:www.dailymail.co.uk</p></blockquote><h3 id="filetype">filetype</h3><p>想找本三字经的pdf版，用bing、google结果有很大不同，可以体验一下。google 用不了，<a href="http://so.chongbuluo.com/">chongbuluo</a>绝对好用</p><blockquote><p>filetype:pdf 三字经</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux 内核分析 -- 进程调度实现原理简单分析</title>
    <link href="/2016/04/11/mooc-linux-kernel-8.html"/>
    <url>/2016/04/11/mooc-linux-kernel-8.html</url>
    
    <content type="html"><![CDATA[<!-- 理解Linux系统中进程调度的时机，可以在内核代码中搜索schedule()函数，看都是哪里调用了schedule()，判断我们课程内容中的总结是否准确；使用gdb跟踪分析一个schedule()函数 ，验证您对Linux系统进程调度与进程切换过程的理解；推荐在实验楼Linux虚拟机环境下完成实验。特别关注并仔细分析switch_to中的汇编代码，理解进程上下文的切换机制，以及与中断上下文切换的关系；根据本周所学知识分析并理解Linux中进程调度与进程切换过程， --><h2 id="进程调度时机----schedule">进程调度时机 --<code>schedule()</code></h2><p>所有可能执行调度的时间点:</p><ul><li>主动调度<ul><li>中断处理过程（包括时钟中断、I/O中断、系统调用和异常）中，直接调用schedule()，或者返回用户态时根据need_resched标记调用schedule()；</li><li>内核线程可以直接调用schedule()进行进程切换，也可以在中断处理过程中进行调度，也就是说内核线程作为一类的特殊的进程可以主动调度，也可以被动调度；</li></ul></li><li>被动调度<ul><li>用户态进程无法实现主动调度，仅能通过陷入内核态后的某个时机点进行调度，即在中断处理过程中进行调度。</li></ul></li></ul><blockquote><blockquote><p>总的来说，发生<code>中断</code>或者在<code>内核线程</code>中时才会出现进程调度调度，调用<ahref="http://codelab.shiyanlou.com/xref/linux-3.18.6/kernel/sched/core.c#2865"><code>schedule()</code></a>。</p></blockquote></blockquote><p>调用顺序</p><ul><li><code>schedule()</code><code>schedule()</code>函数调用<code>pick_next_task</code>选择一个新的进程来运行，并调用<code>context_switch</code>完成进程上下文的切换。<code>context_switch</code>靠调用<code>switch_to</code>这个宏来进行关键上下文切换</li></ul><p><code>next = pick_next_task(rq, prev);//进程调度算法都封装这个函数内部,选择出来下一个将要执行的进程</code><ahref="http://codelab.shiyanlou.com/xref/linux-3.18.6/kernel/sched/core.c#2834"><code>context_switch(rq, prev, next);//进程上下文切换</code></a><ahref="https://github.com/noname007/linux/blob/v3.18-rc6/arch/x86/include/asm/switch_to.h#L27-L77"><code>switch_to</code></a>利用了prev和next两个参数：prev指向当前进程，next指向被调度的进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Saving eflags is important. It switches not only IOPL between tasks,</span><br><span class="hljs-comment"> * it also protects other tasks from NT leaking through sysenter etc.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> switch_to(prev, next, last)                 \</span><br><span class="hljs-meta">do &#123;                                    \</span><br><span class="hljs-meta">    <span class="hljs-comment">/*                              \</span></span><br><span class="hljs-comment"><span class="hljs-meta">     * Context-switching clobbers all registers, so we clobber  \</span></span><br><span class="hljs-comment"><span class="hljs-meta">     * them explicitly, via unused output variables.        \</span></span><br><span class="hljs-comment"><span class="hljs-meta">     * (EAX and EBP is not listed because EBP is saved/restored \</span></span><br><span class="hljs-comment"><span class="hljs-meta">     * explicitly for wchan access and EAX is the return value of   \</span></span><br><span class="hljs-comment"><span class="hljs-meta">     * __switch_to())                       \</span></span><br><span class="hljs-comment"><span class="hljs-meta">     */</span>                             \</span><br><span class="hljs-meta">    unsigned long ebx, ecx, edx, esi, edi;              \</span><br><span class="hljs-meta">                                    \</span><br><span class="hljs-meta">    asm volatile(<span class="hljs-string">&quot;pushfl\n\t&quot;</span>       <span class="hljs-comment">/* save    flags */</span> \</span><br><span class="hljs-meta">             <span class="hljs-string">&quot;pushl %%ebp\n\t&quot;</span>      <span class="hljs-comment">/* save    EBP   */</span> \</span><br><span class="hljs-meta">             <span class="hljs-string">&quot;movl %%esp,%[prev_sp]\n\t&quot;</span>    <span class="hljs-comment">/* save    ESP   */</span> \</span><br><span class="hljs-meta">             <span class="hljs-string">&quot;movl %[next_sp],%%esp\n\t&quot;</span>    <span class="hljs-comment">/* restore ESP   */</span> \</span><br><span class="hljs-meta">             <span class="hljs-string">&quot;movl $1f,%[prev_ip]\n\t&quot;</span>  <span class="hljs-comment">/* save    EIP   */</span> \</span><br><span class="hljs-meta">             <span class="hljs-string">&quot;pushl %[next_ip]\n\t&quot;</span> <span class="hljs-comment">/* restore EIP   */</span> \</span><br><span class="hljs-meta">             __switch_canary                    \</span><br><span class="hljs-meta">             <span class="hljs-string">&quot;jmp __switch_to\n&quot;</span>    <span class="hljs-comment">/* regparm call  */</span> \</span><br><span class="hljs-meta">             <span class="hljs-string">&quot;1:\t&quot;</span>                     \</span><br><span class="hljs-meta">             <span class="hljs-string">&quot;popl %%ebp\n\t&quot;</span>       <span class="hljs-comment">/* restore EBP   */</span> \</span><br><span class="hljs-meta">             <span class="hljs-string">&quot;popfl\n&quot;</span>          <span class="hljs-comment">/* restore flags */</span> \</span><br><span class="hljs-meta">                                    \</span><br><span class="hljs-meta">             <span class="hljs-comment">/* output parameters */</span>                \</span><br><span class="hljs-meta">             : [prev_sp] <span class="hljs-string">&quot;=m&quot;</span> (prev-&gt;thread.sp),        \</span><br><span class="hljs-meta">               [prev_ip] <span class="hljs-string">&quot;=m&quot;</span> (prev-&gt;thread.ip),        \</span><br><span class="hljs-meta">               <span class="hljs-string">&quot;=a&quot;</span> (last),                 \</span><br><span class="hljs-meta">                                    \</span><br><span class="hljs-meta">               <span class="hljs-comment">/* clobbered output registers: */</span>        \</span><br><span class="hljs-meta">               <span class="hljs-string">&quot;=b&quot;</span> (ebx), <span class="hljs-string">&quot;=c&quot;</span> (ecx), <span class="hljs-string">&quot;=d&quot;</span> (edx),      \</span><br><span class="hljs-meta">               <span class="hljs-string">&quot;=S&quot;</span> (esi), <span class="hljs-string">&quot;=D&quot;</span> (edi)               \</span><br><span class="hljs-meta">                                        \</span><br><span class="hljs-meta">               __switch_canary_oparam               \</span><br><span class="hljs-meta">                                    \</span><br><span class="hljs-meta">               <span class="hljs-comment">/* input parameters: */</span>              \</span><br><span class="hljs-meta">             : [next_sp]  <span class="hljs-string">&quot;m&quot;</span> (next-&gt;thread.sp),        \</span><br><span class="hljs-meta">               [next_ip]  <span class="hljs-string">&quot;m&quot;</span> (next-&gt;thread.ip),        \</span><br><span class="hljs-meta">                                        \</span><br><span class="hljs-meta">               <span class="hljs-comment">/* regparm parameters for __switch_to(): */</span>  \</span><br><span class="hljs-meta">               [prev]     <span class="hljs-string">&quot;a&quot;</span> (prev),               \</span><br><span class="hljs-meta">               [next]     <span class="hljs-string">&quot;d&quot;</span> (next)                \</span><br><span class="hljs-meta">                                    \</span><br><span class="hljs-meta">               __switch_canary_iparam               \</span><br><span class="hljs-meta">                                    \</span><br><span class="hljs-meta">             : <span class="hljs-comment">/* reloaded segment registers */</span>         \</span><br><span class="hljs-meta">            <span class="hljs-string">&quot;memory&quot;</span>);                  \</span><br><span class="hljs-meta">&#125; while (0)</span><br></code></pre></td></tr></table></figure><p>只将汇编逻辑代码提出来，将前一个进程记做1号进程，后面的记做2号进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-comment">//保存1号进程的标志寄存器和完成堆栈切换</span><br> <span class="hljs-string">&quot;pushfl\n\t&quot;</span>       <span class="hljs-comment">/* save    flags */</span> \<br> <span class="hljs-string">&quot;pushl %%ebp\n\t&quot;</span>      <span class="hljs-comment">/* save    EBP   */</span> \<br> <span class="hljs-string">&quot;movl %%esp,%[prev_sp]\n\t&quot;</span>    <span class="hljs-comment">/* save    ESP   */</span> \<br> <span class="hljs-string">&quot;movl %[next_sp],%%esp\n\t&quot;</span>    <span class="hljs-comment">/* restore ESP   */</span> \<br> <span class="hljs-comment">//下次切换到1号执行时，开始执行的位置是$1这个标号位置，将其保存。\</span><br><span class="hljs-comment"> &quot;movl $1f,%[prev_ip]\n\t&quot;  /* save    EIP   */ \</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//切换到2号进程：先将下一个进程开始执行位置保存到栈中，调用__switch_to函数，这样函数执行完毕后执行ret,就将 next_ip 赋给了 eip \</span><br><span class="hljs-comment">//对于32位x84架构系统 __switch_to 代码在 http://codelab.shiyanlou.com/xref/linux-3.18.6/arch/x86/kernel/process_32.c#218 \</span><br><span class="hljs-comment"> &quot;pushl %[next_ip]\n\t&quot; /* restore EIP   */ \</span><br><span class="hljs-comment"> &quot;jmp __switch_to\n&quot;    /* regparm call  */ \</span><br><span class="hljs-comment"></span><br> <span class="hljs-comment">//下次1号进程切换回来的时候，开始执行的地方</span><br> <span class="hljs-string">&quot;1:\t&quot;</span>                     \<br> <span class="hljs-string">&quot;popl %%ebp\n\t&quot;</span>       <span class="hljs-comment">/* restore EBP   */</span> \<br> <span class="hljs-string">&quot;popfl\n&quot;</span>          <span class="hljs-comment">/* restore flags */</span> \<br></code></pre></td></tr></table></figure><!-- ## gdb跟踪分析 `schedule()` 进程调度与进程切换过程`````` --><!-- ## 分析switch_to中的汇编代码 ，进程上下文的切换机制，以及与中断上下文切换的关系 -->]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux 内核分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 内核分析 -- 装载</title>
    <link href="/2016/04/08/mooc-linux-kernel-7.html"/>
    <url>/2016/04/08/mooc-linux-kernel-7.html</url>
    
    <content type="html"><![CDATA[<!-- 1. 理解编译链接的过程和ELF可执行文件格式，详细内容参考本周第一节；​1. 编程使用exec*库函数加载一个可执行文件，动态链接分为可执行程序装载时动态链接和运行时动态链接，编程练习动态链接库的这两种使用方式，详细内容参考本周第二节；2. 使用gdb跟踪分析一个execve系统调用内核处理函数sys_execve ，验证您对Linux系统加载可执行程序所需处理过程的理解，详细内容参考本周第三节；推荐在实验楼Linux虚拟机环境下完成实验。特别关注新的可执行程序是从哪里开始执行的？为什么execve系统调用返回后新的可执行程序能顺利执行？对于静态链接的可执行程序和动态链接的可执行程序execve系统调用返回时会有什么不同？根据本周所学知识分析exec*函数对应的系统调用处理过程，撰写一篇署名博客，并在博客文章中注明“真实姓名（与最后申请证书的姓名务必一致） + 原创作品转载请注明出处 + 《Linux内核分析》MOOC课程http://mooc.study.163.com/course/USTC-1000029000 ”，博客内容的具体要求如下：题目自拟，内容围绕对Linux内核如何装载和启动一个可执行程序；可以结合实验截图、ELF可执行文件格式、用户态的相关代码等；博客内容中需要仔细分析新可执行程序的执行起点及对应的堆栈状态等。总结部分需要阐明自己对“Linux内核装载和启动一个可执行程序”的理解 --><h3 id="编译链接的过程elf文件格式">编译链接的过程，ELF文件格式</h3><p>![][build-png]</p><p>[build-png]: /imgs/gcc-build-process-1.png "生成可执行程序的过程" {width=100%}<a href="#fn1" class="footnote-ref" id="fnref1"role="doc-noteref"><sup>1</sup></a></p><p>生成可执行程序的过程 <a href="#fn2" class="footnote-ref" id="fnref2"role="doc-noteref"><sup>2</sup></a></p><ul><li>C代码（.c）经过编译器预处理生成中间代码（图中未显示），然后编译成汇编代码（.asm）</li><li>汇编代码（.asm）经过 汇编器，生成目标文件（.o）</li><li>目标文件（.o） 经过链接器，链接成可执行文件（.out）</li><li>OS将可执行文件加载到内存里执行.</li></ul><p>其中，.o文件 和 可执行文件，都是目标文件，Linux上面目标文件格式是<code>Elf</code>,window上面是<code>PE格式</code>。</p><p>ELF格式的目标文件种类<a href="#fn3" class="footnote-ref" id="fnref3"role="doc-noteref"><sup>3</sup></a>,<a href="#fn4" class="footnote-ref"id="fnref4" role="doc-noteref"><sup>4</sup></a></p><ul><li>可重定位（relocatable）文件，保存着代码和适当的数据，用来和其它的object文件一起来创建一个可执行文件或者是一个共享文件（主要是.o文件）</li><li>可执行（executable）文件，保存着一个用来执行的程序，该文件指出了exec(BA_OS)如何来创建程序进程映象（操作系统怎么样把可执行文件加载起来并且从哪里开始执行）</li><li>一个共享文件（如Linux中的.so,.dso文件）即动态链接库，保存着代码和合适的数据，链接方式有两种，静态链接（装载时连接），动态链接（程序运行时连接）</li></ul><h2 id="动态链接库的这两种使用方式">动态链接库的这两种使用方式</h2><h2id="gdb跟踪execve系统调用-----可执行程序的装载过程">gdb跟踪<code>execve</code>系统调用--- 可执行程序的装载过程</h2><p>设置断点</p><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gdb">b sys_execve<br>b load_elf_binary<br>b start_thread<br></code></pre></td></tr></table></figure></p><p>从哪里开始执行的</p><section id="footnotes" class="footnotes footnotes-end-of-document"role="doc-endnotes"><hr /><ol><li id="fn1"><p><ahref="https://www.zhihu.com/question/20484931">linux中的动态链接库，和静态链接库是干什么的？</a><ahref="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn2"><p><ahref="http://www.jianshu.com/p/dee889469bdd">梅花小筑</a><ahref="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn3"><p><ahref="http://www.jianshu.com/p/dee889469bdd">梅花小筑</a><ahref="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn4"><p><ahref="http://item.jd.com/10067200.html">程序员的自我修养：链接、装载与库</a><ahref="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux 内核分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>加班调bug谁之过？</title>
    <link href="/2016/04/08/2016-04-08.html"/>
    <url>/2016/04/08/2016-04-08.html</url>
    
    <content type="html"><![CDATA[<p>昨天 app 客户端出现一个问题，最后发现是使用 C# 委托和事件封装的一个pub/sub 模式的问题。事件的发布 pub 动作 A 同时写在了构造函数中，但 B同事写的 pub/sub 中的发布者、订阅者对象却在此后才会实例化,导致事件无法被消费。</p><!-- 为什么这样写呢？ --><!-- 构造函数的功能是用来初始化，一般用来解决成员变量的初始化，或者说是对外部的依赖问题 --><p>这件事的责任应该划归给谁呢？ 是在构造函数里面写事件发布者的 A，还是写 pub/sub 模式的 B？</p><p>判断这个问题，下面从这两个人的角色简单总结一下。</p><!-- 问题出现在了构造函数里面，构造函数一般用来做`一些初始化的工作，像对成员变量的初值的初始化，实现依赖注入，对一些数据信息的预处理`。这样来看到底是谁的责任，就跟代码所起的作用相关了 --><!-- 如果这段代码是应用和用户之间的交互相关的逻辑问题，那么很明显不该把这段事件发布相关代码写到构造函数中。 --><p>像Yii2框架中继承于<code>Object</code>的类，每次类创建完成之后，就会自动执行<code>Object</code>的 <code>init()</code>这个函数。加上这么一层，就实现了框架的和使用人员的初始化流程给分开，防止使用框架的人在依赖到框架的时候，还未初始化情况的出现。</p><p>但是他俩情况不像是上下层调用的关系，两段都是核心处理逻辑相关的代码呢？来也只能是开发的两位成员没有协调好这个顺序问题了</p><!-- 归根结底就是代码是核心基础代码，还是应用层业务逻辑代码与何时调用的问题。 --><!-- >其实他们都是开发人员，这里只是用开发与用户用来比喻一个人程序依赖另一个人的程序，比如框架的开发者就是开发人员，二使用框架的人就是用户、 --><!-- 依赖注入容器和自动加载 --><!-- 要是两段都是核心处理相关的代码呢？看来也只能是开发的两个成员协调好这个顺序问题了商讨一下调用次序了 -->]]></content>
    
    
    <categories>
      
      <category>职场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>边界</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 内核分析 -- 进程的创建</title>
    <link href="/2016/04/01/mooc-linux-kernel-6.html"/>
    <url>/2016/04/01/mooc-linux-kernel-6.html</url>
    
    <content type="html"><![CDATA[<ul><li>阅读理解task_struct数据结构http://codelab.shiyanlou.com/xref/linux-3.18.6/include/linux/sched.h#1235；</li><li>分析fork函数对应的内核处理过程sys_clone，理解创建一个新进程如何创建和修改task_struct数据结构；</li><li>使用gdb跟踪分析一个fork系统调用内核处理函数sys_clone，验证您对Linux系统创建一个新进程的理解,推荐在实验楼Linux虚拟机环境下完成实验。特别关注新进程是从哪里开始执行的？为什么从那里能顺利执行下去？即执行起点与内核堆栈如何保证一致。</li><li>根据本周所学知识分析fork函数对应的系统调用处理过程，撰写一篇署名博客，并在博客文章中注明“真实姓名（与最后申请证书的姓名务必一致）+ 原创作品转载请注明出处 +《Linux内核分析》MOOC课程http://mooc.study.163.com/course/USTC-1000029000”，博客内容的具体要求如下：<ul><li>题目自拟，内容围绕对Linux系统如何创建一个新进程进行；</li><li>可以结合实验截图、绘制堆栈状态执行流程图等；</li><li>博客内容中需要仔细分析新进程的执行起点及对应的堆栈状态等。</li><li>总结部分需要阐明自己对“Linux系统创建一个新进程”的理解</li></ul></li></ul><h2 id="进程简介">进程简介</h2><p>进程是处于执行期的程序以及它所管理的资源（如打开的文件、挂起的信号、进程状态、地址空间等等）的总称。注意，程序并不是进程，实际上两个或多个进程不仅有可能执行同一程序，而且还有可能共享地址空间等资源。Linux内核通过一个被称为进程描述符的task_struct结构体来管理进程，这个结构体包含了一个进程所需的所有信息<ahref="#fn1" class="footnote-ref" id="fnref1"role="doc-noteref"><sup>1</sup></a>。</p><h2 id="task_struct代码分析"><code>task_struct</code>代码分析</h2><h3 id="进程状态">进程状态</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//行号   结构成员</span><br><span class="hljs-number">1236</span><span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span> state;<span class="hljs-comment">/* -1 unrunnable, 0 runnable, &gt;0 stopped */</span><br></code></pre></td></tr></table></figure><p>进程的状态，可能取值大概十种，和其他一些相关操作宏　具体参见 <ahref="https://github.com/torvalds/linux/blob/v3.18-rc6/include/linux/sched.h#L193-L249">github代码</a>，　每种状态的具体含义可以查阅参考资料<a href="#fn2"class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>　### 进程内核堆栈</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-number">1237</span><span class="hljs-type">void</span> *<span class="hljs-built_in">stack</span>;<br></code></pre></td></tr></table></figure><p>分配给进程的内核堆栈，分配和释放对应的函数为<code>alloc_thread_info</code>,<code>free_thread_info</code></p><h3 id="进程标志">进程标志</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags; <span class="hljs-comment">/* per process flags, defined below */</span>  <br></code></pre></td></tr></table></figure><p>进程标记，其所有可能取值参见　<ahref="https://github.com/torvalds/linux/blob/v3.18-rc6/include/linux/sched.h#L1898-L1927">github上linux代码</a>,其部分取值含义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"> <span class="hljs-comment">/*</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">flags是进程当前的状态标志，具体的如：</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">0x00000002表示进程正在被创建；</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">0x00000004表示进程正准备退出；</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">0x00000040 表示此进程被fork出，但是并没有执行exec；</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">0x00000400表示此进程由于其他进程发送相关信号而被杀死 。</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="进程间关系">进程间关系</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-number">1337</span><span class="hljs-comment">/*</span><br><span class="hljs-comment">1338 * pointers to (original) parent process, youngest child, younger sibling,</span><br><span class="hljs-comment">1339 * older sibling, respectively.  (p-&gt;father can be replaced with</span><br><span class="hljs-comment">1340 * p-&gt;real_parent-&gt;pid)</span><br><span class="hljs-comment">1341 */</span><br><span class="hljs-number">1342</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> __<span class="hljs-title">rcu</span> *<span class="hljs-title">real_parent</span>;</span> <span class="hljs-comment">/* real parent process */</span><br><span class="hljs-number">1343</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> __<span class="hljs-title">rcu</span> *<span class="hljs-title">parent</span>;</span> <span class="hljs-comment">/* recipient of SIGCHLD, wait4() reports */</span><br><span class="hljs-number">1344</span><span class="hljs-comment">/*</span><br><span class="hljs-comment">1345 * children/sibling forms the list of my natural children</span><br><span class="hljs-comment">1346 */</span><br><span class="hljs-number">1347</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">children</span>;</span><span class="hljs-comment">/* list of my children */</span><br><span class="hljs-number">1348</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">sibling</span>;</span><span class="hljs-comment">/* linkage in my parent&#x27;s children list */</span><br><span class="hljs-number">1349</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> *<span class="hljs-title">group_leader</span>;</span><span class="hljs-comment">/* threadgroup leader */</span><br></code></pre></td></tr></table></figure><p>描述进程见关系的一组属性，像父子，兄弟，组</p><h3 id="进程调度">进程调度</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-number">1253</span><span class="hljs-type">int</span> prio, static_prio, normal_prio;<br><span class="hljs-number">1254</span><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> rt_priority;<br><span class="hljs-number">1255</span><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sched_class</span> *<span class="hljs-title">sched_class</span>;</span><br><span class="hljs-number">1256</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sched_entity</span> <span class="hljs-title">se</span>;</span><br><span class="hljs-number">1257</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sched_rt_entity</span> <span class="hljs-title">rt</span>;</span><br><span class="hljs-number">1258</span><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_CGROUP_SCHED</span><br><span class="hljs-number">1259</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_group</span> *<span class="hljs-title">sched_task_group</span>;</span><br><span class="hljs-number">1260</span><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-number">1261</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sched_dl_entity</span> <span class="hljs-title">dl</span>;</span><br><span class="hljs-number">1262</span><br><span class="hljs-number">1263</span><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_PREEMPT_NOTIFIERS</span><br><span class="hljs-number">1264</span><span class="hljs-comment">/* list of struct preempt_notifier: */</span><br><span class="hljs-number">1265</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hlist_head</span> <span class="hljs-title">preempt_notifiers</span>;</span><br><span class="hljs-number">1266</span><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-number">1267</span><br><span class="hljs-number">1268</span><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_BLK_DEV_IO_TRACE</span><br><span class="hljs-number">1269</span><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> btrace_seq;<br><span class="hljs-number">1270</span><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-number">1271</span><br><span class="hljs-number">1272</span><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> policy;<br><span class="hljs-number">1273</span><span class="hljs-type">int</span> nr_cpus_allowed;<br><span class="hljs-number">1274</span><span class="hljs-type">cpumask_t</span> cpus_allowed;<br><br></code></pre></td></tr></table></figure><table><tbody><tr><td>static_prio</td><td>用于保存静态优先级，可以通过nice系统调用来进行修改。</td></tr><tr><td>rt_priority</td><td>用于保存实时优先级。</td></tr><tr><td>normal_prio</td><td>的值取决于静态优先级和调度策略。</td></tr><tr><td>prio</td><td>用于保存动态优先级。</td></tr><tr><td>policy</td><td>表示进程的调度策略，目前主要有五种<a href="#fn3"class="footnote-ref" id="fnref3"role="doc-noteref"><sup>3</sup></a></td></tr><tr><td>struct files_structf * files</td><td>系统打开文件<a href="#fn4" class="footnote-ref" id="fnref4"role="doc-noteref"><sup>4</sup></a></td></tr></tbody></table><p>其他的还有一些代码介绍可以参考文档<a href="#fn5" class="footnote-ref"id="fnref5" role="doc-noteref"><sup>5</sup></a><a href="#fn6"class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a></p><h2id="创建一个新进程在内核中的执行过程">创建一个新进程在内核中的执行过程</h2><p>一个用户程序进行fork进程代码样例如下所示： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">Fork</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span>*argv[])</span><br>&#123;                          <br>        <span class="hljs-type">int</span> pid;           <br>        pid = fork();      <br>        <span class="hljs-keyword">if</span>(pid&lt;<span class="hljs-number">0</span>)          <br>        &#123;                  <br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">&quot;ForkFailed&quot;</span>);<br>                           <br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pid == <span class="hljs-number">0</span>)&#123; <br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is child process pid:%d\n&quot;</span>,getpid());<br>        &#125;<span class="hljs-keyword">else</span>&#123;             <br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is Parent Process! pid:%d child pid:%d\n&quot;</span>,getpid(),pid);<br>                wait(<span class="hljs-literal">NULL</span>);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Child Complete\n&quot;</span>);<br>        &#125;                  <br>&#125;<br></code></pre></td></tr></table></figure></p><p>上述代码运行的模型大致如下：</p><ul><li>使用fork、vfork、clone三个系统调用创建一个新进程，最终都是调用do_fork完成进程的创建</li><li>复制父进程<ul><li>复制一个PCB即<code>task_struct  err = arch_dup_task_struct(tsk, orig);</code></li><li>分配新的内核堆栈 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C">ti = alloc_thread_info_node(tsk, node);<br><br>tsk-&gt;<span class="hljs-built_in">stack</span> = ti;<br><br>setup_thread_stack(tsk, orig); <span class="hljs-comment">//这里只是复制thread_info，而非复制内核堆栈</span><br></code></pre></td></tr></table></figure></li><li>修改复制复制过来的PCB数据，如pid,进程链表，见<code>copy_process</code>函数</li></ul></li><li>父子进程运行从用户的代码来看函数<code>fork</code>返回了两次，即在父子进程中各返回一次，父进程从系统调用中返回比较容易理解。子进程从系统调用中返回，继续从<code>fork</code>处执行，Linux是如何做到的呢？这就涉及子进程的<code>内核堆栈数据状态</code>和<code>task_struct</code>中<code>thread</code>记录的<code>sp</code>和<code>ip</code>的一致性问题，这是在哪里设定的？copy_threadin copy_process <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C">*childregs = *current_pt_regs(); <span class="hljs-comment">//复制内核堆栈</span><br><br>childregs-&gt;ax = <span class="hljs-number">0</span>; <span class="hljs-comment">//为什么子进程的fork返回0，这里就是原因！</span><br><br>p-&gt;thread.sp = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) childregs; <span class="hljs-comment">//调度到子进程时的内核栈顶</span><br><br>p-&gt;thread.ip = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) ret_from_fork; <span class="hljs-comment">//调度到子进程时的第一条指令地址</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="gdb-跟踪调试程序">gdb　跟踪调试程序</h2><p>程序调用顺序如下所示以缩进格式表示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>- sys_fork<br> - do_fork -- 系统内核调用<br>  - copy_process -- 复制父进程的所有信息给子进程<br>   - dup_task_struct　-- 复制父进程PCB信息。<br>     + alloc_thread_info_node　　-- 分配进程内核堆栈<br>     + arch_dup_task_struct　　　　-- 直接父子进程共享，写时复制<br>   - sched_fork -- 把新进程设置为 TASK_RUNNING <br>   - copy_thread　-- 　把父进程的寄存器上下文复制给子进程<br>   - ret_from_fork  -- 设置子进程开始执行的位置<br><br></code></pre></td></tr></table></figure><h3 id="gdb调试断点相关一些指令-ref4">gdb调试——断点相关一些指令 <ahref="#fn7" class="footnote-ref" id="fnref7"role="doc-noteref"><sup>7</sup></a></h3><table><tbody><tr><td>b/break</td><td>设置断点</td></tr><tr><td>info breakpoints</td><td>查看当前设置的断点信息</td></tr><tr><td>disable</td><td>断点无效，单还是存在</td></tr><tr><td>enable</td><td>断点有效，这两个属于使能指令</td></tr><tr><td>clear/delete</td><td>两条指令有点不同，delete 更凶猛一些</td></tr><tr><td>print</td><td>打印变量或表达式当前的值</td></tr><tr><td>whatis</td><td>显示某个变量或表达式值的数据类型</td></tr><tr><td>set variable 变量=值</td><td>给变量赋值,以上命令参考 <a href="#fn8" class="footnote-ref"id="fnref8" role="doc-noteref"><sup>8</sup></a></td></tr><tr><td>save breakpoint</td><td>保存设置的断点到文件,读取断点设置在启动gdb的时候使用<code>-x</code>选项指定断点设置文件<ahref="#fn9" class="footnote-ref" id="fnref9"role="doc-noteref"><sup>9</sup></a></td></tr><tr><td>help</td><td>帮助，可用于查询指令的详细用法</td></tr></tbody></table><p>调试中设置的一些断点，并导出到<a href="/attach.d/fork.bp">文件</a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">break sys_clone<br>break do_fork<br>break copy_process<br>break dup_task_struct<br>break alloc_thread_info_node<br>break arch_dup_task_struct<br>break copy_thread<br></code></pre></td></tr></table></figure></p><h2id="嵌入到menuosgdb运行调试遇到的问题">嵌入到MenuOs,gdb运行调试遇到的问题</h2><ol type="1"><li>执行fork后，进程停止在了子进程，如何发现的呢？利用上次系统调用作业<code>getpid()</code>查看进程pid发现的。</li><li>gdb 无法加载进去符号表，还没找到好的解决方法　原来编译的时候配置有问题，没办法进行跟踪调试，根据第二节的课程文档重新编译了一遍就OK了。根据文档制作了一个<ahref="/attach.d/moocOsEnvBuild.makefile">Makefile</a>，下载到一个新文件夹执行</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget http://blog.soul11201.com/attach.d/moocOsEnvBuild.makefile &amp;&amp; make -f moocOsEnvBuild.makefile install<br></code></pre></td></tr></table></figure><p>确保terminal窗口大小大于<code>80*19</code>,并且会弹出来一个窗口记得开启下列选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">kernel hacking—&gt;Compile.....<br>[*] compile the kernel with debug info<br></code></pre></td></tr></table></figure><p>等待编译完成，进入menu文件夹执行<code>make qemu</code>直接启动MenuOs或者<code>make qemu-gdb</code>启动MenuOs并且使用gdb跟踪调试</p><section id="footnotes" class="footnotes footnotes-end-of-document"role="doc-endnotes"><hr /><ol><li id="fn1"><p>http://blog.csdn.net/npy_lp/article/details/7292563<ahref="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn2"><p>http://blog.csdn.net/npy_lp/article/details/7292563<ahref="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn3"><p>http://blog.csdn.net/npy_lp/article/details/7292563<ahref="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn4"><p>http://www.jianshu.com/p/5ffdd11a93cd<a href="#fnref4"class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn5"><p>http://blog.csdn.net/npy_lp/article/details/7292563<ahref="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn6"><p>http://www.2cto.com/os/201201/116810.html<ahref="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li><liid="fn7"><p>http://www.cnblogs.com/rosesmall/archive/2012/04/13/2445527.html<ahref="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li><liid="fn8"><p>http://www.cnblogs.com/rosesmall/archive/2012/04/13/2445527.html<ahref="#fnref8" class="footnote-back" role="doc-backlink">↩︎</a></p></li><liid="fn9"><p>http://jingyan.baidu.com/article/f3ad7d0fff191509c3345bd1.html<ahref="#fnref9" class="footnote-back" role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux 内核分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu 一键自动部署 nginx-rtmp</title>
    <link href="/2016/03/29/nginx-rtmp-makefile.html"/>
    <url>/2016/03/29/nginx-rtmp-makefile.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>琐碎细节的东西规范化、流程化，流程规范的东西自动化 ——忘记从哪里看到的了，欢迎作者联系</p></blockquote><p>rtmp 笔记:</p><ul><li><ahref="/2015/08/12/How-to-set-up-your-own-private-RTMP-server-using-nginx/">【译】Howto set up your own private RTMP server using nginx</a></li><li><a href="/2015/08/17/vod/">nginx 点播</a></li><li><a href="2015/09/06/rtmp/">nginx-rtmp-module 总结</a></li><li><ahref="http://p1.soul11201.com/remark-presentation/#1">做的一次简单内部分享</a></li></ul><hr /><p>最近半年一直在搞 nginx-rtmp这一套东西，时不时的需要在某台机器上安装，今天抽空写了一个makefile可以实现一键自动部署。</p><ul><li>系统 Ubuntu 15.10</li><li>nginx 1.8.1 stable</li><li>rtmp master 分支</li></ul><p>运行无问题makefile 如下:(最好先创建一个目录<code>mkdir nginx-rtmp &amp;&amp; cd nginx-rtmp</code>)</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Makefile">PWD = <span class="hljs-variable">$(<span class="hljs-built_in">shell</span> pwd)</span><br><span class="hljs-comment">#process the condition of the file have exists</span><br><span class="hljs-section">default: install</span><br><span class="hljs-section">nginx:</span><br>        echo <span class="hljs-variable">$(PWD)</span>,<span class="hljs-string">&quot;11&quot;</span>        <br>        test  -f &#x27;<span class="hljs-variable">$(PWD)</span>/nginx-1.8.1.tar.gz&#x27; || wget http://nginx.org/download/nginx-1.8.1.tar.gz <br>        test  -f &#x27;<span class="hljs-variable">$(PWD)</span>/nginx-1.8.1.tar.gz&#x27; &amp;&amp; (test -d &#x27;<span class="hljs-variable">$(PWD)</span>/nginx-1.8.1&#x27;   || tar -zxvf nginx-1.8.1.tar.gz)<br><span class="hljs-section">rtmp-mod:</span><br>        test -f &#x27;<span class="hljs-variable">$(PWD)</span>/master.zip&#x27; || wget https://github.com/arut/nginx-rtmp-module/archive/master.zip <br>        test -f &#x27;<span class="hljs-variable">$(PWD)</span>/master.zip&#x27; &amp;&amp; (test -d &#x27;<span class="hljs-variable">$(PWD)</span>/nginx-rtmp-module-master&#x27; || unzip master.zip )<br><span class="hljs-section">dep:</span><br>        sudo apt-get install build-essential libpcre3 libpcre3-dev  libssl-dev<br><br><span class="hljs-section">install: nginx rtmp-mod dep</span><br>        cd nginx-1.8.1 &amp;&amp; ./configure --add-module=../nginx-rtmp-module-master/ --with-debug &amp;&amp; make &amp;&amp; sudo make install<br><br></code></pre></td></tr></table></figure><p>写makefile的时候主要卡在了下了下面两个地方</p><h3 id="获取当前目录">获取当前目录</h3><p>获取当前目录的时候开始使用 <strong>PWD =`pwd`</strong> 在test指令的时候一直不起作用，最后改用<code>PWD = $(shell pwd)</code><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="http://blog.sina.com.cn/s/blog_89fa41ef0100yzhf.html">[1]</span></a></sup>。但是获取的路径的最后面一直有个空格，居然还准备用<code>tr -d ' '</code>去除字符串中的空格<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="http://bbs.chinaunix.net/thread-498702-1-1.html">[3]</span></a></sup>，并没有起什么卵用，反而又出来一堆问题。重新研究自己写的代码，发现写为<code>PWD = $(shell pwd)</code>，问题立马解决。</p><h3 id="测试文件存在">测试文件存在</h3><p>测试文件存在的时候开始使用if指令来做的<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="http://www.cnblogs.com/sunyubo/archive/2011/10/17/2282047.html">[2]</span></a></sup>，但是一直有语法错误，遂改用test指令。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1"class="footnote-text"><span>http://blog.sina.com.cn/s/blog_89fa41ef0100yzhf.html<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2"class="footnote-text"><span>http://www.cnblogs.com/sunyubo/archive/2011/10/17/2282047.html<a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:3"class="footnote-text"><span>http://bbs.chinaunix.net/thread-498702-1-1.html<a href="#fnref:3" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>RTMP</tag>
      
      <tag>音视频</tag>
      
      <tag>软件工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 内核分析 -- 系统调用的工作过程（二）</title>
    <link href="/2016/03/26/mooc-linux-kernel-5.html"/>
    <url>/2016/03/26/mooc-linux-kernel-5.html</url>
    
    <content type="html"><![CDATA[<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br><br>使用gdb跟踪分析一个系统调用内核函数（您上周选择的那一个系统调用），系统调用列表参见http:<span class="hljs-regexp">//</span>codelab.shiyanlou.com<span class="hljs-regexp">/xref/</span>linux-<span class="hljs-number">3.18</span>.<span class="hljs-number">6</span><span class="hljs-regexp">/arch/</span>x86<span class="hljs-regexp">/syscalls/</span>syscall_32.tbl ,推荐在实验楼Linux虚拟机环境下完成实验。<br>根据本周所学知识分析系统调用的过程，从system_call开始到iret结束之间的整个过程，并画出简要准确的流程图，撰写一篇署名博客，并在博客文章中注明“真实姓名（与最后申请证书的姓名务必一致） + 原创作品转载请注明出处 + 《Linux内核分析》MOOC课程http:<span class="hljs-regexp">//m</span>ooc.study.<span class="hljs-number">163</span>.com<span class="hljs-regexp">/course/</span>USTC-<span class="hljs-number">1000029000</span> ”，博客内容的具体要求如下：<br>题目自拟，内容围绕系统调用system_call的处理过程进行；<br>博客内容中需要仔细分析system_call对应的汇编代码的工作过程，特别注意系统调用返回iret之前的进程调度时机等。<br>总结部分需要阐明自己对“系统调用处理过程”的理解，进一步推广到一般的中断处理过程。<br><br></code></pre></td></tr></table></figure><h3 id="用到的-gdb-命令">用到的 gdb 命令</h3><p>已知的含义功能的就不赘述了。</p><p>|指令/参数|功能| |---|| |file |加载符号表| |b|| |s|||finish|完成函数执行，跳出函数| |n|| |c|| |l||</p><h3 id="用到的-qemu-参数">用到的 qemu 参数</h3><table><tbody><tr><td>-s</td><td></td></tr><tr><td>-S</td><td></td></tr></tbody></table><h3 id="系统调用断点设置">系统调用断点设置</h3><p>系统调用列表http://codelab.shiyanlou.com/xref/linux-3.18.6/arch/x86/syscalls/syscall_32.tbl格式为</p><p><code>&lt;number&gt; &lt;abi&gt; &lt;name&gt; &lt;entry point&gt; &lt;compat entry point&gt;</code>含义为：</p><table><tbody><tr><td>number</td><td>系统调用号</td></tr><tr><td>abi</td><td>cpu 架构</td></tr><tr><td>name</td><td>系统调用名</td></tr><tr><td>entry point</td><td>系统调用，中断服务处理程序名</td></tr><tr><td>compat entry point</td><td>entry point 别名</td></tr></tbody></table><h3 id="进程调度的整个流程">进程调度的整个流程</h3><ol type="1"><li><p>调用 <ahref="http://codelab.shiyanlou.com/xref/linux-3.18.6/init/main.c#561"><code>trap_init()</code></a><ahref="http://codelab.shiyanlou.com/xref/linux-3.18.6/arch/x86/kernel/traps.c#838">初始系统中断向量表</a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_X86_32</span><br>set_system_trap_gate(SYSCALL_VECTOR, &amp;system_call);<br>set_bit(SYSCALL_VECTOR, used_vectors);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure></p></li><li><p>调用中断处理程序 <ahref="http://codelab.shiyanlou.com/xref/linux-3.18.6/arch/x86/kernel/entry_32.S#490">system_call</a></p></li></ol><ul><li>保存现场 SAVE_ALL</li><li>根据具体是系统调用号，调用具体的中断服务处理程序 <ahref="http://codelab.shiyanlou.com/xref/linux-3.18.6/arch/x86/kernel/entry_32.S#502"><code>call *sys_call_table(,%eax,4)</code></a></li><li>信号处理、进程调度，其代码执行流程简化如下：<ul><li><ahref="http://codelab.shiyanlou.com/xref/linux-3.18.6/arch/x86/kernel/entry_32.S#513"><code>jne syscall_exit_work</code></a></li><li><ahref="http://codelab.shiyanlou.com/xref/linux-3.18.6/arch/x86/kernel/entry_32.S#658"><code>jz work_pending</code></a></li><li><ahref="http://codelab.shiyanlou.com/xref/linux-3.18.6/arch/x86/kernel/entry_32.S#586"><code>work_resched</code><code>call schedule</code></a></li></ul></li></ul><ol start="3" type="1"><li>调用结束，恢复 <ahref="http://codelab.shiyanlou.com/xref/linux-3.18.6/arch/x86/kernel/entry_32.S#515"><code>restore_all</code></a></li></ol><!--system_call 断点可以设置，但是程序运行的时候会直接跳过去 -->]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux 内核分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《三字经》</title>
    <link href="/2016/03/24/%E4%B8%89%E5%AD%97%E7%BB%8F.html"/>
    <url>/2016/03/24/%E4%B8%89%E5%AD%97%E7%BB%8F.html</url>
    
    <content type="html"><![CDATA[<p>王应麟</p><p>http://so.gushiwen.org/guwen/bookv_2306.aspx</p><h2 id="古诗文网">古诗文网</h2><p>人之初，性本善。性相近，习相远。 苟不教，性乃迁。教之道，贵以专。昔孟母，择邻处。子不学，断机杼。 窦燕山，有义方。教五子，名俱扬。养不教，父之过。教不严，师之惰。 子不学，非所宜。幼不学，老何为。玉不琢，不成器。人不学，不知义。 为人子，方少时。亲师友，习礼仪。香九龄，能温席。孝于亲，所当执。 融四岁，能让梨。弟于长，宜先知。首孝悌，次见闻。知某数，识某文。 一而十，十而百。百而千，千而万。三才者，天地人。三光者，日月星。 三纲者，君臣义。父子亲，夫妇顺。曰春夏，曰秋冬。此四时，运不穷。 曰南北，曰西东。此四方，应乎中。曰水火，木金土。此五行，本乎数。 曰仁义，礼智信。此五常，不容紊。稻粱菽，麦黍稷。此六谷，人所食。 马牛羊，鸡犬豕。此六畜，人所饲。曰喜怒，曰哀惧。爱恶欲，七情具。 青赤黄，及黑白。此五色，目所识。酸苦甘，及辛咸。此五味，口所含。 膻焦香，及腥朽。此五臭，鼻所嗅。匏土革，木石金。丝与竹，乃八音。 曰平上，曰去入。此四声，宜调协。高曾祖，父而身。身而子，子而孙。 自子孙，至玄曾。乃九族，人之伦。父子恩，夫妇从。兄则友，弟则恭。 长幼序，友与朋。君则敬，臣则忠。此十义，人所同。当师叙，勿违背。 斩齐衰，大小功。至缌麻，五服终。礼乐射，御书数。古六艺，今不具。 惟书学，人共遵。既识字，讲说文。有古文，大小篆。隶草继，不可乱。 若广学，惧其繁。但略说，能知原。凡训蒙，须讲究。详训诂，明句读。 为学者，必有初。小学终，至四书。论语者，二十篇。群弟子，记善言。 孟子者，七篇止。讲道德，说仁义。作中庸，子思笔。中不偏，庸不易。 作大学，乃曾子。自修齐，至平治。孝经通，四书熟。如六经，始可读。 诗书易，礼春秋。号六经，当讲求。有连山，有归藏。有周易，三易详。 有典谟，有训诰。有誓命，书之奥。我周公，作周礼。著六官，存治体。 大小戴，注礼记。述圣言，礼乐备。曰国风，曰雅颂。号四诗，当讽咏。 诗既亡，春秋作。寓褒贬，别善恶。三传者，有公羊。有左氏，有谷梁。 经既明，方读子。撮其要，记其事。五子者，有荀扬。文中子，及老庄。 经子通，读诸史。考世系，知始终。自羲农，至黄帝。号三皇，居上世。 唐有虞，号二帝。相揖逊，称盛世。夏有禹，商有汤。周武王，称三王。 夏传子，家天下。四百载，迁夏社。汤伐夏，国号商。六百载，至纣亡。 周武王，始诛纣。八百载，最长久。周辙东，王纲坠。逞干戈，尚游说。 始春秋，终战国。五霸强，七雄出。嬴秦氏，始兼并。传二世，楚汉争。 高祖兴，汉业建。至孝平，王莽篡。光武兴，为东汉。四百年，终于献。 魏蜀吴，争汉鼎。号三国，迄两晋。宋齐继，梁陈承。为南朝，都金陵。 北元魏，分东西。宇文周，与高齐。迨至隋，一土宇。不再传，失统绪。 唐高祖，起义师。除隋乱，创国基。二十传，三百载。梁灭之，国乃改。 梁唐晋，及汉周。称五代，皆有由。炎宋兴，受周禅。十八传，南北混。 辽与金，皆称帝。元灭金，绝宋世。舆图广，超前代。九十年，国祚废。 太祖兴，国大明。号洪武，都金陵。迨成祖，迁燕京。十六世，至崇祯。 权阉肆，寇如林。李闯出，神器焚。清世祖，膺景命。靖四方，克大定。 由康雍，历乾嘉。民安富，治绩夸。道咸间，变乱起。始英法，扰都鄙。 同光后，宣统弱。传九帝，满清殁。革命兴，废帝制。立宪法，建民国。 古今史，全在兹。载治乱，知兴衰。史虽繁，读有次。史记一，汉书二。 后汉三，国志四。兼证经，参通鉴。读史者，考实录。通古今，若亲目。 昔仲尼，师项橐。古圣贤，尚勤学。赵中令，读鲁论。彼既仕，学且勤。 披蒲编，削竹简。彼无书，且知勉。头悬梁，锥刺股。彼不教，自勤苦。 如囊萤，如映雪。家虽贫，学不辍。如负薪，如挂角。身虽劳，犹苦卓。 苏老泉，二十七。始发愤，读书籍。彼既老，犹悔迟。尔小生，宜早思。 若梁灏，八十二。对大廷，魁多士。彼既成，众称异。尔小生，宜立志。 莹八岁，能咏诗。泌七岁，能赋棋。彼颖悟，人称奇。尔幼学，当效之。 蔡文姬，能辩琴。谢道韫，能咏吟。彼女子，且聪敏。尔男子，当自警。 唐刘晏，方七岁。举神童，作正字。口而诵，心而惟。朝于斯，夕于斯。 晏虽幼，身已仕。有为者，亦若是。犬守夜，鸡司晨。苟不学，曷为人。 蚕吐丝，蜂酿蜜。人不学，不如物。幼而学，壮而行。上致君，下泽民。 扬名声，显父母。光于前，裕于后。人遗子，金满赢。我教子，唯一经。 勤有功，戏无益。戒之哉，宜勉力。</p>]]></content>
    
    
    
    <tags>
      
      <tag>古文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 内核分析 -- 系统调用的工作过程</title>
    <link href="/2016/03/20/mooc-linux-kernel-4.html"/>
    <url>/2016/03/20/mooc-linux-kernel-4.html</url>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>选择一个系统调用（13号系统调用time除外），系统调用列表参见http://codelab.shiyanlou.com/xref/linux-3.18.6/arch/x86/syscalls/syscall_32.tbl<br><br>参考视频中的方式使用库函数API和C代码中嵌入汇编代码两种方式使用同一个系统调用<br><br>根据本周所学知识分析系统调用的工作过程，撰写一篇署名博客，并在博客文章中注明“真实姓名（与最后申请证书的姓名务必一致） + 原创作品转载请注明出处 + 《Linux内核分析》MOOC课程http://mooc.study.163.com/course/USTC-1000029000 ”，博客内容的具体要求如下：<br><br>        题目自拟，内容围绕系统调用的工作机制进行<br>        博客中需要使用实验截图<br>        博客内容中需要仔细分析汇编代码调用系统调用的工作过程，特别是参数的传递的方式等。<br>        总结部分需要阐明自己对“系统调用的工作机制”的理解。<br></code></pre></td></tr></table></figure><h2 id="得到当前进程的进程号---两种实现方式">得到当前进程的进程号--两种实现方式</h2><p>getpid()函数功能是返回<code>pid_t</code>（即<code>int</code>）类型的进程号，具体使用可以使用<code>man getpid</code>查看，C代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,getpid());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>汇编代码实现，就是发起一个软中断，调起系统处理程序。其系统调用号可以在http://codelab.shiyanlou.com/xref/linux-3.18.6/arch/x86/syscalls/syscall_32.tbl#29此处看到。具体代码如下所示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">pid_t</span> pid = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov $20,%%eax\n\t&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;int $0x80\n\t&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov %%eax,%0&quot;</span></span><br><span class="hljs-params">        :<span class="hljs-string">&quot;=m&quot;</span>(pid)</span><br><span class="hljs-params">    )</span>;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pid: ===asm:%d\n&quot;</span>,pid);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="系统调用的整个流程">系统调用的整个流程</h2><p>系统调用简单来说，让操作系统来做一些在用户程序不易做到的事情，让操作系统代替用户程序去做。添加了这样一层，这样一来就会在下面这几个层次上带来很多的好处：</p><ul><li>可以避免用户程序可以直接操作硬件</li><li>可移植性</li><li>安全性</li></ul><p>简单总结一下系统调用的整个流程基本上就是：</p><ol type="1"><li>用户处理程序（上面的C程序）</li><li>api(<code>glibc</code> 封装的库函数 <code>getpid()</code>)</li><li>软中断（<code>int $0x80</code>,使程序陷入到内核态）</li><li>根据<code>系统调用号</code>，查找中断向量表</li><li>调用中断处理程序。</li></ol><h2 id="检验汇编实现正确与否">检验汇编实现正确与否</h2><p>写完汇编代码后怎么校检一下程序是怎么正确的呢，最简单的方式就和已有的标准程序结果对比一下，也就是对比一下C程序结果和汇编程序输出的结果。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">pid_t</span> pid = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span><span class="hljs-params">(</span><br><span class="hljs-params">     <span class="hljs-comment">//   &quot;mov $0 ,%%ebx;\n\t&quot;  //传参数，返回值，不同情况，具体起怎么起的作用，还需要搞一下。</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov $20,%%eax\n\t&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;int $0x80\n\t&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov %%eax,%0&quot;</span></span><br><span class="hljs-params">        :<span class="hljs-string">&quot;=m&quot;</span>(pid)</span><br><span class="hljs-params">    )</span>;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pid: ===asm:%d===c:%d====\n&quot;</span>,pid,getpid());<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux 内核分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 内核分析 -- Linux系统启动过程</title>
    <link href="/2016/03/13/mooc-linux-kernel-3.html"/>
    <url>/2016/03/13/mooc-linux-kernel-3.html</url>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">实验要求：<br><br>- 使用gdb跟踪调试内核从start_kernel到init进程启动<br>- 详细分析从start_kernel到init进程启动的过程并结合实验截图撰写一篇署名博客，并在博客文章中注明“真实姓名（与最后申请证书的姓名务必一致） + 原创作品转载请注明出处 + 《Linux内核分析》MOOC课程http://mooc.study.163.com/course/USTC-1000029000 ”，博客内容的具体要求如下：<br>        题目自拟，内容围绕Linux内核的启动过程，即从start_kernel到init进程启动；<br>        博客中需要使用实验截图<br>        博客内容中需要仔细分析start_kernel函数的执行过程<br>        总结部分需要阐明自己对“Linux系统启动过程”的理解，尤其是idle进程、1号进程是怎么来的。<br><br></code></pre></td></tr></table></figure><h2id="使用gdb跟踪调试内核从start_kernel到init进程启动">使用gdb跟踪调试内核从start_kernel到init进程启动</h2><p>在实验楼实验环境使用到的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">qemu -kernel linux-3.18.6/arch/x86/boot/bzImage -initrd rootfs.img -s -S # 关于-s和-S选项的说明：<br> -S freeze CPU at startup (use ’c’ to start execution)<br> -s shorthand for -gdb tcp::1234 若不想使用1234端口，则可以使用-gdb tcp:xxxx来取代-s选项<br><br>gdb<br>（gdb）file linux-3.18.6/vmlinux # 在gdb界面中targe remote之前加载符号表<br>（gdb）target remote:1234 # 建立gdb和gdbserver之间的连接,按c 让qemu上的Linux继续运行<br>（gdb）break start_kernel # 断点的设置可以在target remote之前，也可以在之后<br>（gdb）break rest_init # 设置进入函数rest_init 的断点<br>（gdb）c # 运行到下一个断点<br>（gdb）n # 单步调试<br>（gdb）l # 显示当前运行位置代码<br></code></pre></td></tr></table></figure><p>部分截图</p><p><img src="/assets/imgs/moocos-3.png" /></p><h2 id="start_kernel函数中的初始化">start_kernel函数中的初始化</h2><p>0号进程，即系统从启动到结束都存在的进程，执行<code>start_kernel</code>函数进行内核相关模块的初始化,代码如下。在最后的<ahref="http://codelab.shiyanlou.com/xref/linux-3.18.6/init/main.c#rest_init"><code>rest_init();</code></a>函数中使用kthread函数http://codelab.shiyanlou.com/xref/linux-3.18.6/init/main.c#403创建了1号用户进程，在http://codelab.shiyanlou.com/xref/linux-3.18.6/init/main.c#405这里创建了内核线程，用于进行系统的资源管理。最后在http://codelab.shiyanlou.com/xref/linux-3.18.6/init/main.c#418启动了idle进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><code class="hljs c">asmlinkage __visible <span class="hljs-type">void</span> __init <span class="hljs-title function_">start_kernel</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">char</span> *command_line;<br><span class="hljs-type">char</span> *after_dashes;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Need to run as early as possible, to initialize the</span><br><span class="hljs-comment"> * lockdep hash:</span><br><span class="hljs-comment"> */</span><br>lockdep_init();<br>set_task_stack_end_magic(&amp;init_task);<br>smp_setup_processor_id();<br>debug_objects_early_init();<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Set up the the initial canary ASAP:</span><br><span class="hljs-comment"> */</span><br>boot_init_stack_canary();<br><br>cgroup_init_early();<br><br>local_irq_disable();<br>early_boot_irqs_disabled = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Interrupts are still disabled. Do necessary setups, then</span><br><span class="hljs-comment"> * enable them</span><br><span class="hljs-comment"> */</span><br>boot_cpu_init();<br>page_address_init();<br>pr_notice(<span class="hljs-string">&quot;%s&quot;</span>, linux_banner);<br>setup_arch(&amp;command_line);<br>mm_init_cpumask(&amp;init_mm);<br>setup_command_line(command_line);<br>setup_nr_cpu_ids();<br>setup_per_cpu_areas();<br>smp_prepare_boot_cpu();<span class="hljs-comment">/* arch-specific boot-cpu hooks */</span><br><br>build_all_zonelists(<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>page_alloc_init();<br><br>pr_notice(<span class="hljs-string">&quot;Kernel command line: %s\n&quot;</span>, boot_command_line);<br>parse_early_param();<br>after_dashes = parse_args(<span class="hljs-string">&quot;Booting kernel&quot;</span>,<br>  static_command_line, __start___param,<br>  __stop___param - __start___param,<br>  <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, &amp;unknown_bootoption);<br><span class="hljs-keyword">if</span> (!IS_ERR_OR_NULL(after_dashes))<br>parse_args(<span class="hljs-string">&quot;Setting init args&quot;</span>, after_dashes, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>,<br>   set_init_arg);<br><br>jump_label_init();<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * These use large bootmem allocations and must precede</span><br><span class="hljs-comment"> * kmem_cache_init()</span><br><span class="hljs-comment"> */</span><br>setup_log_buf(<span class="hljs-number">0</span>);<br>pidhash_init();<br>vfs_caches_init_early();<br>sort_main_extable();<br>trap_init();<br>mm_init();<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Set up the scheduler prior starting any interrupts (such as the</span><br><span class="hljs-comment"> * timer interrupt). Full topology setup happens at smp_init()</span><br><span class="hljs-comment"> * time - but meanwhile we still have a functioning scheduler.</span><br><span class="hljs-comment"> */</span><br>sched_init();<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Disable preemption - early bootup scheduling is extremely</span><br><span class="hljs-comment"> * fragile until we cpu_idle() for the first time.</span><br><span class="hljs-comment"> */</span><br>preempt_disable();<br><span class="hljs-keyword">if</span> (WARN(!irqs_disabled(),<br> <span class="hljs-string">&quot;Interrupts were enabled *very* early, fixing it\n&quot;</span>))<br>local_irq_disable();<br>idr_init_cache();<br>rcu_init();<br>context_tracking_init();<br>radix_tree_init();<br><span class="hljs-comment">/* init some links before init_ISA_irqs() */</span><br>early_irq_init();<br>init_IRQ();<br>tick_init();<br>rcu_init_nohz();<br>init_timers();<br>hrtimers_init();<br>softirq_init();<br>timekeeping_init();<br>time_init();<br>sched_clock_postinit();<br>perf_event_init();<br>profile_init();<br>call_function_init();<br>WARN(!irqs_disabled(), <span class="hljs-string">&quot;Interrupts were enabled early\n&quot;</span>);<br>early_boot_irqs_disabled = <span class="hljs-literal">false</span>;<br>local_irq_enable();<br><br>kmem_cache_init_late();<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * HACK ALERT! This is early. We&#x27;re enabling the console before</span><br><span class="hljs-comment"> * we&#x27;ve done PCI setups etc, and console_init() must be aware of</span><br><span class="hljs-comment"> * this. But we do want output early, in case something goes wrong.</span><br><span class="hljs-comment"> */</span><br>console_init();<br><span class="hljs-keyword">if</span> (panic_later)<br>panic(<span class="hljs-string">&quot;Too many boot %s vars at `%s&#x27;&quot;</span>, panic_later,<br>      panic_param);<br><br>lockdep_info();<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Need to run this when irqs are enabled, because it wants</span><br><span class="hljs-comment"> * to self-test [hard/soft]-irqs on/off lock inversion bugs</span><br><span class="hljs-comment"> * too:</span><br><span class="hljs-comment"> */</span><br>locking_selftest();<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_BLK_DEV_INITRD</span><br><span class="hljs-keyword">if</span> (initrd_start &amp;&amp; !initrd_below_start_ok &amp;&amp;<br>    page_to_pfn(virt_to_page((<span class="hljs-type">void</span> *)initrd_start)) &lt; min_low_pfn) &#123;<br>pr_crit(<span class="hljs-string">&quot;initrd overwritten (0x%08lx &lt; 0x%08lx) - disabling it.\n&quot;</span>,<br>    page_to_pfn(virt_to_page((<span class="hljs-type">void</span> *)initrd_start)),<br>    min_low_pfn);<br>initrd_start = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>page_cgroup_init();<br>debug_objects_mem_init();<br>kmemleak_init();<br>setup_per_cpu_pageset();<br>numa_policy_init();<br><span class="hljs-keyword">if</span> (late_time_init)<br>late_time_init();<br>sched_clock_init();<br>calibrate_delay();<br>pidmap_init();<br>anon_vma_init();<br>acpi_early_init();<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_X86</span><br><span class="hljs-keyword">if</span> (efi_enabled(EFI_RUNTIME_SERVICES))<br>efi_enter_virtual_mode();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_X86_ESPFIX64</span><br><span class="hljs-comment">/* Should be run before the first non-init thread is created */</span><br>init_espfix_bsp();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>thread_info_cache_init();<br>cred_init();<br>fork_init(totalram_pages);<br>proc_caches_init();<br>buffer_init();<br>key_init();<br>security_init();<br>dbg_late_init();<br>vfs_caches_init(totalram_pages);<br>signals_init();<br><span class="hljs-comment">/* rootfs populating might need page-writeback */</span><br>page_writeback_init();<br>proc_root_init();<br>cgroup_init();<br>cpuset_init();<br>taskstats_init_early();<br>delayacct_init();<br><br>check_bugs();<br><br>sfi_init_late();<br><br><span class="hljs-keyword">if</span> (efi_enabled(EFI_RUNTIME_SERVICES)) &#123;<br>efi_late_init();<br>efi_free_boot_services();<br>&#125;<br><br>ftrace_init();<br><br><span class="hljs-comment">/* Do the rest non-__init&#x27;ed, we&#x27;re now alive */</span><br>rest_init();<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux 内核分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dash 笔记</title>
    <link href="/2016/03/11/dashjsoverview.html"/>
    <url>/2016/03/11/dashjsoverview.html</url>
    
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>从使用的角度来看，https://en.wikipedia.org/wiki/Dynamic_Adaptive_Streaming_over_HTTP对dash协议已经有非常详细的描述。这只做一点简要的笔记。DASH (DynamicAdaptive Streaming over HTTP，又名MPEG-DASH)是一种<ahref="https://en.wikipedia.org/wiki/Adaptive_bitrate_streaming">自适应码流技术</a>，类似于HLS,其特点总的说就是</p><ul><li>码率自适应，可以实现最大可能的观看质量较高的视频</li><li>跨设备，协议。可以从一些协议转化成另外一些协议，在不同的设备上观看</li><li>可以利用已有的 HTTP Web Server 基础设施资源，</li></ul><p><a href="https://wmspanel.com/nimble">nimble</a>和<ahref="https://developer.bitcodin.com/doc/getting-started">bitcodin</a>的下面两张图最能说明</p><p><img src="/assets/imgs/bitcodindash.jpg" /> <imgsrc="/assets/imgs/NimbleStreamerFeature.png" /></p><p>相关类似技术</p><ul><li>Adobe Systems HTTP Dynamic Streaming</li><li>Apple Inc. HTTP Live Streaming (HLS)</li><li>Microsoft Smooth Streaming</li></ul><p>支持的编码格式</p><ul><li>h.264</li><li>h.265</li><li>vp9</li></ul><p>支持的容器格式</p><ul><li><ahref="https://en.wikipedia.org/wiki/ISO_base_media_file_format">ISO basemedia file format</a> (e.g. MP4 file format)</li><li><a href="https://en.wikipedia.org/wiki/MPEG_transport_stream">MPEG-2Transport Stream</a></li></ul><p>将dash标准商业化，实现的相关组织</p><ul><li>DASH Industry Forum (DASH-IF)</li><li>Microsoft,</li><li>Netflix</li><li>Google</li><li>Ericsson</li><li>Samsung</li><li>Adobe</li><li>其他</li></ul><h2 id="样例">样例</h2><p>开始准备使用nginx-rtmp +dash.js 来做实现，dash.js无法播放，使用 <ahref="https://github.com/arut/dash.js">arut修改过的dashjs</a>仍旧无法播放，看来还是对dash的支持还是有点问题，使用<ahref="http://dashif.org/reference/players/javascript/v2.0.0/samples/dash-if-reference-player/index.html#">dashif</a>给出的视频样例来做一个<ahref="/demo/dashjs.demo.html">demo测试</a>，感觉还行，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://cdn.dashjs.org/latest/dash.all.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onLoad</span>=<span class="hljs-string">&quot;Dash.createAll()&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dashjs-player&quot;</span> <span class="hljs-attr">autoplay</span> <span class="hljs-attr">preload</span>=<span class="hljs-string">&quot;none&quot;</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://dash.edgesuite.net/dash264/TestCases/1a/sony/SNE_DASH_SD_CASE1A_REVISED.mpd&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;application/dash+xml&quot;</span>/&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>软件工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用yii2框架开发的一点总结</title>
    <link href="/2016/03/08/php-yii2-summary.html"/>
    <url>/2016/03/08/php-yii2-summary.html</url>
    
    <content type="html"><![CDATA[<p>噼里啪啦，最近使用yii2框架开发了几个项目（包括开源的<ahref="https://github.com/noname007/learn-yii2">rss</a>，<ahref="https://github.com/noname007/diandiandian">企业点餐系统</a>)）。其中使用到了GridView，gii，debug，migration，rbac，yii2-user，bootstrap等模块。马上又要搞其他的东西去了，忘记东西的速度很快，所以下面总结一下整个过程中写代码的心得。</p><h2 id="熟悉领域问题概念">熟悉领域问题、概念</h2><p>很多问题是问题领域不熟悉导致的，比如在写前端的时候bootstrap模块直接看代码注释文档，都不是特别理解在说什么，看源码，更是看不懂源码的思路逻辑，感觉肯定那里理解的出了问题，才导致自己使用工具才这么吃力，回头一想既然bootstrap插件是对bootstrap的一层封装，肯定是bootstrap里面的概念没理解清楚，然后就对着类名去搜bootstrap里面的一些概念，果然基本都有对应的，算是过去了这道坎。</p><h2 id="分清角色责任">分清角色、责任</h2><p>不要重复造轮子，一个项目即使再怎么小，还是一个系统，会有大量的细节去要处理，如果自己真的要造轮子，真是难于上青天。就比如说我写的项目分这么几大块，基于角色的权限验证，前端，缓存，数据库，再加上业务上的逻辑处理，如果从头造轮子，简直累死，而且也说明自己分不清楚自己的在项目中的角色，在这个时期自己既是项目中的搬砖的程序员，还是整个系统的设计人员，还要和老大提出的需求来回进行确认系统到底要设计成什么样子的，这个时期更过的精力放在后两者角色中，而不是喜欢造轮子的程序员角色。解决问题的最好的方式是，选择模块化比较好的框架，并且还附带有大量的已经实现各种常见业务的第三方模块。框架本身基本上就能保证住项目的质量，模块化比较好，说明后期易于替换，优化。所以就决定使用yii2框架，其本身十分强大，语法也很是喜欢，加上及其附带的第三方模块，极大的提升了效率。<!-- 在编写界面代码的时候，php语言中的匿名函数提供了巨大的帮助。 --></p><h2 id="抽象是一把利剑">抽象是一把利剑</h2><p>对付复杂化细节的有利方式就是使用抽象。比如这次使用了几家的服务做一间事情，每一家的服务不太一样，所以这时候对每一家提供的服务做一个对象抽象，这样就屏蔽了使用这个服务的程序对细节的依赖，而只是对这个抽象的依赖。具体抽象的方式就是使用了策略模式，这个模式想想真的很重要，比如ffmpeg里面针对解码就是用了策略模式的思想，还可以实现软件的热插拔，也可以提高程序的健壮性(例如这家的服务挂了，我就使用下一家的，如果全挂了，那就真没辙了，赶紧速错)，</p><h2 id="这是一个流程问题">这是一个流程问题</h2><p>做一个系统和一个项目中一点最重要的区别感觉就是，把整个系统的流程完全跑通优先级提高一些，而不能想做一点的时候下很大的劲去做优化，调优。并且还要尽快实现，这样就尽可能的保证有一个比较小而简单的原型，小，设计出了问题，就可以方便修改。</p><h2 id="扩展性">扩展性</h2><p>像yii2这种框架就比较好，提供了事件、行为、模块等方式可以很好的实现扩展。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Yii2</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 内核分析 -- 进程的启动和进程的切换机制</title>
    <link href="/2016/03/05/mooc-linux-kernel-2.html"/>
    <url>/2016/03/05/mooc-linux-kernel-2.html</url>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">实验要求：<br><br>完成一个简单的时间片轮转多道程序内核代码，代码见视频中或从[mykernel](https://github.com/mengning/mykernel)找。<br>详细分析该精简内核的源代码并给出实验截图，撰写一篇署名博客，并在博客文章中注明“真实姓名（与最后申请证书的姓名务必一致） + 原创作品转载请注明出处 + 《Linux内核分析》MOOC课程http://mooc.study.163.com/course/USTC-1000029000 ”，博客内容的具体要求如下：<br><br>- 题目自拟，内容围绕操作系统是如何工作的进行；<br>- 博客中需要使用实验截图<br>- 博客内容中需要仔细分析进程的启动和进程的切换机制<br>- 总结部分需要阐明自己对“操作系统是如何工作的”理解。<br></code></pre></td></tr></table></figure><h2 id="中断">中断</h2><p>现代计算机实现多道程序设计的基础是出现了中断这一技术。中断意如其名，打断你原来的正在做的事情，比如说放假的时候在家看苦逼的写着作业的时候，突然有人打来电话约你。应约，还是继续写作业，具体你会怎么做呢？具体的行为，可以认为是中断处理程序。</p><h2 id="进程调度实现">进程调度实现</h2><ol type="1"><li>程序加载完后就会执行这段<ahref="https://github.com/mengning/mykernel/blob/master/mymain.c#L25-L57">初始化代码</a></li><li>同时还会检测时钟中断，并调用这段<ahref="https://github.com/mengning/mykernel/blob/master/myinterrupt.c#L27-L38">中断处理程序</a>，</li></ol><h2 id="my_start_kernel-都做了写什么呢">my_start_kernel都做了写什么呢？</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __init <span class="hljs-title function_">my_start_kernel</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> pid = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-comment">/* Initialize process 0*/</span><br>    task[pid].pid = pid;<br>    task[pid].state = <span class="hljs-number">0</span>;<span class="hljs-comment">/* -1 unrunnable, 0 runnable, &gt;0 stopped */</span><br>    task[pid].task_entry = task[pid].thread.ip = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)my_process;<br>    task[pid].thread.sp = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)&amp;task[pid].<span class="hljs-built_in">stack</span>[KERNEL_STACK_SIZE<span class="hljs-number">-1</span>];<br>    task[pid].next = &amp;task[pid];<br>    <span class="hljs-comment">/*fork more process */</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;MAX_TASK_NUM;i++)<br>    &#123;<br>        <span class="hljs-built_in">memcpy</span>(&amp;task[i],&amp;task[<span class="hljs-number">0</span>],<span class="hljs-keyword">sizeof</span>(tPCB));<br>        task[i].pid = i;<br>        task[i].state = <span class="hljs-number">-1</span>;<br>        task[i].thread.sp = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)&amp;task[i].<span class="hljs-built_in">stack</span>[KERNEL_STACK_SIZE<span class="hljs-number">-1</span>];<br>        task[i].next = task[i<span class="hljs-number">-1</span>].next;<br>        task[i<span class="hljs-number">-1</span>].next = &amp;task[i];<br>    &#125;<br>    <span class="hljs-comment">/* start process 0 by task[0] */</span><br>    pid = <span class="hljs-number">0</span>;<br>    my_current_task = &amp;task[pid];<br><br>    <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-string">&quot;movl %1,%%esp\n\t&quot;</span>     <span class="hljs-comment">/* set task[pid].thread.sp to esp */</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pushl %1\n\t&quot;</span>          <span class="hljs-comment">/* push ebp */</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pushl %0\n\t&quot;</span>          <span class="hljs-comment">/* push task[pid].thread.ip */</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;ret\n\t&quot;</span>               <span class="hljs-comment">/* pop task[pid].thread.ip to eip */</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;popl %%ebp\n\t&quot;</span></span><br><span class="hljs-params">        : </span><br><span class="hljs-params">        : <span class="hljs-string">&quot;c&quot;</span> (task[pid].thread.ip),<span class="hljs-string">&quot;d&quot;</span> (task[pid].thread.sp)   <span class="hljs-comment">/* input c or d mean %ecx/%edx*/</span></span><br><span class="hljs-params">    )</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>初始化代码做的事情</p><ul><li>创建进程</li><li>初始化每个进程的堆栈位置</li><li>进程之间的调度顺序，其实就是一个接一个的执行，没有什么优先级</li><li>初始化根进程</li><li>每个进程的功能都是一样的，指向了<ahref="https://github.com/mengning/mykernel/blob/master/mymain.c#L58-L75"><code>void my_process(void)</code></a>，即代码注释中所说的fork</li><li>启动pid=0的进程，即代码中嵌入式汇编代码</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">&#123;<br>    <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-string">&quot;movl %1,%%esp\n\t&quot;</span>     <span class="hljs-comment">/* set task[pid].thread.sp to esp */</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pushl %1\n\t&quot;</span>          <span class="hljs-comment">/* push ebp */</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pushl %0\n\t&quot;</span>          <span class="hljs-comment">/* push task[pid].thread.ip */</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;ret\n\t&quot;</span>               <span class="hljs-comment">/* pop task[pid].thread.ip to eip */</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;popl %%ebp\n\t&quot;</span></span><br><span class="hljs-params">        : </span><br><span class="hljs-params">        : <span class="hljs-string">&quot;c&quot;</span> (task[pid].thread.ip),<span class="hljs-string">&quot;d&quot;</span> (task[pid].thread.sp)   <span class="hljs-comment">/* input c or d mean %ecx/%edx*/</span></span><br><span class="hljs-params">    )</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码什么做了那些事情那呢？</p><ul><li>切换堆栈</li></ul><p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-string">&quot;movl %1,%%esp\n\t&quot;</span>     <span class="hljs-comment">/* set task[pid].thread.sp to esp */</span><br><span class="hljs-string">&quot;pushl %1\n\t&quot;</span>          <span class="hljs-comment">/* push ebp */</span><br></code></pre></td></tr></table></figure></p><ul><li>指令跳转，使cpu指向进程代码入口</li></ul><p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-string">&quot;pushl %0\n\t&quot;</span>          <span class="hljs-comment">/* push task[pid].thread.ip */</span><br><span class="hljs-string">&quot;ret\n\t&quot;</span>               <span class="hljs-comment">/* pop task[pid].thread.ip to eip */</span><br></code></pre></td></tr></table></figure></p><h2 id="进程如何切换的">进程如何切换的？</h2><p>从<code>void my_process(void)</code>，可以看出进程是每经过一段时间检查一下（利用硬件中断实现的）是否需要执行<code>my_schedule();</code>函数进行进程切换（根据<code>my_need_sched</code>来判断）。</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">void</span> <span class="hljs-title function_">my_process</span>(<span class="hljs-params">void</span>)<br>&#123;<br>    int <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-variable">i</span><span class="hljs-operator">+</span><span class="hljs-operator">+</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">i</span><span class="hljs-operator">%</span><span class="hljs-number">10000000</span> <span class="hljs-operator">==</span> <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-title function_">printk</span>(<span class="hljs-variable">KERN_NOTICE</span> <span class="hljs-string">&quot;this is process %d -<span class="hljs-char escape_">\n</span>&quot;</span>,<span class="hljs-variable">my_current_task</span><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span><span class="hljs-variable">pid</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">my_need_sched</span> <span class="hljs-operator">==</span> <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-variable">my_need_sched</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-title function_">my_schedule</span>();<br>            &#125;<br>            <span class="hljs-title function_">printk</span>(<span class="hljs-variable">KERN_NOTICE</span> <span class="hljs-string">&quot;this is process %d +<span class="hljs-char escape_">\n</span>&quot;</span>,<span class="hljs-variable">my_current_task</span><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span><span class="hljs-variable">pid</span>);<br>        &#125;     <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面分析一下进程切换的时候所做的一些事情。（去除了部分代码，以两个都是在运行态进程间的切换代码为例）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">my_schedule</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <br>        ...<br>        ...<br>        <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span><span class="hljs-params">(   </span><br><span class="hljs-params">            <span class="hljs-string">&quot;pushl %%ebp\n\t&quot;</span>       <span class="hljs-comment">/* save ebp */</span></span><br><span class="hljs-params">            <span class="hljs-string">&quot;movl %%esp,%0\n\t&quot;</span>     <span class="hljs-comment">/* save esp */</span></span><br><span class="hljs-params">            <span class="hljs-string">&quot;movl %2,%%esp\n\t&quot;</span>     <span class="hljs-comment">/* restore  esp */</span></span><br><span class="hljs-params">            <span class="hljs-string">&quot;movl $1f,%1\n\t&quot;</span>       <span class="hljs-comment">/* save eip */</span>  </span><br><span class="hljs-params">            <span class="hljs-string">&quot;pushl %3\n\t&quot;</span> </span><br><span class="hljs-params">            <span class="hljs-string">&quot;ret\n\t&quot;</span>               <span class="hljs-comment">/* restore  eip */</span></span><br><span class="hljs-params">            <span class="hljs-string">&quot;1:\t&quot;</span>                  <span class="hljs-comment">/* next process start here */</span></span><br><span class="hljs-params">            <span class="hljs-string">&quot;popl %%ebp\n\t&quot;</span></span><br><span class="hljs-params">            : <span class="hljs-string">&quot;=m&quot;</span> (prev-&gt;thread.sp),<span class="hljs-string">&quot;=m&quot;</span> (prev-&gt;thread.ip)</span><br><span class="hljs-params">            : <span class="hljs-string">&quot;m&quot;</span> (next-&gt;thread.sp),<span class="hljs-string">&quot;m&quot;</span> (next-&gt;thread.ip)</span><br><span class="hljs-params">        )</span>;<br>        ...<br>        ...<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>切换堆栈，包括旧堆栈以及现场保存，新堆栈的建立 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-string">&quot;pushl %%ebp\n\t&quot;</span>       <span class="hljs-comment">/* save ebp */</span><br><span class="hljs-string">&quot;movl %%esp,%0\n\t&quot;</span>     <span class="hljs-comment">/* save esp */</span><br><span class="hljs-string">&quot;movl %2,%%esp\n\t&quot;</span>     <span class="hljs-comment">/* restore  esp */</span><br><span class="hljs-string">&quot;movl $1f,%1\n\t&quot;</span>       <span class="hljs-comment">/* 保存当前进程将要执行的指令位置，当进程再次调度到这个进程的时候可以接着上次执行继续执行 */</span>  <br></code></pre></td></tr></table></figure></li><li>改变cpu IP 指向的位置，执行新进程直到完毕 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-string">&quot;pushl %3\n\t&quot;</span> <br><span class="hljs-string">&quot;ret\n\t&quot;</span>               <span class="hljs-comment">/* restore  eip */</span><br></code></pre></td></tr></table></figure></li><li>堆栈销毁与旧堆栈的恢复 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">    <br><span class="hljs-string">&quot;popl %%ebp\n\t&quot;</span><br></code></pre></td></tr></table></figure></li></ul><p>对于运行态切换A到刚加载进来的进程B之间的切换，从<ahref="https://github.com/mengning/mykernel/blob/master/myinterrupt.c#L78-L88">代码</a>看到相比运行态进程间的切换，就多出来一条指令<code>"movl %2,%%ebp\n\t" /* restore  ebp */</code>，其含义是初始B进程的栈基址。也就是说只需要初始化一下栈基址。进程间的切换，这还是一个非常的粗糙，但也基本上整个模型已经建立起来，稍加优化，就非常完美。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux 内核分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php 获取当天0点的时间戳</title>
    <link href="/2016/03/04/php-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%A4%A90%E7%82%B9%E7%9A%84%E6%97%B6%E9%97%B4%E6%88%B3.html"/>
    <url>/2016/03/04/php-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%A4%A90%E7%82%B9%E7%9A%84%E6%97%B6%E9%97%B4%E6%88%B3.html</url>
    
    <content type="html"><![CDATA[<h1 id="常见代码">常见代码</h1><p>方式一</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$year</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;Y&quot;</span>);<br><span class="hljs-variable">$month</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;m&quot;</span>);<br><span class="hljs-variable">$day</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;d&quot;</span>);<br><span class="hljs-variable">$dayBegin</span> = <span class="hljs-title function_ invoke__">mktime</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">$month</span>,<span class="hljs-variable">$day</span>,<span class="hljs-variable">$year</span>);<span class="hljs-comment">//当天开始时间戳</span><br><br></code></pre></td></tr></table></figure><p>方式二： <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$daybegin</span>=<span class="hljs-title function_ invoke__">strtotime</span>(<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;Ymd&quot;</span>));<br></code></pre></td></tr></table></figure></p><h1 id="参考">参考</h1><p>http://www.cnblogs.com/wangtao_20/archive/2011/01/06/1929046.htmlhttp://blog.csdn.net/dongsg11200/article/details/8988598</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 内核分析 -- C函数调用栈机制在汇编中的实现</title>
    <link href="/2016/02/24/mooc-linux-kernel-1.html"/>
    <url>/2016/02/24/mooc-linux-kernel-1.html</url>
    
    <content type="html"><![CDATA[<h2 id="一些常识">一些常识</h2><p>平时可能见到movb,movw,movl等一些指令，三条指令的意思基本一样，不一样的地方在于，操作的数据是1个字节(1B)，1个字(2B)，1个双字（4B）。</p><h2 id="基础知识">基础知识</h2><p>汇编语言简单的可以认为是机器语言的一种便记符号，理解体系结构对理解汇编指令集大有裨益。现在的流行计算机体系结构是冯诺依曼体系也即存储程序体系。其结构大致如下:</p><p><img src="/assets/imgs/cpu-arch.jpg" /></p><p>也决定了指令集设计基本上都是围绕着cpu、存储进行设计的，对于汇编的语法格式，Intel和AT&amp;T汇编之间的区别看以参考文档<a href="http://www.ibm.com/developerworks/cn/linux/l-assembly/">Linux汇编语言开发指南</a>,这里简要的说一下本文代码中用到的AT&amp;T32位cpu汇编语言的一些指令。<!-- 说到汇编语言，就离不开了解一点cpu硬件结构的知识， -->汇编中用到的cpu硬件主要是寄存器，它们可用来暂存<code>指令</code>、<code>数据</code>和<code>地址</code>，这里主要用到的寄存器包括通用寄存器中的eax，以及esp（栈顶指针寄存器），ebp（占地指针寄存器）。另外还有一些操作指令，像pushl，popl，movl，leave、enter：</p><table><thead><tr><th>指令</th><th>含义</th><th>等价指令</th></tr></thead><tbody><tr><td>pushl</td><td>入栈指令</td><td></td></tr><tr><td>popl</td><td>出栈指令</td><td></td></tr><tr><td>movl</td><td>a,b 数据传送指令,把a---&gt;b</td><td></td></tr><tr><td>leave</td><td>跟函数调用相关</td><td><code>movl   %ebp, %esp</code><br/><code>popl   %ebp</code></td></tr><tr><td>enter</td><td>跟函数调用相关</td><td><code>pushl   %ebp</code><br/><code>movl    %esp, %ebp</code></td></tr></tbody></table><h2 id="一段代码">一段代码</h2><p>首先我们分析一段代码，每个函数都不接受参数。重点分析<code>f()</code>的汇编代码。其他不相关的干扰信息少。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">g</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br><br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> g() + <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><br>    <span class="hljs-keyword">return</span> f() + <span class="hljs-number">1</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure></p><p>使用<code>gcc -S -o main.s mian.c -m32</code>指令编译过后，删除了跟链接相关的信息过后的汇编代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs gas">_g:<br>    pushl   %ebp<br>    movl    %esp, %ebp<br>    movl    $4, %eax<br>    popl    %ebp<br>    ret<br>_f:<br>    pushl   %ebp<br>    movl    %esp, %ebp<br>    call    _g<br>    addl    $2, %eax<br>    popl    %ebp<br>    ret<br>_main:<br>    pushl   %ebp<br>    movl    %esp, %ebp<br>    call    _f<br>    addl    $1, %eax<br>    leave<br>    ret<br></code></pre></td></tr></table></figure><p>俗话说射人先射马，擒贼先擒王，看上面这坨代码，如果不知道模型是什么确实挺费劲，下面就个人理解说一下这个模型。比如说我们把64KB这么大内存空间分配给<code>_f</code>使用，初始化的时候，EBP，ESP所指向如图所示的上一个函数的栈基址和栈顶地址。当在f中执行完下面的指令后，ESP,EBP位置如下图所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gas">pushl   %ebp<br>movl    %esp, %ebp<br></code></pre></td></tr></table></figure><p><img src="/assets/imgs/stack-asm.png" /></p><p>从图中也就看到，当前函数使用的栈内存为[ESP,EBP)（不是固定的哦，因为，ESP会变化）这段内存空间（它俩指向同一个位置说明函数栈还没有使用），另外[EBP,EBP+4)这段内存空间保存的是调用此函数的函数栈基址。在到<code>popl    %ebp</code>这条指令之间没有单向操作栈的指令，故可以略去不用考虑，直接看这条指令，此时已经是函数调用完毕，此函数中保存的调用此函数的函数栈机制恢复到ebp寄存器中，到此函数调用栈的建立与销毁已经完毕。再看_g的代码，就会发现同样也是利用这个模型机制，到此内存中程序的函数调用栈机制的整体模型浮现在了面前。至于参数怎么传的，返回值怎么保存的，简单的说在栈和ax寄存器或者内存中，后面再详细说。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux 内核分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Yii2 前端资源管理笔记</title>
    <link href="/2016/02/20/yii2-assets.html"/>
    <url>/2016/02/20/yii2-assets.html</url>
    
    <content type="html"><![CDATA[<h1 id="简单介绍">简单介绍</h1><h2 id="资源是什么">资源是什么？</h2><p>Yii中的资源是 <code>和Web页面相关的文件</code>，可为CSS文件，JavaScript文件，图片或视频等，资源放在Web可访问的目录下，直接被Web服务器调用。在yii中实现了使用程序自动管理资源。</p><h2 id="管理方式">管理方式</h2><p>Yii在资源包中管理资源，<code>资源包</code>简单的说就是<code>放在一个目录下的资源集合</code>，在视图中注册一个资源包，在渲染Web页面时会包含包中的CSS和JavaScript文件</p><h2 id="资源包管理类">资源包管理类</h2><p>继承于<code>yii\web\AssetBundle</code>的类,类名可自动加载。在类中要指定：</p><ol type="1"><li>资源所在位置，</li><li>要包含的css、js文件</li><li>依赖的包</li></ol><p>如下， <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     - <span class="hljs-doctag">@link</span> http://www.yiiframework.com/</span><br><span class="hljs-comment">     - <span class="hljs-doctag">@copyright</span> Copyright (c) 2008 Yii Software LLC</span><br><span class="hljs-comment">     - <span class="hljs-doctag">@license</span> http://www.yiiframework.com/license/</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">namespace</span> <span class="hljs-title class_">app</span>\<span class="hljs-title class_">assets</span>;<br><br>    <span class="hljs-keyword">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">web</span>\<span class="hljs-title">AssetBundle</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     - <span class="hljs-doctag">@author</span> Qiang Xue &lt;qiang.xue<span class="hljs-doctag">@gmail</span>.com&gt;</span><br><span class="hljs-comment">     - <span class="hljs-doctag">@since</span> 2.0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppAsset</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AssetBundle</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$basePath</span> = <span class="hljs-string">&#x27;@webroot&#x27;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$baseUrl</span> = <span class="hljs-string">&#x27;@web&#x27;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$css</span> = [<br>            <span class="hljs-string">&#x27;css/site.css&#x27;</span>,<br>        ];<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$js</span> = [<br>        ];<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$depends</span> = [<br>            <span class="hljs-string">&#x27;yii\web\YiiAsset&#x27;</span>,<br>            <span class="hljs-string">&#x27;yii\bootstrap\BootstrapAsset&#x27;</span>,<br>        ];<br>    &#125;<br><br></code></pre></td></tr></table></figure></p><h2 id="资源分类----根据资源所在的位置">资源分类 --根据资源所在的位置</h2><ol type="1"><li><p>源资源</p></li><li><p>发布资源</p></li><li><p>外部资源</p></li></ol><h2 id="使用资源包">使用资源包</h2><ol type="1"><li>视图中</li><li>小部件类中</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">use</span> <span class="hljs-title">app</span>\<span class="hljs-title">assets</span>\<span class="hljs-title">AppAsset</span>;<br>    <span class="hljs-title class_">AppAsset</span>::<span class="hljs-title function_ invoke__">register</span>(<span class="hljs-variable">$this</span>);  <span class="hljs-comment">// $this 代表视图对象</span><br></code></pre></td></tr></table></figure><h1 id="yii2中的代码实现">yii2中的代码实现</h1><h2id="sitecontroller中怎么加载进来的在那个位置怎么调用的代码">SiteController中怎么加载进来的？在那个位置，怎么调用的代码?</h2><p>文件 <code>@app/views/layouts/main.php</code>调用的代码<code>$this-&gt;endBody()</code></p><h3 id="yiiwebview"><code>yii\web\View</code></h3><p><code>registerAssetBundle($name, $position = null)</code>注册依赖的资源包，其中<code>$name</code>是资源包的管理类的类名。</p><h1 id="参考">参考</h1><p>http://www.yiichina.com/doc/guide/2.0/structure-assets</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Yii2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yii2 GridView 使用</title>
    <link href="/2015/12/21/yii2-GridView-%E4%BD%BF%E7%94%A8.html"/>
    <url>/2015/12/21/yii2-GridView-%E4%BD%BF%E7%94%A8.html</url>
    
    <content type="html"><![CDATA[<h2 id="gridview是什么能做什么">GridView是什么？能做什么？</h2><p><code>GridView</code>是一个用于把数据显示在一个表格中的<code>yii2</code><code>widget</code></p><p>提供的功能，主要包括下面几种对数据的操作 - 使用表格显示数据 -对表格中的列进行<code>排序</code>显示 - <code>分页</code>显示数据 -<code>过滤</code>显示那些数据</p><h2 id="gridview-怎么使用">GridView 怎么使用？</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?=</span> <span class="hljs-title class_">GridView</span>::<span class="hljs-title function_ invoke__">widget</span>([<br>    <span class="hljs-string">&#x27;dataProvider&#x27;</span> =&gt; <span class="hljs-variable">$dataProvider</span>,<br>    <span class="hljs-string">&#x27;columns&#x27;</span> =&gt; [<br>        <span class="hljs-string">&#x27;id&#x27;</span>,<br>        <span class="hljs-string">&#x27;name&#x27;</span>,<br>        <span class="hljs-string">&#x27;created_at:datetime&#x27;</span>,<br>    ],<br>])<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li>columns 配置项中的缩写</li><li>组合模式+依赖注入</li></ul><h2 id="gridview-源码分析">GridView 源码分析</h2>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Yii2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>awk 处理日志</title>
    <link href="/2015/12/07/awk-%E5%A4%84%E7%90%86%E6%97%A5%E5%BF%97.html"/>
    <url>/2015/12/07/awk-%E5%A4%84%E7%90%86%E6%97%A5%E5%BF%97.html</url>
    
    <content type="html"><![CDATA[<!-- ## 问题 --><blockquote><p>提取一段时间内的日志</p></blockquote><pre><code class="hljs">[2015-12-07 03:16:49] DataHandlerUtils.Thread-0 - INFO  - 1449429345:12D2300A13CA:0BBA2D85CD31:49:4</code></pre><p>在群里一位朋友提出的问题，原先他想用正则提取。看到这个日志格式感觉用awk也能搞定这件事情。更让我感觉awk有戏能完成这件事情，有时候自己也需要类似的功能，顺道写了下面一段awk代码。思路大致是，首先是利用分隔符提取到时间，然后根据时间判断改行打不打印。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs awk">awk -F<span class="hljs-string">&quot;[ :]&quot;</span> <br><span class="hljs-string">&#x27;</span><br><span class="hljs-string">BEGIN&#123;</span><br><span class="hljs-string">    PRINT_INFO=0;</span><br><span class="hljs-string">    LINE_NUM = 0</span><br><span class="hljs-string">&#125; </span><br><span class="hljs-string"></span><br><span class="hljs-string">&#123; </span><br><span class="hljs-string">    CON_VAR = $11;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    if(CON_VAR &gt; 1449459202)&#123; </span><br><span class="hljs-string">        PRINT_INFO = 1;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    if(CON_VAR &gt; 1449459219)&#123;</span><br><span class="hljs-string">        PRINT_INFO = 0;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    if(PRINT_INFO == 1)&#123;</span><br><span class="hljs-string">        print CON_VAR,&quot; &quot;$0;</span><br><span class="hljs-string">        LINE_NUM += 1</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">END&#123;</span><br><span class="hljs-string">    print &quot;TOTAL : &quot;,LINE_NUM,&quot;lines.&quot;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><hr /><p><strong>PRINT_INFO 的使用</strong>某些行需要显示，某些不要显示，这样就需要一个<code>控制标志</code>，最简单的方式是使用一个变量。其实也是可以不使用这个变量，把前两个if合并到最后一个if中，这样就可以去掉 PRINT_INFO这个变量，但是为什么不这样做呢？</p><ul><li>首先，这样写让我感觉易读，结构清晰。</li><li>其次，如果影响PRINT_INFO值改变的原因改变了呢？这样修改就不必影响第三个if块。另外这种写法只需要关注要修改的if，是1个点。而如果三个合并在一块，没修改1个数字，自己无形中就会去关注的三个点，无形中给自己省了很多精力。</li></ul><hr /><p><strong>CON_VAR 的使用</strong>一开始没有使用这个变量而是直接使用的<code>$11</code>，如果时间戳编一个位置额所有出现的地方都需要修改，针对这种易变地方使用变量做了一层抽象。</p><hr />]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>软件工具</tag>
      
      <tag>awk</tag>
      
      <tag>日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo &amp; Mathjax</title>
    <link href="/2015/12/06/mathjax.html"/>
    <url>/2015/12/06/mathjax.html</url>
    
    <content type="html"><![CDATA[<h2 id="安装">安装</h2><p>在hexo安装使用mathjax的方式不外乎那么几种，具体的可以参见 <ahref="http://lukang.me/2014/mathjax-for-hexo.html">在 Hexo 中完美使用Mathjax 输出数学公式</a>。原本想使用hexo插件的方式安装，比较方便，也省去维护的负担，实现一个松耦合的组织状态，并且插件作者给出的一篇简易的文档<ahref="http://catx.me/2014/03/09/hexo-mathjax-plugin/">HexoMathJax插件</a>。使用插件的时候会遇到了下面的问题：</p><ul><li><code>hexo math install</code>命令在本地无法运行，跳过也没出现什么太大的问题。</li><li><code>Tag inline</code>方式也是无法使用，</li><li>并且运行的时候命令行会报一堆的日志</li></ul><p>看来不是那么的简便、稳定，丧失了信心，最后使用最暴力的方式解决掉了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/x-mathjax-config&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">MathJax</span>.<span class="hljs-property">Hub</span>.<span class="hljs-title class_">Config</span>(&#123;<span class="hljs-string">&quot;HTML-CSS&quot;</span>: &#123; <span class="hljs-attr">preferredFont</span>: <span class="hljs-string">&quot;TeX&quot;</span>, <span class="hljs-attr">availableFonts</span>: [<span class="hljs-string">&quot;STIX&quot;</span>,<span class="hljs-string">&quot;TeX&quot;</span>], <span class="hljs-attr">linebreaks</span>: &#123; <span class="hljs-attr">automatic</span>:<span class="hljs-literal">true</span> &#125;, <span class="hljs-title class_">EqnChunk</span>: (<span class="hljs-title class_">MathJax</span>.<span class="hljs-property">Hub</span>.<span class="hljs-property">Browser</span>.<span class="hljs-property">isMobile</span> ? <span class="hljs-number">10</span> : <span class="hljs-number">50</span>) &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">tex2jax</span>: &#123; <span class="hljs-attr">inlineMath</span>: [ [<span class="hljs-string">&quot;$&quot;</span>, <span class="hljs-string">&quot;$&quot;</span>], [<span class="hljs-string">&quot;\\(&quot;</span>,<span class="hljs-string">&quot;\\)&quot;</span>] ], <span class="hljs-attr">processEscapes</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">ignoreClass</span>: <span class="hljs-string">&quot;tex2jax_ignore|dno&quot;</span>,<span class="hljs-attr">skipTags</span>: [<span class="hljs-string">&#x27;script&#x27;</span>, <span class="hljs-string">&#x27;noscript&#x27;</span>, <span class="hljs-string">&#x27;style&#x27;</span>, <span class="hljs-string">&#x27;textarea&#x27;</span>, <span class="hljs-string">&#x27;pre&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span>]&#125;,</span><br><span class="language-javascript">        <span class="hljs-title class_">TeX</span>: &#123;  <span class="hljs-attr">noUndefined</span>: &#123; <span class="hljs-attr">attributes</span>: &#123; <span class="hljs-attr">mathcolor</span>: <span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-attr">mathbackground</span>: <span class="hljs-string">&quot;#FFEEEE&quot;</span>, <span class="hljs-attr">mathsize</span>: <span class="hljs-string">&quot;90%&quot;</span> &#125; &#125;, <span class="hljs-title class_">Macros</span>: &#123; <span class="hljs-attr">href</span>: <span class="hljs-string">&quot;&#123;&#125;&quot;</span> &#125; &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">messageStyle</span>: <span class="hljs-string">&quot;none&quot;</span></span><br><span class="language-javascript">    &#125;); </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/x-mathjax-config&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">MathJax</span>.<span class="hljs-property">Hub</span>.<span class="hljs-title class_">Queue</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> all = <span class="hljs-title class_">MathJax</span>.<span class="hljs-property">Hub</span>.<span class="hljs-title function_">getAllJax</span>(), i;</span><br><span class="language-javascript">        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i &lt; all.<span class="hljs-property">length</span>; i += <span class="hljs-number">1</span>) &#123;</span><br><span class="language-javascript">            all[i].<span class="hljs-title class_">SourceElement</span>().<span class="hljs-property">parentNode</span>.<span class="hljs-property">className</span> += <span class="hljs-string">&#x27; has-jax&#x27;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="latex-基本语法">Latex 基本语法</h2><p>关于latex的基本语法，http://mlworks.cn/posts/introduction-to-mathjax-and-latex-expression/这篇文档写的是在太好了，也没必要重复再造一遍轮子，故只记录一些自己常用的用法。</p><h2 id="其他参考">其他参考</h2><p><ahref="http://www.catxue.com/2015/03/20/MathJax/">MathJax插件在hexo中的应用</a><ahref="http://mlworks.cn/posts/introduction-to-mathjax-and-latex-expression/">Mathjax与LaTex公式简介</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件工具</tag>
      
      <tag>hexo</tag>
      
      <tag>latex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>演讲与表达</title>
    <link href="/2015/11/22/2015-11-22-7.html"/>
    <url>/2015/11/22/2015-11-22-7.html</url>
    
    <content type="html"><![CDATA[<h2 id="一些问题">一些问题</h2><h3 id="内容选择困难症">内容选择困难症</h3><blockquote><p>做ppt演讲的时候，该讲什么内容。自己会的感觉太简单，那就是1+1，别人应该都会，讲出来没意思，要么不懂感觉这个好像才有讲的价值。</p></blockquote><p>内容选取的标准搞错了，不应该根据自己感觉是什么就是什么来作为取舍标准。应根据内容及其结构、<del>是什么</del>，<del>有哪些基本问题，基本问题应该勾勒出基本的框架结构。以及每个问题所需的</del>为了描述清楚这个结构而应说明的基本概念、术语、公理等最小基本元素集合来作为取舍标准。</p><h3 id="关联困难">关联困难</h3><blockquote><p>不能理解句子在说什么</p></blockquote><p>实则是未能理解句子所表达的含义，理解透要表达的内容。可能是关联思维不好</p><ul><li>要解决的问题</li><li>相关内容</li><li>图形</li></ul><h2 id="如何提高效率">如何提高效率？</h2><ul><li>与人交流</li><li>信息获取的技巧</li><li>使用工具</li><li>避免副作用</li></ul><h2 id="碎碎念">碎碎念</h2><p>思绪来的也快去的也快，想的很明白的二次探测定理现在也忘记是怎么回事了，记一记笔记，把当时相关的一些原理梳理一下，总结一下自己的感悟还是很有必要的。</p>]]></content>
    
    
    <categories>
      
      <category>职场</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP 开发环境搭建</title>
    <link href="/2015/11/17/lnmp-%E7%8E%AF%E5%A2%83-%E6%90%AD%E5%BB%BA.html"/>
    <url>/2015/11/17/lnmp-%E7%8E%AF%E5%A2%83-%E6%90%AD%E5%BB%BA.html</url>
    
    <content type="html"><![CDATA[<p>个人使用的方式有两种</p><ol type="1"><li>LAMP/LNMP 环境</li><li>PHP 自带的webserver</li></ol><h1 id="php-自带的webserver">PHP 自带的webserver</h1><p>配置搭建比较简单，一条命令即可以下实现一个本地 server<code>php -S 0.0.0.0:8010</code>。在浏览器中就可以访问。</p><h1 id="lnmp-环境-搭建">LNMP 环境 搭建</h1><h2 id="整体结构">整体结构</h2><p><img src="/assets/imgs/2024-01-21-20-39-15.png"alt="https://zhuanlan.zhihu.com/p/427552247" /> <imgsrc="/assets/imgs/2024-01-21-20-44-07.png"alt="https://www.cnblogs.com/renyz/p/11347897.html" /></p><h2 id="安装">安装</h2><p><strong>Nginx</strong></p><p>可以手动编译安装，也可以是使用<code>apt-get</code>方式安装。第二种方式版本较低。</p><p><strong>FPM、MySQL</strong></p><p>荐<code>apt-get</code>方式安装，便捷。</p><h2 id="配置">配置</h2><p><strong>Nginx</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs nginx"> <span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">8082</span>;<br>    <span class="hljs-comment">#server_name localhost;</span><br><br>    <span class="hljs-attribute">root</span> /data/codes/sevenga_tuitui/backend;<br>    <span class="hljs-attribute">index</span> index.php;<br><br>    <span class="hljs-section">location</span> / &#123; <br>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.php?<span class="hljs-variable">$args</span>;<br>        <span class="hljs-comment"># upload_limit_rate 1m;</span><br>    &#125;   <br><br>    <span class="hljs-section">location</span> <span class="hljs-regexp">~ \.php$</span> &#123;<br>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> =<span class="hljs-number">404</span>;<br>        <span class="hljs-attribute">include</span> fastcgi_params;<br>        <span class="hljs-attribute">fastcgi_pass</span> <span class="hljs-number">127.0.0.1:9000</span>;<br>        <span class="hljs-attribute">fastcgi_index</span> index.php;<br>        <span class="hljs-attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="hljs-variable">$document_root</span><span class="hljs-variable">$fastcgi_script_name</span>;<br>        <span class="hljs-attribute">fastcgi_param</span> PATH_INFO <span class="hljs-variable">$fastcgi_script_name</span>;<br>    &#125;   <br><br>    <span class="hljs-attribute">error_page</span> <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span> /50x.html;<br>    <span class="hljs-section">location</span> = /50x.html &#123;<br>        <span class="hljs-attribute">root</span> html;<br>    &#125;   <br>&#125;   <br></code></pre></td></tr></table></figure><p><strong>PHP-FPM</strong></p><p>配置文件 <code>/etc/php5/fpm/pool.d/www.conf</code>,设置fpm监听端口和Nginx 配置一致</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">listen</span> =<span class="hljs-number">127.0.0.1:9000</span> <br></code></pre></td></tr></table></figure><h2 id="faq">FAQ</h2><h4id="mysql-安装过程未设置密码用-root-空密码登陆报-error-1045-28000-错误">mysql安装过程未设置密码，用 root 、空密码登陆报<code>ERROR 1045 (28000)</code> 错误。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> /etc/init.d/mysql stop<br><span class="hljs-built_in">sudo</span> mysqld_safe --user=mysql --skip-grant-tables --skip-networking&amp;<br><span class="hljs-built_in">sudo</span> mysql -u root mysql<br></code></pre></td></tr></table></figure><p>更改sql用户密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> mysql.user <span class="hljs-keyword">set</span> password<span class="hljs-operator">=</span>PASSWORD（<span class="hljs-string">&#x27;新密码&#x27;</span>） <span class="hljs-keyword">where</span> <span class="hljs-keyword">User</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;root&#x27;</span><br>flush privileges<br></code></pre></td></tr></table></figure><p>重启数据库：</p><p><code>/etc/init.d/mysql restart</code></p><h2 id="参考">参考</h2><ol type="1"><li><a href="http://laokaddk.blog.51cto.com/368606/1323292">ubuntu系统解决mysql连接问题（ERROR 1045 (28000): Access denied for user'root'@'localhost' (using password: NO)）</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Linux</tag>
      
      <tag>Nginx</tag>
      
      <tag>软件工具</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MonaServer 使用笔记</title>
    <link href="/2015/11/11/MonaServer.html"/>
    <url>/2015/11/11/MonaServer.html</url>
    
    <content type="html"><![CDATA[<h2 id="安装">安装</h2><p><strong>windows</strong> 1. <ahref="http://sourceforge.net/projects/monaserver/files/MonaServer_Windows_32.zip/download">点击下载运行包</a>1. 依赖环境：<strong><ahref="http://www.microsoft.com/en-us/download/details.aspx?id=40784">VisualStudio 2013 redistributable packages</a></strong> 2. 双击运行<strong>MonaServer.exe</strong>，同级目录下会生成<code>logs/</code>和<code>www/</code>两个文件夹，然后重新运行<strong>MonaServer.exe</strong>。 1. 配置obs推流。</p><p><img src="/assets/imgs/MonaServer-1.png" /> <imgsrc="/assets/imgs/MonaServer-2.png" /></p><h2 id="参考链接">参考链接</h2><ol type="1"><li><ahref="https://obsproject.com/forum/resources/how-to-set-up-your-own-private-rtmfp-server-using-monaserver.153/">Howto set up your own private RTMFP server using MonaServer</a></li><li><a href="http://www.monaserver.ovh/quickstart.html">QuickStart</a></li><li><a href="http://www.monaserver.ovh/manual.html">手册</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>软件工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ngx-lua 笔记总结</title>
    <link href="/2015/11/10/ngx-lua.html"/>
    <url>/2015/11/10/ngx-lua.html</url>
    
    <content type="html"><![CDATA[<h2 id="跟ngx有关的函数变量">跟ngx有关的函数、变量</h2><h3 id="ngx.header">ngx.header</h3><p>响应头设置</p><p>重定向:<code>ngx.header.Location</code></p><h3 id="ngx.exit404">ngx.exit(404)</h3><p>断开连接，同时设置响应的状态码</p><h3id="ngx.loglog_levellog_info1log_info2....">ngx.log(log_level,log_info1,log_info2,....)</h3><p>打印日志到ngx日志。第一个是日志级别如<code>ngx.ERR</code></p><h2 id="应用">应用</h2><h3 id="获取post和get中的参数">获取post和get中的参数</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> args = &#123;&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;GET&quot;</span> == r_m <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;HEAD&quot;</span> == r_m <span class="hljs-keyword">then</span><br>    ngx.<span class="hljs-built_in">log</span>(ngx.ERR,<span class="hljs-string">&quot;GET============&quot;</span>)<br>    args = ngx.req.get_uri_args()<br><span class="hljs-keyword">elseif</span> <span class="hljs-string">&quot;POST&quot;</span> == r_m <span class="hljs-keyword">then</span><br>    ngx.req.read_body()<br>    args = ngx.req.get_post_args()<br>    ngx.<span class="hljs-built_in">log</span>(ngx.ERR,<span class="hljs-string">&quot;POSTD-----------&quot;</span>)<br><span class="hljs-keyword">end</span>  <br></code></pre></td></tr></table></figure><!-- ##细节 --><!-- ## --><h3id="遍历出来请求中的数据并打印到日志">遍历出来请求中的数据并打印到日志</h3><p>pairs -- table</p><p>ipairs -- 数组</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(args) <span class="hljs-keyword">do</span><br>    ngx.<span class="hljs-built_in">log</span>(ngx.ERR,<span class="hljs-string">&quot;=====k=====&gt;&quot;</span>,<span class="hljs-built_in">type</span>(k),<span class="hljs-string">&quot;:&quot;</span>,k, <span class="hljs-string">&quot; ====v===&gt;&quot;</span>,<span class="hljs-built_in">type</span>(v),<span class="hljs-string">&quot;:&quot;</span>,v)<br><span class="hljs-keyword">end</span>  <br></code></pre></td></tr></table></figure><h2 id="ngx-指令">ngx 指令</h2><h3 id="rewrite">rewrite</h3><p><code>rewrite reg new flag</code></p><p>匹配失败，则继续往下执行，就当什么都没发生过</p><p>具体使用 http://www.nginx.cn/216.html</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>Lua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>寻找大素数</title>
    <link href="/2015/10/25/prime-linear-time.html"/>
    <url>/2015/10/25/prime-linear-time.html</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>人总是有寻找资源的原动力</p>          </div><!-- QQ 群是寻找信息资源的一个重要渠道。优质的专业社群，专业技术问题的探讨、信息共享，给与个体的帮助非常大。日常的闲聊也能让人获得很多乐趣。 --><p>昨天在加一个群的时候，它设置了一个有趣的入群问题：</p><div class="note note-danger">            <p>小于899808659的最大质数是？</p>          </div><h2 id="低头做事">低头做事</h2><p>第一感觉是<code>简单，应该能很快做出来</code>，但随后也感觉<code>这个数稍微有点大，会不会没自己想想的这么简单</code>，也想到了三种可能能解决这个问题的方案：试除法（复杂度约为n^1.5）、欧拉筛法和Miller–Rabin素性检测，前两种解决方案以前都写过对应的C代码,第三种也就是知道名字能做什么而已。决定试一把前两种解决方案，感觉以前写过怎也能做出来。前两种选哪一种呢？我也说不太清楚，带着复杂的的心情写完了第一个方案的<ahref="">程序</a>，</p><p>在写程序的时候发现 899808659本身就是一个素数，可惜题目要的是比这个数略小的。程序运行了10多分钟发现程序还在跑。感觉糟了<code>要是要找的这个数和这个数差的范围太大怎么办?</code>。然后直接放弃了想着写欧拉筛法吧，屋漏偏逢连阴雨，欧拉筛法忘记怎么写了，当时理解的不是很深刻的<code>判断终止循环</code>地方果然又记不起来原因了。琢磨半天搞明白后，开始写代码，写的时候发现分配数组太多，分配不了，在ruby下数组的大小也就能分配5亿个，在C语言中也是大概这么多个<code>int</code>类型的数组。但这个算法能在线性时间内筛除区间内的所有素数，感觉很有意思、神奇、实用，自己也快忘记具体细节了，就决定花点时间复习一下，顺带用ruby写了一个版本。显然最终还是没能解决最终的问题。</p><p>怎么办呢？怎么办呢？怎么办呢？</p><p>检索了一下，看了几篇文章，发现大素数及其判定问题原来是个国际性的难题。大素数的一个重要应用在RSA加密中。虽然899808659这个素数虽然不小了，但还是挺小的，也有一些ACMer公布了一些判断2^63内数的素性测试的现成程序，但战胜失败的强烈欲望我感觉非得写个程序搞定不可，不然太没面子了。然后开始跳入了一个深坑。参考<ahref="http://www.cnblogs.com/kuangbin/archive/2012/08/19/2646396.html">大素数判断和素因子分解（miller-rabin，Pollard_rho算法）</a>这篇blog，一开始怎么也不找头脑，想放弃，但是感觉放弃可不行啊，遇到困难就放弃怎么能学到东西呢？硬着头皮往前上，发现有段代码不懂，不知怎么脑洞突然大开，直接搜索这段代码，进入<ahref="http://www.cnblogs.com/vongang/archive/2012/03/15/2398626.html">Miller-Rabin素数测试学习笔记</a>这篇blog发现原来不理解的代码其实是<code>二次探测定理</code>的使用。总结起来这个理解算法的难点就可以归结为理解代码中溢出的解决，二次探测定理，费马小定理等这些技术和原理。现在就等二次探测定理归位，开工检索，检索到Matrix67先前有篇blog <ahref="http://www.matrix67.com/blog/archives/234">数论部分第一节：素数与素性测试</a>里面有这个关键词。Matrix67是第一个让我深刻体会到blog还能这么有意思,细细品读，醍醐灌顶，这篇文章果然有没有失望，深入浅出，又是一片好文。折腾到晚上程序写完了。<ahref="">程序连接</a></p><p>程序输出来好多结果，感觉数字8一直没变，坏了，数据太多了。把2改大后结果一下就出来了</p><pre><code class="hljs">899808619</code></pre><p>验证不过去，额，眼前一黑，Miller–Rabin那么低的概率判断失误的情况居然碰上了。</p><p>反正离899808659挺近的，就枚举一下（899808619，899808659）区间的数吧，实在折腾的够呛了，最后真正的结果是下面这个数，也就这一个。</p><pre><code class="hljs">899808641</code></pre><h2 id="抬头看路">抬头看路</h2><p>反思整个过程，自己曝露出很多缺点。</p><p>有句话说心中有数，手上不乱。看到问题没有好好的分析问题，有什么解决方案，有多少，分析每个方案的特点、所能解决的问题。上来就凭感觉做，然后想大力出奇迹，简直是痴人说梦，事倍功半，过程中老感觉不踏实，那里怪怪的。那每种方案的复杂度是多少呢，能解决的问题能力多大呢？试除法的时间复杂度我起初一直错误的以为是<span class="math inline">\(O(n^{1.5})\)</span>,实际应该为 <spanclass="math inline">\(O(n^{0.5})\)</span>，那其实是遍历区间内所有素数筛法的时间复杂度，而<spanclass="math inline">\(O(n^{0.5})\)</span> 才是筛选一个数的时间复杂度。虽然感觉也怪怪的，但是没有细心的想想为什么感觉怪怪的。错误的时间复杂度估计，粗心大意，也是过于快放弃这种方案的原因。有句话还是挺有道理的，对感觉奇怪的地方进行深入的思考，查找资料求证，就可能会发现一些令人吃惊的与设想不同的结果。</p><p>其次，调试程序大意，主观臆断。代码没进行单元测试，试除法程序运行时间过长，没有具体分析原因就直接尝试第二种方案。</p><p>第三，偏离主目标，这是严重的路线方向问题。明显发现欧拉筛法行不通的时候，仍花费不少时间在上面，这个事情应该放到延迟重要的事情。</p><h2 id="总结">总结</h2><p>对于这个事情的结果是，一个一小时内可以解决的问题终于在几个小时候后把问题解决了。顺利的进入了群，自豪骄傲。</p><h2 id="参考">参考</h2><p><ahref="https://zh.wikipedia.org/wiki/%E7%B4%A0%E6%80%A7%E6%B5%8B%E8%AF%95#.E7.A2.BA.E5.AE.9A.E5.9E.8B.E6.BC.94.E7.AE.97.E6.B3.95">素性测试</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>obs简单使用</title>
    <link href="/2015/10/23/obs-use.html"/>
    <url>/2015/10/23/obs-use.html</url>
    
    <content type="html"><![CDATA[<h2 id="obs-是什么">obs 是什么</h2><p><a href="https://obsproject.com/">官网</a>标题有这么一句话，</p><blockquote><p>Free, open source software for live streaming and recording</p></blockquote><p>简单来说就是一个视频直播推流器，并且还能同时录制视频。作为推流器还有一些非常有意思的功能。例如，调节推送的比特率，对视频做一些简单的处理往视频中插入文字、图像，从摄像机等外设设备中捕获音视频,捕获窗口等功能。最重要的是这些功能组合的方式基本没有限制。</p><p><img src="/assets/imgs/obs-use.png" /></p><h2 id="测试视频直播的时间延迟">测试视频直播的时间延迟</h2><p>视频直播测试的时候需要简单的测试一下视频的延迟时间。怎么测试呢？</p><p>其实最简单的方法就是查看视频播放到什么时间点了，客户端和obs的一对比就知道延迟了，可惜obs不显示，只能更换其他方式。利用obs的窗口捕获功能，把浏览器窗口和媒体源内容拼合到一起，浏览器中的时间就可以起到一个时间基准的作用，对比视频中和实际中浏览器的时间就可以得出时间延迟。</p><p><img src="/assets/imgs/obs-1.png" /></p><h2 id="一个简单的推送流程">一个简单的推送流程</h2><ul><li>打开软件</li><li>点击 <code>档案</code> - <code>新建</code>随意起个名字就可以，主要作用就是表示一个独立推送相关的参数设置，包括目标服务器和推送码率。</li><li>点击 右下角的设置 - 串流 - 自定义流媒体服务器</li><li>填写 URL 和流密钥 <code>rtmp://192.168.1.183/live</code>、<code>ted</code>,观看的时候需要把两者拼接起来，播放地址即为<code>rtmp://192.168.1.183/live/ted</code></li><li>点击<code>开始串流</code>，如果没有报错视频就推送成功了，可以使用播放器，如vlc、ffplay、potplayer，直接观看了。<imgsrc="https://raw.githubusercontent.com/noname007/assets/master/obs-use.gif" /></li></ul><h2 id="update">update</h2><p><strong>更新情况</strong> 2015-10-23 16:55:27 2015-10-26 15:04:272015-11-19 13:33:00 增加图片</p>]]></content>
    
    
    
    <tags>
      
      <tag>音视频</tag>
      
      <tag>软件工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 高性能服务器编程</title>
    <link href="/2015/10/14/linux-net-programming-dig.html"/>
    <url>/2015/10/14/linux-net-programming-dig.html</url>
    
    <content type="html"><![CDATA[<p>##IO 复用函数 ##定时器</p><p><strong>定时方法</strong> * socket 选项 SO_RCVTIMEO 和SO_SNDTIMEO *SIGALRM信号 * I/O复用系统调用的超时参数</p><p>SO_RCVTIMEO SO_SNDTIMEO 设置接受、发送数据超时时间</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>网络编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c incldue 文件包含</title>
    <link href="/2015/10/13/c-incldue.html"/>
    <url>/2015/10/13/c-incldue.html</url>
    
    <content type="html"><![CDATA[<h2 id="引言">引言</h2><p>前段时间看lua的时候，书中提到标准C是没有定义查找路径的，回想起来C的书籍中确实没有过多实没有提及文件包含的问题。在看linux网络编程的时候一些文件包含格式，以前也见过但是不理解为什么这么写，自己也没深入关注过这方面的问题。在配置eclipse,sublime,vs的文件包含、库文件、动态链接库相关的配置的时候，感觉配置参数和这些文件包含他们之间有那么一些隐隐约约的联系，<code>感觉配置的这些参数，就是编译器，链接器相关命令行参数</code>，也确实是如此。</p><p>如何包含文件的问题其实是一个文件查找的问题。例如php中对文件包含的规则就比较简单<code>require</code>或者<code>include</code>后面加上文件路径，但是C语言中在自己的印象中一直好像没有相关的说法，于是翻了一下C程序语言设计这本书，呵呵。。果然是阳春白雪。。就那么一点点。。。不留心可能就忽略了，在工程之中却又是一个非常重要的问题。比如可以利用文件把一个大的工程分开，有利于<code>模块化</code>开发设计。</p><p>随即查阅了一些资料做个简单的小结。</p><h2 id="查找路径">查找路径</h2><p>按照程序的时段可以划分为三个</p><ul><li>编译时的查找</li><li>链接时的查找</li><li>运行时查找</li></ul><h3 id="编译时的查找">编译时的查找</h3><p><strong>include 文件包含格式：</strong></p><hr /><ul><li>尖括号<code>&lt;&gt;</code>引起来</li><li>用引号<code>""</code>引起来</li></ul><p>引号引起来的首先在文件当前位置查找。如果查找不到，则和尖括号引起来的查找规则一样，规则和具体的实现有关。</p><p><strong>gcc查找规则</strong></p><p>可以使用 <code>-v</code> 参数查看到gcc查找的路径。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc -v hello.c<br></code></pre></td></tr></table></figure><p><strong><code>&lt;&gt;</code>查找规则</strong></p><hr /><ol type="1"><li>先搜索<code>-I</code>选项后的路径（<code>-I</code>选项指定的位置），然后是<code>标准的系统头文件路径</code>。</li><li>查找通过环境变量添加的路径</li><li>在头文件中含有路径名。例如：<code>#include &lt;sys/time.h&gt;</code>,会在<code>搜索的系统目录</code>的<code>sys</code>目录下寻找<code>time.h</code>文件。</li><li>头文件中不支持通配符，如<code>*</code></li></ol><p><br/></p><h3 id="链接时的查找">链接时的查找</h3><p>在命令行下可以使用 <code>-L</code><code>-l</code>添加查找路径，也可以使用环境变量添加。含义分别表示 -<code>-L</code> 查找的文件夹 - <code>-l</code> 静态库文件</p><h3 id="运行时查找">运行时查找</h3><p>查找动态链接库。比如在Windows上运行某个程序的时候，弹出提示说缺少<strong>dll</strong>的情况，就是因为没有在指定的位置找到对应的DLL。一般把对应的DLL放在程序运行的位置，或者放在系统<code>C:\Windows\System32</code>问题就解决了。</p><p><strong><em>部分环境变量的含义</em></strong></p><hr /><table><thead><tr><th>环境变量</th><th>含义</th></tr></thead><tbody><tr><td>C_INCLUDE_PAT</td><td>c 查找头文件的路径</td></tr><tr><td>CPATH</td><td></td></tr><tr><td>CPLUS_INCLUDE_PAT</td><td>C++ 查找头文件的路径</td></tr><tr><td>DEPENDENCIES_OUTPUT</td><td></td></tr><tr><td>OBJC_INCLUDE_PATH</td><td></td></tr><tr><td>SUNPRO_DEPENDENCIES</td><td></td></tr><tr><td>LD_LIBRARY_PATH</td><td>查找动态链接库的路径</td></tr><tr><td>LIBRARY_PATH</td><td>查找静态库的路径</td></tr></tbody></table><ul><li>详见 http://blog.chinaunix.net/uid-22145625-id-1789493.html</li></ul><p><br/></p><h2 id="参考">参考</h2><p><a href="http://blog.chinaunix.net/uid-22150747-id-189278.html">gccinclude路径</a> <ahref="http://www.cnblogs.com/zhoug2020/archive/2012/07/04/2576068.html">gcc中include文件的搜索路径</a><ahref="http://blog.csdn.net/ericghw/article/details/38639821">c项目中指定头文件目录</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lua 元表、元方法</title>
    <link href="/2015/09/18/lua-metatable.html"/>
    <url>/2015/09/18/lua-metatable.html</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>每一个类型都有一个元表。</p><p><code>table</code> 和 <code>userdata</code> 可以有各自独立的元表</p><p>其他类型的值则共享其类型所属的单一元表</p>          </div><p><code>表(table)</code>是 Lua中非常重要的基本数据类型，实现其他的一些编程技术概念的基础，如模块、包、类。通过语言提供的元表和元方法可以更改表的表现行为。</p><h2 id="元方法">元方法</h2><table><thead><tr><th>元方法</th><th>简单描述</th></tr></thead><tbody><tr><td><code>__metatable</code></td><td>调用 setmetatable、getmetatable方法的时候会用到这个字段</td></tr><tr><td><code>__index</code></td><td>当表中的索引不存在时，查找元表中是否设置了这个元方法</td></tr><tr><td><code>__newindex</code></td><td>同上</td></tr><tr><td><code>__add</code></td><td>+</td></tr><tr><td><code>__sub</code></td><td>-</td></tr><tr><td><code>__mul</code></td><td>*</td></tr><tr><td><code>__div</code></td><td>/</td></tr><tr><td><code>__unm</code></td><td>-(相反数)</td></tr><tr><td><code>__mod</code></td><td>%</td></tr><tr><td><code>__pow</code></td><td>^</td></tr><tr><td><code>__concat</code></td><td><code>..</code> 连接操作符</td></tr><tr><td><code>__eq</code></td><td>等于</td></tr><tr><td><code>__lt</code></td><td>小于</td></tr><tr><td><code>__gt</code></td><td>大于</td></tr><tr><td><code>__metatable</code></td><td>保护作用</td></tr><tr><td><code>__tostring</code></td><td>字符串化</td></tr></tbody></table><p>总的来说，在程序中通过<code>元方法</code>，可以： -更改<code>算符运算符</code>、<code>关系运算符</code>作用于表时的行为 -更改对表中的元素的访问行为，简单说是重载了，<code>[]</code>,<code>[]=</code> 运算符</p><p>这两个特性在C++特性中看起来是<code>运算符的重载</code>。与C++相比，Lua本身没有面向对象的支持，但是使用元方法，可以实现其中的继承，还可以实现其他的功能、如返回具有默认值的table、跟踪table访问、只读的table</p><h2 id="继承">继承</h2><p>从原型窗口继承所有不存在的字段 <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs lua">Window = &#123;&#125;   <span class="hljs-comment">-- 名字空间</span><br><br>Window.prototype = &#123;x = <span class="hljs-number">0</span>,y = <span class="hljs-number">0</span>,width = <span class="hljs-number">300</span>,height = <span class="hljs-number">400</span>&#125;<br><br>Window.mt = &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Window.new</span><span class="hljs-params">(o)</span></span><br>    <span class="hljs-comment">-- body</span><br>    <span class="hljs-built_in">setmetatable</span>(o, Window.mt)<br>    <span class="hljs-keyword">return</span> o<br><span class="hljs-keyword">end</span><br><br><br>Window.mt.<span class="hljs-built_in">__index</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(tabel,key)</span></span><br>    <span class="hljs-built_in">print</span>(key)<br>    <span class="hljs-keyword">return</span> Window.prototype[key]<br><span class="hljs-keyword">end</span><br><br>w = Window.new&#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>&#125;<br><span class="hljs-built_in">print</span>(w.height)<br>``<br><br><br></code></pre></td></tr></table></figure></p><h2 id="返回具有默认值的table">返回具有默认值的table</h2><p>当访问Lua表中不存在的一个元素的时候默认的返回的是nil,如果不想返回nil,则可以利用使用<code>__index</code>元方法更改返回值。可以使用下面几种方式</p><p><strong>方式一 :</strong> 为每一个需要默认值的表创建一个新的元表</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set_default</span><span class="hljs-params">(t,default)</span></span><br>    <span class="hljs-comment">--todo</span><br>    <span class="hljs-keyword">local</span> mt = &#123;<br>        <span class="hljs-built_in">__index</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>            <span class="hljs-keyword">return</span> default<br>        <span class="hljs-keyword">end</span><br>    &#125;<br>    <span class="hljs-built_in">setmetatable</span>(t, mt)<br><span class="hljs-keyword">end</span><br><br>tab = &#123;x = <span class="hljs-number">1</span>,y = <span class="hljs-number">2</span>&#125;<br><br><span class="hljs-built_in">print</span>(tab.x,tab.y)<br>set_default(tab,<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(tab.x,tab.y,tab.z)<br><br></code></pre></td></tr></table></figure><p><strong>方式二 :</strong> 使用同一个元表，默认值在每个表的各自内部当有很多表需要默认值的时候，方法一会创建大量的元表，降低效率，下面这种方法更合适。所有通过新元表解决方案都会有这个问题<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs lua"><br><span class="hljs-keyword">local</span> mt = &#123;<br>    <span class="hljs-built_in">__index</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(t,key)</span></span><br>        <span class="hljs-keyword">return</span> t.___<br>    <span class="hljs-keyword">end</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set_default</span><span class="hljs-params">(t,default)</span></span><br>    t.___ = default<br>    <span class="hljs-built_in">setmetatable</span>(t, mt)<br><span class="hljs-keyword">end</span><br><br>tab = &#123;x = <span class="hljs-number">1</span>,y = <span class="hljs-number">2</span>&#125;<br><br><span class="hljs-built_in">print</span>(tab.x,tab.y)<br>set_default(tab,<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(tab.x,tab.y,tab.z)<br><br><br></code></pre></td></tr></table></figure></p><p>防止索引冲突，可以改进为如下</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> key = &#123;&#125; <span class="hljs-comment">---- 防止索引冲突</span><br><span class="hljs-keyword">local</span> mt = &#123;<br>    <span class="hljs-built_in">__index</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(t)</span></span><br>        <span class="hljs-keyword">return</span> t[key]<br>    <span class="hljs-keyword">end</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set_default</span><span class="hljs-params">(t,default)</span></span><br>    t[key] = default<br>    <span class="hljs-built_in">setmetatable</span>(t, mt)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="跟踪table访问">跟踪table访问</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">proxy</span><span class="hljs-params">(t)</span></span><br>    <span class="hljs-comment">--todo</span><br><br>    <span class="hljs-keyword">local</span>  _t = t<br>    <span class="hljs-keyword">local</span> _mt = &#123;<br>        <span class="hljs-built_in">__index</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(t,k)</span></span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;access to element&#x27;</span>..<span class="hljs-built_in">tostring</span>(k))<br>            <span class="hljs-keyword">return</span> _t[k]<br>        <span class="hljs-keyword">end</span>,<br>        <span class="hljs-built_in">__newindex</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(t,k,v)</span></span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;update  element &quot;</span>..<span class="hljs-built_in">tostring</span>(k)..<span class="hljs-string">&quot;to&quot;</span>..<span class="hljs-built_in">tostring</span>(v))<br>            _t[k] = v<br>        <span class="hljs-keyword">end</span><br>    &#125;<br><br>    <span class="hljs-built_in">setmetatable</span>(t, _mt)<br>    t = &#123;&#125;<br>    <span class="hljs-keyword">return</span> t<br><span class="hljs-keyword">end</span><br><br>t = proxy&#123;&#125;<br>t.k = <span class="hljs-number">111</span><br><span class="hljs-built_in">print</span>(t.k)<br></code></pre></td></tr></table></figure><p>可以改进如下： <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> index = &#123;&#125; <span class="hljs-comment">-- 防止key 冲突</span><br><span class="hljs-keyword">local</span> _mt = &#123;<br>    <span class="hljs-built_in">__index</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(t,k)</span></span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;access to element &#x27;</span>..<span class="hljs-built_in">tostring</span>(k))<br>        <span class="hljs-keyword">return</span> t[index][k]<br>    <span class="hljs-keyword">end</span>,<br>    <span class="hljs-built_in">__newindex</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(t,k,v)</span></span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;update  element &quot;</span>..<span class="hljs-built_in">tostring</span>(k)..<span class="hljs-string">&quot; to &quot;</span>..<span class="hljs-built_in">tostring</span>(v))<br>        t[index][k] = v<br>    <span class="hljs-keyword">end</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">proxy</span><span class="hljs-params">(t)</span></span><br>    <span class="hljs-comment">--todo</span><br>    <span class="hljs-keyword">local</span>  proxy = &#123;&#125;<br>    proxy[index] = t<br>    <span class="hljs-built_in">setmetatable</span>(proxy, _mt)<br>    <span class="hljs-comment">-- t = proxy -- 方便 t = proxy(t),proxy(t)两种形式的调用 --- error  已经是局部变量t,和外围t不是一回事，受到名字的影响</span><br>    <span class="hljs-keyword">return</span> proxy<br><span class="hljs-keyword">end</span><br><br></code></pre></td></tr></table></figure></p><h2 id="只读的table">只读的table</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">make_read_only_table</span><span class="hljs-params">(t)</span></span> <br>    <span class="hljs-keyword">local</span> read_only = &#123;&#125; <span class="hljs-comment">-- 重要的一步</span><br>    <span class="hljs-keyword">local</span> mt = &#123;<br>        <span class="hljs-built_in">__index</span> = t,<br>        <span class="hljs-built_in">__newindex</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(t,k,v)</span></span><br>            <span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;attemp to update a read-only table&quot;</span>)<br>        <span class="hljs-keyword">end</span><br>    &#125;<br>    <span class="hljs-built_in">setmetatable</span>(read_only, mt)<br>    <span class="hljs-keyword">return</span> read_only<br><span class="hljs-keyword">end</span><br><br>a = <span class="hljs-string">&#x27;test&#x27;</span><br><br>t = make_read_only_table&#123;<span class="hljs-number">13</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,name=<span class="hljs-string">&#x27;webapp&#x27;</span>,temp=a&#125;<br><br>a = <span class="hljs-string">&#x27;dd&#x27;</span><br><span class="hljs-built_in">print</span>(t.temp)<br><br>t.temp = <span class="hljs-number">1111</span><br><br><br><br></code></pre></td></tr></table></figure><p><strong>方案二</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs lua"><br><br><span class="hljs-keyword">local</span> index = &#123;&#125; <span class="hljs-comment">-- 防止key 冲突</span><br><span class="hljs-keyword">local</span> _mt = &#123;<br>    <span class="hljs-built_in">__index</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(t,k)</span></span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;access to element &#x27;</span>..<span class="hljs-built_in">tostring</span>(k))<br>        <span class="hljs-keyword">return</span> t[index][k]<br>    <span class="hljs-keyword">end</span>,<br>    <span class="hljs-built_in">__newindex</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(t,k,v)</span></span><br>        <span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;attemp to update a read-only table&quot;</span>)<br>    <span class="hljs-keyword">end</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">make_read_only_table</span><span class="hljs-params">(t)</span></span> <br>    <span class="hljs-keyword">local</span> read_only = &#123;&#125;<br>    read_only[index] = t<br>    <span class="hljs-built_in">setmetatable</span>(read_only, _mt)<br>    <span class="hljs-keyword">return</span> read_only<br><span class="hljs-keyword">end</span><br><br>a = <span class="hljs-string">&#x27;test&#x27;</span><br><br>t = make_read_only_table&#123;<span class="hljs-number">13</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,name=<span class="hljs-string">&#x27;webapp&#x27;</span>,temp=a&#125;<br><br>a = <span class="hljs-string">&#x27;dd&#x27;</span><br><span class="hljs-built_in">print</span>(t.temp)<br><br><span class="hljs-comment">-- t.temp = 1111</span><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>Lua</tag>
      
      <tag>OpenResty</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx-rtmp-module 总结</title>
    <link href="/2015/09/06/rtmp.html"/>
    <url>/2015/09/06/rtmp.html</url>
    
    <content type="html"><![CDATA[<h2 id="一些参数及其含义">一些参数及其含义</h2><table><thead><tr><th>参数名称</th><th>说明</th></tr></thead><tbody><tr><td>app</td><td>指明应用名称</td></tr><tr><td>name</td><td>绑定监听的本地流名字，为空则监听所有的流</td></tr><tr><td>tcUrl</td><td>自动构建如果为空</td></tr><tr><td>pageUrl</td><td></td></tr><tr><td>swfUrl</td><td></td></tr><tr><td>flashVer</td><td></td></tr><tr><td>playPath</td><td>远程播放地址</td></tr><tr><td>live</td><td>合并指定的行为，为直播流</td></tr><tr><td>start</td><td></td></tr><tr><td>stop</td><td></td></tr><tr><td>static</td><td>静态化，会在nginx 启动的时候创建</td></tr></tbody></table><h2 id="中继relay">中继（relay）</h2><pre><code class="hljs">Syntax: pull url [key=value]*Context: application</code></pre><p>创建pull中继，拉取远程的流放到本地使用，当有播放器连接的时候命令才会生效</p><p>Url 语法: <code>[rtmp://]host[:port][/app[/playpath]]</code>.</p><p>如果app没有指定，则使用本地请求中的app名字</p><p><strong>Example</strong></p><pre><code class="hljs">pull rtmp://192.168.1.129/live/test name=ted;</code></pre><h2 id="hls">hls</h2><h3 id="hls_type">hls_type</h3><p>播放列表中的多个播放片段 <code>event  从第一开始播放</code><code>live 从当前片段开始播放</code>|</p><!-- 播放列表什么个意思？有什么参数配置？代表什么意思？ --><h3 id="hls_keys">hls_keys</h3><p>对所有的hls片段启用aes-128加密，默认不使用加密。同时nginx编译的时候需要配置<code>--with-http_ssl_module</code> 对https的支持。</p><p>密钥的位置可以在本地hls_key_path，也可以是网络文件hls_key_url。</p><p>也可以用 hls_fragments_per_key 指定一个密钥可以加密多少hls片段</p><dl><dt>hls_path</dt><dd>设置playlist和视频片段存放位置</dd><dt>hls_fragment</dt><dd>视频片段长度 默认是5s</dd><dt>hls_playlist_length</dt><dd>播放列表长度，默认是30s视频长度</dd><dt>hls_syn</dt><dd>时间戳同步阈值默认是2ms,当从低分辨率向高分辨路转换的的时候可以去噪，low-resolutionRTMP (1KHz) to high-resolution MPEG-TS (90KHz|</dd><dt>hls_continuous:</dt><dd>序列号连续模式上次停止的时候序列号开始</dd><dt>hls_nested</dt><dd>嵌套模式 是否为每一个流创建一个子目录</dd><dt>hls_base_url</dt><dd>指定播放列表url，默认为空</dd><dt>hls_cleanup</dt><dd>清理播放列表和视频片段缓存</dd><dt>hls_fragment_naming</dt><dd>视频片段命名 1.流时间戳，2.自增整数 3.系统时间戳</dd><dt>hls_fragment_naming_granularity</dt><dd>设置视频片段ids间隔，默认是0</dd><dt>hls_fragment_slicing</dt><dd>分片模式 1.plain 2.align</dd></dl><h2 id="notify相关指令">Notify相关指令</h2><p>主要用于回调通知 ### on_connect</p><pre><code class="hljs">nginx 块: rtmp, server</code></pre><p>当客户端发起一个连接的时候，同时将会发起一个异步的http请求，客户端连接将会被挂起等待http请求的结果。根据不同的结果做出不同的响应。</p><p><strong>返回结果</strong> - 2xx -- 刚才发起的RTMP会话请求继续 - 3xx-- 重定向到另外一个应用，应用名在<code>Location</code>响应头中 -其他连接将会被丢弃</p><p>应用不能放在<code>application</code>块，连接阶段的时候还不知道具体是请求的哪一个应用。HTTP请求默认使用POST方法。</p><h3 id="on_play">on_play</h3><p>与on_connect 类似，只是返回结果为<code>3xx</code>的时候需要指定新的流名称</p><p>##参考资料 -https://github.com/arut/nginx-rtmp-module/wiki/Directives#live -http://blog.waterlin.org/articles/using-nginx-rtmp-module-to-build-broadcast-system.html?utm_source=tuicool</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>音视频</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx 点播</title>
    <link href="/2015/08/17/vod.html"/>
    <url>/2015/08/17/vod.html</url>
    
    <content type="html"><![CDATA[<p>对于点播功能， nginx-rtmp-module模块只提供了三条相关命令,但是能满足基本的要求: &gt;- play -play_temp_path - play_local_path</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">本地文件</span><br>application vod &#123;<br>    play /var/flvs;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">网络中的文件</span><br>application vod_http &#123;<br>    play_temp_path /var/flvs;<br>    play_local_path /var/flvs;<br>    play /var/flvs http://myserver.com/vod;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="play">play</h2><ul><li>文件格式是<code>mp4</code>和<code>flv</code>。</li><li>文件可以是本地的，也可以是网络上http可以访问到的。</li><li>play 指令中可以指定多个文件路径</li><li>多个play指令的时候，会合并指令中的位置。在播放的时候会在这些路径列表中的文件夹下依次查找，查不到，就会给前端返回一个错误。</li><li>mp4 文件需要 采用 H.264 和 AAC 格式编码。</li><li>flv文件点播需要添加关键帧（可以使用yamdi添加），否则没有暂停功能。</li><li>如果点播<code>record</code>指令生成的文件，记住视频文件没有关键帧。</li></ul><h2 id="播放网络文件">播放网络文件</h2><p>当播放一个网络文件时，nginx会先把文件下载完，然后才播放。下载文件时临时存放的位置由<code>play_temp_path</code>指定，其默认值是<code>/tmp</code>，播放完毕后就会丢弃。如果<code>play_local_path</code>指定其值，就会先把拷贝到这个位置。这两条指令配合play指令可以提升一些性能。</p><h2 id="一些-tips">一些 tips</h2><p><strong>三条命令</strong></p><p>如果每次点播文件每次都去下载,一是会浪费带宽，二是浪费时间，每次都必须等待下载完成才能播放。如果能下载的文件复制到本地，那么就可以结合play指令，使本地磁盘就可以起到缓存网络数据功能了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">磁盘缓存网络数据</span><br>application vod_http &#123;<br>    play_temp_path  /var/flvs;<br>    play_local_path /var/flvs;<br>    play /var/flvs http://example.com/videos;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>添加关键帧</strong></p><pre><code class="hljs">yamdi –i src.flv –o dst.flv</code></pre><p><a href="http://yamdi.sourceforge.net/">yamdi 文档</a></p><p><strong>播放rtmp视频</strong></p><p>可以使用ffmpeg自带的ffplay</p><pre><code class="hljs">ffplay rtmp://localhost/vod//dir/file.flv</code></pre><p>一个网络工具</p><pre><code class="hljs">&lt;http://www.cutv.com/demo/live_test.swf&gt;</code></pre><h2 id="参考">参考</h2><ol type="1"><li>https://github.com/arut/nginx-rtmp-module/wiki/Directives#video-on-demand</li><li>http://blog.waterlin.org/articles/using-nginx-rtmp-module-to-build-broadcast-system.html</li></ol>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>音视频</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【译】How to set up your own private RTMP server using nginx</title>
    <link href="/2015/08/12/How-to-set-up-your-own-private-RTMP-server-using-nginx.html"/>
    <url>/2015/08/12/How-to-set-up-your-own-private-RTMP-server-using-nginx.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>原文地址:https://obsproject.com/forum/resources/how-to-set-up-your-own-private-rtmp-server-using-nginx.50/</p></blockquote><p>大多数人喜欢使用Twitch.tv和Ustream这类服务把流视频转播放给用户，并且工作的也非常好。但是有时候你想对你的流视频有更多的控制权，或者你想其他人把视频流转发给你，或者你想转发视频流到多个地方，或者一些事情需要你有权限访问RTMP服务器上的视频流。这篇教程内容非常基础，教你在一台linux服务器上搭建一个简单的RTMP服务器。</p><p>在你自己RTMP服务器上，你可能感兴趣去做的是这两件事情： -向多个频道播放内容 -由于一些目的，把其他人的多个视频流合成一个（我在多个角度拍摄中使用它，例如像在<ahref="https://www.youtube.com/watch?v=6WUU58POsTM">这个多个拍摄角度视频中</a>）</p><p>好的，你该怎样做到这些事情呢？</p><h2 id="第一步获取一个服务器">第一步：获取一个服务器</h2><p>不管你信不信，RTMP实际上对系统资源要求十分的小。本质上来说，它仅仅是从输入端抓取数据并把数据转发到输出端，简单的数据传输。不相信我？我的运行了很长一段时间的RTMP服务器是一个树莓派,一个价值35美金（月200元人民币）的迷你计算机，就放在我的办公桌上，至少同时处理3个数据输入流是完全没有问题的，我也从来没有对它进行过压力测试去看看到底他能处理多少。因此，我向你保证，即使一个便宜的旧机器也是完全没有问题的。</p><p>假如你没有树莓派，一个vps也是可以的。我推荐Linode服务商，如果你能支付的起服务费用。我现在也在使用，并且到现在为止，它也运行良好。仅仅确保你有足够的带宽。。。记住带宽的使用量是<code>（视频流的大小）* （上传人数+下载人数）</code>。因此当我有两个视频流推送视频流到我的服务器，并且我同时下载他们，两小时消耗了10GB的带宽流量。</p><p>为了方便，我推荐使用Ubuntu作为服务器软件，但是你完全可使用任何你想使用的。只要你能从apt之外其他的地方解决nginx的依赖问题，你就能参考这篇文档。</p><p><strong>Windows 用户注意</strong>这边教程关注Linux上的使用，假如你想在Windows上使用，你能找到带有RTMP模块的nginx二进制包，在这个地方： http://nginx-win.ecsds.eu/</p><p>假如你的服务器在你家里，你需要转发TCP1935端口数据到这个服务器上。。。不同的路由器有不同的设置，因此你需要根据你自己的路由器，查看怎么设置端口转发。同时，我推荐使用DynDNS 这类服务去克服家用主机动态IP的问题。</p><h2 id="第二步安装nginx-和rtmp-模块">第二步：安装nginx 和RTMP 模块</h2><p>登录你的机器，并且确保你有这些必须的工具去编译nginx,执行下面的命令</p><pre><code class="hljs">$ sudo apt-get install build-essential libpcre3 libpcre3-dev libssl-dev</code></pre><p>现在说点关于nginx的一点小知识（发音"engine-X"）。nginx是个轻量级的webserver，但是有些人为它写了一个RTMP模块，因此它能够提供RTMP流相关的服务，为了添加这个RTMP模块，我们必须重新从源码编译nginx而不是使用apt包。不要担心，它是非常简单的，仅仅执行下面的指令:)</p><p>在你的home目录，下载nginx 源码：</p><pre><code class="hljs">$ wget http://nginx.org/download/nginx-1.7.7.tar.gz</code></pre><p>在写这篇文章的时候，ngxin 最新的稳定版本是 1.7.7。你可是从<ahref="http://nginx.org/en/download.html">nginx下载页</a>下载最新的包。</p><p>接着，从git 获取RTMP 模块的源代码</p><pre><code class="hljs">$ wget https://github.com/arut/nginx-rtmp-module/archive/master.zip</code></pre><p>解压开他们，斌且进入nginx 目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tar -zxvf nginx-1.7.7.tar.gz</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">unzip master.zip</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> nginx-1.7.7</span><br></code></pre></td></tr></table></figure><p>现在，编译nginx:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">./configure --with-http_ssl_module --add-module=../nginx-rtmp-module-master</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">make</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> make install</span><br></code></pre></td></tr></table></figure><p>现在nginx 安装完毕了！默认安装在了<code>/usr/local/nginx</code>,使用下面的命令启动：</p><pre><code class="hljs">$ sudo /usr/local/nginx/sbin/nginx</code></pre><p>现在测试一下确认nginx 正在运行，打开浏览器输入<code>http://服务器ip/</code> 然后你将看到"Welcome tonginx!"这个页面。</p><h2 id="第三步配置nginx-启用rtmp">第三步：配置nginx 启用RTMP</h2><p>打开配置文件，默认是<code>/usr/local/nginx/conf/nginx.conf</code>，在文件的最后添加下面的内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">rtmp</span> &#123;<br>        <span class="hljs-section">server</span> &#123;<br>                <span class="hljs-attribute">listen</span> <span class="hljs-number">1935</span>;<br>                <span class="hljs-attribute">chunk_size</span> <span class="hljs-number">4096</span>;<br><br>                <span class="hljs-attribute">application</span> live &#123;<br>                        <span class="hljs-attribute">live</span> <span class="hljs-literal">on</span>;<br>                        <span class="hljs-attribute">record</span> <span class="hljs-literal">off</span>;<br>                &#125;<br>        &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这是一个非常简单的基础配置，有一个live应用，它将会把RTMP视频流转发给所有请求这它的用户。你可能过一会才播放这个视频。<ahref="https://github.com/arut/nginx-rtmp-module/wiki/Directives">这里是所有配置选项</a>，展示了如何转发视频流到其他的地方（像Twitch），保存上传的记录，输出状态等等。</p><p>重启nginx:</p><pre><code class="hljs">$ sudo /usr/local/nginx/sbin/nginx -s stop$ sudo /usr/local/nginx/sbin/nginx</code></pre><h2 id="第四步测试">第四步：测试</h2><p>你的服务器应该能接收RTMP视频流了。让我们尝试一下吧。</p><p>创建一个新的工程在OBS,并且更改 Broadcast Settings 为如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs conf">Streaming Service: Custom<br>Server: rtmp://&lt;your server ip&gt;/live<br>Play Path/Stream Key: test<br></code></pre></td></tr></table></figure><p>你可能会疑惑test路径从哪里来。好吧，我们就是刚刚创建的。你能创建任何路径和流，把那个路径发到RTMP播放器里面，就可以播放了。对于简单的应用，没必要授权。</p><p>你现在能向你的服务器推送视频流了。当你点击了 "Start Streaming"，没有报告错误，这是一个好的信号。</p><p>怎么打开观看呢？就我个人来说，我使用<ahref="http://vmix.com.au/">vMix</a>播放RTMP流并且将多个视频流合并成一个我自己的流。如果你仅仅想播放一个正在上传的视频流，可以使用<code>VLC 2.1.0</code>或者更新的版本。打开一个网络流，输入<code>rtmp://&lt;your server ip&gt;/live/test</code>作为url。如果没有报什么错误的话，现在你就能在VLC里面看到流里面的内容了。</p><p>现在你有一个能工作的视频流了，欢呼吧:)</p><h2 id="现在做什么呢">现在做什么呢？</h2><p>你能使用使你的服务器转发视频流到其他的流服务和频道。在"recordoff;"后面添加下面的指令。</p><pre><code class="hljs">push rtmp://&lt;other streaming service rtmp url&gt;/&lt;stream key&gt;</code></pre><p>任何视频流都会被转发，同时客户端也能使用这个地址播放视频。你可以添加多个push指令，把这个视频转发到多个位置。</p><h2 id="faq">FAQ</h2><p>Q:为什么使用nginx?不使用crtmpserver/Red5/Wowza?</p><p>A:先前用过crtmpserver，并且也能工作，但是太难用了。如果需要RTSP服务代替RTMP服务，我推荐使用它，因为nginxRTMP模块不支持RTSP。对于我来说Red5看起来太重，太复杂了，并且是用java写的。。。如果你想使用它就是用它吧。我没有在这上面投资很多精力。Wowza不是免费的。你能使用它完成你想的功能，但是nginx是更轻量级的，易于使用，并且免费。</p><p>Q:X怎么做?</p><p>A:FAQ会保持更新。。问一些问题，我将把答案写在这里。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>RTMP</tag>
      
      <tag>翻译</tag>
      
      <tag>音视频</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP文件上传</title>
    <link href="/2015/08/05/php-upload-file.html"/>
    <url>/2015/08/05/php-upload-file.html</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>工程问题的排查过程，就是渐进明细，分而治之的过程。不断缩小问题范围，直到解决问题。</p>          </div><p>上传文件一直报 <code>IOerror</code>错误，大小<code>213M</code>。</p><p>PHP上传文件大小的限制，改为300兆后，不起作用。上传时，脚本执行的时间很长，调大PHP <code>max_input_time</code> 配置项为6000 后, w问题还是不解决。修改Nginx <code>client_max_body_size</code> 为<code>500M</code>,问题立马解决了。</p><p>php 和 nginx 设置如下</p><p>ngxin server 里面配置如下 <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx">server&#123;<br>   <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">1000M</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>php.ini 配置如下 <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">file_uploads</span> = <span class="hljs-literal">On</span> <span class="hljs-comment">;是否允许通过HTTP上传文件的开关。默认为ON即是开</span><br><span class="hljs-attr">upload_max_filesize</span> = <span class="hljs-number">500</span>M <span class="hljs-comment">;上传文件上限 </span><br>upload_tmp_dir <span class="hljs-comment">;文件上传至服务器上存储临时文件的地方，如果没指定就会用系统默认的临时文件夹。</span><br>如果要上传比较大的文件，仅仅以上两条还不够，必须把服务器缓存上限调大，把脚本最大执行时间变长 <br><span class="hljs-attr">post_max_size</span> = <span class="hljs-number">500</span>M <span class="hljs-comment">; POST给PHP的所能接收的最大值</span><br><span class="hljs-attr">max_execution_time</span> = <span class="hljs-number">30</span> <span class="hljs-comment">; 每个PHP页面运行的最大时间值 Maximum execution time of each script, in seconds脚本最大执行时间 </span><br><span class="hljs-attr">max_input_time</span> = <span class="hljs-number">60</span> <span class="hljs-comment">; 每个PHP页面接收数据所需的最大时间 解析一次请求时间上线 Maximum amount of time each script may spend parsing request data </span><br><span class="hljs-attr">memory_limit</span> = <span class="hljs-number">128</span>M <span class="hljs-comment">;  每个PHP页面所吃掉的最大内存 内存上限 Maximum amount of memory a script may consume (128MB)</span><br></code></pre></td></tr></table></figure></p><p>相关参数解释</p><p>##参考</p><p>http://www.jb51.net/article/18975.htmhttp://www.360doc.com/content/13/1210/11/14452132_336027836.shtml</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux 下工具命令</title>
    <link href="/2015/08/04/linux-cmd.html"/>
    <url>/2015/08/04/linux-cmd.html</url>
    
    <content type="html"><![CDATA[<h2 id="gdb">☆ gdb</h2><p>启动gdb后</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>b/breakpoint</td><td>断点</td></tr><tr><td>p print</td><td>打印输出变量</td></tr><tr><td>r</td><td></td></tr><tr><td>attach</td><td></td></tr><tr><td>watch</td><td></td></tr><tr><td>c</td><td></td></tr><tr><td>bt</td><td></td></tr><tr><td>up</td><td></td></tr><tr><td>list</td><td></td></tr><tr><td>info macro</td><td>例 info macro NGX_OK</td></tr><tr><td>macro expand</td><td></td></tr></tbody></table><h2 id="ulimit">☆ ulimit</h2><p>-c unlimited</p><h2 id="tcpdump">☆ tcpdump</h2><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>t</td><td>时间戳</td></tr><tr><td>x</td><td>十六进制显示数据包</td></tr><tr><td>X</td><td>十六进制显示数据包,同时会对应显示对应的ASCII码表</td></tr><tr><td>i</td><td>后跟网卡名字，如<code>eth0</code></td></tr><tr><td>src</td><td>源地址</td></tr><tr><td>dst</td><td>目标地址</td></tr><tr><td>and</td><td>逻辑与</td></tr><tr><td>or</td><td>逻辑或</td></tr></tbody></table><p><code>tcpdump -i any -X -vvv -tttt -o</code></p><p><code>tcpdump  -i eth0 -Xnt "(src 192.168.1.194 and dst 192.168.1.183) or (src 192.168.1.183 and dst 192.168.1.194)"</code></p><h2 id="sort">sort</h2><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>-kx</code></td><td>按照第x列的大小进行排序</td></tr><tr><td><code>-n</code></td><td>按照数字比较，默认字典序排序</td></tr></tbody></table><h2 id="du">du</h2><ul><li><code>du -sh *</code> 统计当前文件夹下各个文件的大小</li><li><code>du -shm *</code>统计当前文件夹下各个文件的大小,以<code>M</code>为单位。<code>-shk</code> 以 <code>KB</code>为单位</li></ul><h2 id="locate">locate</h2><p>linux 下可以使用 locate 和 find 来查找文件,但是 locate 在定位时要比find 快.</p><p>locate并不是穿梭于档案文件中查找,而是在<strong>数据库</strong>查找文件.find正好相反,他的查找要穿梭于档案文件中.</p><p><code>locate [-ir] keyword</code> 更新数据库<del><code>locate -u</code></del> <code>updatedb</code></p><p><strong>命令选项</strong></p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>i</td><td>不区分大小写</td></tr><tr><td>r</td><td>后面可以接收正则表达式</td></tr></tbody></table><p><strong>参考</strong> - <ahref="http://yijiebuyi.com/blog/58d0b9eec7f18769439f388a8037c151.html">locate在linux下快速定位文档</a></p><h2 id="cron">cron</h2><ol type="1"><li>crontab不执行问题 今天有个服务不能使用了，查来查去，原来<code>crontab</code> 被干掉了。装上后还是无法运行，原来还要依赖<code>crond</code> 这个服务</li></ol><ul><li>检查文件具有可执行权限 <code>chmod a+x</code></li><li>crond服务是否启动。查看及启动方式 <code>service crond start</code><code>service crond status</code></li></ul><h2 id="curl">curl</h2><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>I/head</td><td>仅查看响应头部信息</td></tr><tr><td>v/verbose</td><td>整个http请求过程中所有的头部信息</td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="wget">wget</h2><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>debug</td><td>整个http请求过程中所有的头部信息</td></tr><tr><td>S</td><td>仅查看响应头部信息</td></tr></tbody></table><ul><li><a href="http://www.lenky.info/archives/2012/07/1841"title="wget/curl查看请求响应头信息">wget/curl查看请求响应头信息</a></li></ul><h2 id="参考">参考</h2><ul><li><a href="http://www.nginx.cn/2451.html">crontab不执行问题</a></li><li><ahref="http://baike.baidu.com/link?url=4A3zDEAEGxKEkZV0GihvwInk1Rx9lCsJEZTeBUCgZq6a_h519pBSgCaCynxbiURbpXFUZ7Qqn-iF2Pj6Wp58Bq">crond</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>gdb</tag>
      
      <tag>tcpdump</tag>
      
      <tag>sort</tag>
      
      <tag>du</tag>
      
      <tag>locate</tag>
      
      <tag>cron</tag>
      
      <tag>curl</tag>
      
      <tag>wget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《电磁理论前沿探索札记》读书笔记：对书中电荷系统的能量公式的疑问思考</title>
    <link href="/2014/04/22/%E3%80%8A%E7%94%B5%E7%A3%81%E7%90%86%E8%AE%BA%E5%89%8D%E6%B2%BF%E6%8E%A2%E7%B4%A2%E6%9C%AD%E8%AE%B0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%AF%B9%E4%B9%A6%E4%B8%AD%E7%94%B5%E8%8D%B7%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%83%BD%E9%87%8F%E5%85%AC%E5%BC%8F%E7%9A%84%E7%96%91%E9%97%AE%E6%80%9D%E8%80%83.html"/>
    <url>/2014/04/22/%E3%80%8A%E7%94%B5%E7%A3%81%E7%90%86%E8%AE%BA%E5%89%8D%E6%B2%BF%E6%8E%A2%E7%B4%A2%E6%9C%AD%E8%AE%B0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%AF%B9%E4%B9%A6%E4%B8%AD%E7%94%B5%E8%8D%B7%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%83%BD%E9%87%8F%E5%85%AC%E5%BC%8F%E7%9A%84%E7%96%91%E9%97%AE%E6%80%9D%E8%80%83.html</url>
    
    <content type="html"><![CDATA[<p>对书中的给出的一些能量公式中的电位的公式，十分的怀疑，查了一些资料后，写下的对书中公式的思考。如有错误欢迎指正。</p><p>在计算由N个独立电荷形成的系统所具有的的能量时。根据功能守恒关系可以推算出整个电荷系统所有具有的能量。</p><p>分别将N个电荷移到无穷远处，电场对所有电荷做的功之和即为整个电场的能量。将第一个电荷移到无穷远处，电场所做的功为:</p><p><span class="math display">\[W_{1e} = q_{1}\varphi_{1} = q_{1} \sum_{j=2}^{N} \frac{q_{j}}{4\pir_{1j}}\]</span></p><p>接着，将第二个电荷移到无穷远处，电场所做的功为：</p><p><span class="math display">\[W_{2e} = q_{2}\varphi_{2} = q_{2} \sum_{j=3}^{N} \frac{q_{j}}{4\pir_{2j}}\]</span></p><p>将第i个电荷移到无穷远处，电场所做的功为：</p><p><span class="math display">\[W_{ie} = q_{i}\varphi_{i} = q_{i} \sum_{j=i+1}^{N} \frac{q_{j}}{4\pir_{ij}}\]</span></p><p>则整个电荷系统所具有的的能量为：</p><p><span class="math display">\[W_{e} = \sum_{i=1}^{N}q_{i}\varphi_{i} = \sum_{i=1}^{N}q_{i}\sum_{j=i+1}^{N}\frac{q_{j}}{4\pi r_{ij}} = \sum_{i=1}^{N}\frac{1}{2}q_{i}\varphi_{i}^{&#39;}\]</span> <span class="math display">\[\varphi_{i} = \sum_{j = i+1}^{N} \frac{q_{j}}{4\pi r_{ij}}\]</span></p><p>而不该应为书中所说：</p><p><span class="math display">\[W_{e} = \sum_{i=1}^{N}q_{i}\varphi_{i} = \sum_{i=1}^{N}q_{i}\sum_{j=i+1}^{N}\frac{q_{j}}{4\pi r_{ij}}\]</span></p><p><span class="math display">\[\varphi_{i} = \sum_{j = i+1}^{N} \frac{q_{j}}{4\pi r_{ij}}\]</span></p><p>参考书目：</p><p>1、《理论物理 第三册 电磁学》作者: 吴大猷 出版社: 科学出版社 出版年:1983-8 页数: 184</p><p>2、《电磁理论前沿探索札记》 作者：梁昌洪，陈曦 著 出 版社：电子工业出版社 出版年: 2012-7 页数: 312</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电磁场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>simplexml学习笔记---用simplexml读入一个xml文档并插入到数据库中</title>
    <link href="/2014/02/12/simplexml-simplexmlxml.html"/>
    <url>/2014/02/12/simplexml-simplexmlxml.html</url>
    
    <content type="html"><![CDATA[<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; 最近在网上找到了一份xspf文件（<a href="http://soul11201.eu.nu/xml/1.xml" target="_blank">下载</a>），用simple xml 将其location和title存入到数据库中。<a href="http://soul11201.eu.nu/xml/simplexml_load_preg_xspf.html" target="_blank">源码下载</a>)，因为文件中的空格太多，先用正则表达式将空格去掉，然后用simplexml解析，存到数据库之中。<br />&nbsp; &nbsp; &nbsp; &nbsp;<b> &nbsp;正则表达式真是太神奇了。。。。</b><br /><br /><br /><br /><br /><a name='more'></a><br /><br /><br /><div style="background: #fdfdfd; color: black;"><u>HTML+PHP语言</u>: <a href="http://fayaa.com/code/">高亮代码由发芽网提供</a></div><div class="source" style="background-color: #1e1e27; color: #cfbfad; font-family: monospace, Consolas, 'Lucida Console', 'Courier New';"><span style="color: #409090;">&lt;?php</span><br />&nbsp; &nbsp;<span style="color: #cfbfad;">header</span>(<span style="background-color: #404040; color: #ffcd8b;">"content-type: text/html; charset=utf-8;"</span>);<br />&nbsp; &nbsp;<span style="color: #cd8b00;">//header("Content-type: text/html; charset:utf-8"); </span><br />&nbsp; &nbsp;<span style="color: #cd8b00;">// $filename = '1.xml';</span><br />&nbsp; &nbsp; <span style="color: #cd8b00;">// ini_set(‘display_errors’, true);</span><br />&nbsp; &nbsp; <span style="color: #cd8b00;">// error_reporting(E_ALL);</span><br /><br />&nbsp; &nbsp;<span style="color: #ff8bff;">$c</span> <span style="color: #cfbfad;">=</span> <span style="color: #cfbfad;">file_get_contents</span>(<span style="background-color: #404040; color: #ffcd8b;">'1.xml'</span>);<br />&nbsp; &nbsp;<span style="color: #cd8b00;">// /\S+/ w</span><br />&nbsp; &nbsp;<span style="color: #cd8b00;">//</span><br />&nbsp; &nbsp;<span style="color: #cd8b00;">//$pattern = "/&lt;.*&gt;/";</span><br />&nbsp; &nbsp;<span style="color: #cd8b00;">//$pattern = "/[u4e00-u9fa5]+/";</span><br />&nbsp; &nbsp;<span style="color: #cd8b00;">//$pattern = '/[一-龠]+/';</span><br />&nbsp; &nbsp;<span style="color: #cd8b00;">//$pattern = '/&lt;.*&gt;*[一-龠]*/';</span><br />&nbsp; &nbsp;<span style="color: #ff8bff;">$pattern</span> <span style="color: #cfbfad;">=</span> <span style="background-color: #404040; color: #ffcd8b;">'/&lt;.*&gt;[一-龠]*/'</span>;<br />&nbsp; &nbsp;<span style="color: #ff8bff;">$matches</span> <span style="color: #cfbfad;">=</span> <span style="background-color: #404040; color: #ffcd8b;">''</span>;<br />&nbsp; &nbsp;<span style="color: #808bed;">if</span>(<span style="color: #cfbfad;">preg_match_all</span>(<span style="color: #ff8bff;">$pattern</span><span style="color: #cfbfad;">,</span><span style="color: #ff8bff;">$c</span><span style="color: #cfbfad;">,</span><span style="color: #ff8bff;">$matches</span>))<br />&nbsp; &nbsp;<span style="color: #cfbfad;">{</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">//print_r($matches[0]) ;</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #ff8bff;">$str</span><span style="color: #cfbfad;">=</span><span style="background-color: #404040; color: #ffcd8b;">""</span>;<br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">foreach</span> (<span style="color: #ff8bff;">$matches</span><span style="color: #cfbfad;">[</span><span style="color: #506dbd;">0</span><span style="color: #cfbfad;">]</span> <span style="color: #808bed;">as</span> <span style="color: #ff8bff;">$key</span> <span style="color: #cfbfad;">=&gt;</span> <span style="color: #ff8bff;">$value</span>) <span style="color: #cfbfad;">{</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;"># code...</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #ff8bff;">$str</span> <span style="color: #cfbfad;">.=</span> <span style="color: #ff8bff;">$value</span>;<br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cfbfad;">}</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">//echo $str;</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">//print_r($str);</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">//$simxml = simplexml_load_file($str);</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #ff8bff;">$simxml</span> <span style="color: #cfbfad;">=</span> <span style="color: #cfbfad;">simplexml_load_string</span>(<span style="color: #ff8bff;">$str</span>);<br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">//print_r($simxml);</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">echo</span> <span style="color: #ff8bff;">$simxml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">trackList</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">track</span><span style="color: #cfbfad;">[</span><span style="color: #506dbd;">0</span><span style="color: #cfbfad;">]</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">title</span>;<br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">echo</span> <span style="color: #ff8bff;">$simxml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">trackList</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">track</span><span style="color: #cfbfad;">[</span><span style="color: #506dbd;">0</span><span style="color: #cfbfad;">]</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">location</span>;<br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">//insert into mysql database</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #ff8bff;">$handle</span> <span style="color: #cfbfad;">=</span> <span style="color: #cfbfad;">mysql_connect</span>(<span style="background-color: #404040; color: #ffcd8b;">"127.0.0.1"</span><span style="color: #cfbfad;">,</span><span style="background-color: #404040; color: #ffcd8b;">"root"</span><span style="color: #cfbfad;">,</span><span style="background-color: #404040; color: #ffcd8b;">"123a123a"</span>);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cfbfad;">mysql_select_db</span>(<span style="background-color: #404040; color: #ffcd8b;">"yz"</span>);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">foreach</span> (<span style="color: #ff8bff;">$simxml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">trackList</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">track</span> <span style="color: #808bed;">as</span> <span style="color: #ff8bff;">$value</span>) <span style="color: #cfbfad;">{</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #ff8bff;">$query</span> <span style="color: #cfbfad;">=</span> <span style="background-color: #404040; color: #ffcd8b;">'insert into track(location,tvTitle) values("'</span><span style="color: #cfbfad;">.</span><span style="color: #ff8bff;">$value</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">location</span><span style="color: #cfbfad;">.</span><span style="background-color: #404040; color: #ffcd8b;">'","'</span><span style="color: #cfbfad;">.</span><span style="color: #ff8bff;">$value</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">title</span><span style="color: #cfbfad;">.</span><span style="background-color: #404040; color: #ffcd8b;">'");'</span>;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cfbfad;">mysql_query</span>(<span style="color: #ff8bff;">$query</span>) <span style="color: #808bed;">or</span> <span style="color: #808bed;">die</span>(<span style="color: #cfbfad;">mysql_error</span>());<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cfbfad;">}</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">echo</span> <span style="background-color: #404040; color: #ffcd8b;">"v"</span>;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cfbfad;">mysql_close</span>(<span style="color: #ff8bff;">$handle</span>);<br />&nbsp; &nbsp;<span style="color: #cfbfad;">}</span><br /><span style="color: #409090;">?&gt;</span><br /><span style="color: #808bed;">&lt;html&gt;</span><br />&nbsp; &nbsp;<span style="color: #808bed;">&lt;body&gt;</span><br />&nbsp; &nbsp;<span style="color: #808bed;">&lt;form</span> <span style="color: #cfbfad;">action=</span><span style="background-color: #404040; color: #ffcd8b;">""</span> <span style="color: #cfbfad;">method=</span><span style="background-color: #404040; color: #ffcd8b;">"post"</span><span style="color: #808bed;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">&lt;input</span> <span style="color: #cfbfad;">type=</span><span style="background-color: #404040; color: #ffcd8b;">"hidden"</span> <span style="color: #cfbfad;">name=</span><span style="background-color: #404040; color: #ffcd8b;">"hid"</span> <span style="color: #cfbfad;">value=</span><span style="background-color: #404040; color: #ffcd8b;">'</span><span style="color: #409090;">&lt;?php</span> <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">if</span>( <span style="color: #cfbfad;">isset</span>(<span style="color: #ff8bff;">$_POST</span><span style="color: #cfbfad;">[</span><span style="background-color: #404040; color: #ffcd8b;">"sub"</span><span style="color: #cfbfad;">])</span> <span style="color: #cfbfad;">){</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">echo</span> <span style="background-color: #404040; color: #ffcd8b;">"done"</span>;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cfbfad;">}</span><span style="color: #808bed;">else</span><span style="color: #cfbfad;">{</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">echo</span> <span style="background-color: #404040; color: #ffcd8b;">"no"</span>;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cfbfad;">}</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #409090;">?&gt;</span><span style="background-color: #404040; color: #ffcd8b;">'</span><span style="color: #808bed;">/&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">&lt;input</span> <span style="color: #cfbfad;">type=</span><span style="background-color: #404040; color: #ffcd8b;">"submit"</span> <span style="color: #cfbfad;">name=</span><span style="background-color: #404040; color: #ffcd8b;">"sub"</span> <span style="color: #cfbfad;">value=</span><span style="background-color: #404040; color: #ffcd8b;">"insert"</span> <span style="color: #808bed;">/&gt;</span><br />&nbsp; &nbsp;<span style="color: #808bed;">&lt;/form&gt;</span><br />&nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp;<span style="color: #808bed;">&lt;/body&gt;</span><br /><span style="color: #808bed;">&lt;/html&gt;</span></div><br /><div style="background: #fdfdfd; color: black;"><br /><br /><br /></div><u style="background-color: #fdfdfd;"><br /></u><u style="background-color: #fdfdfd;"><br /></u><u style="background-color: #fdfdfd;">XML语言</u><span style="background-color: #fdfdfd;">: </span><a href="http://fayaa.com/code/view/28050/" style="background-color: #fdfdfd;">Codee#28050</a><br /><br /><div class="source" style="background-color: #1e1e27; color: white; font-family: monospace, Consolas, 'Lucida Console', 'Courier New';"><span style="background-color: #0f140f; color: #ff0007; font-style: italic; font-weight: bold;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;playlist</span> <span style="color: #ff0086; font-weight: bold;">xmlns=</span><span style="color: #0086d2;">"http://xspf.org/ns/0/"</span> <span style="color: #ff0086; font-weight: bold;">xmlns:vlc=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/ns/0/"</span> <span style="color: #ff0086; font-weight: bold;">version=</span><span style="color: #0086d2;">"1"</span><span style="color: #fb660a; font-weight: bold;">&gt;&lt;title&gt;</span>播放列表<span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;&lt;trackList&gt;&lt;track&gt;&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=1975434150<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>浙江卫视高清<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;&lt;vlc:id&gt;</span>0<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=3900155972<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>东方卫视高清<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>1<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=2220552576<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>深圳卫视高清<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>2<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=857894899<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>广东卫视高清<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>3<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=2453801339<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>四川卫视<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>4<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=2907109968<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>浙江卫视<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>5<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=1128831868<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>湖北卫视<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>6<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=3661744838<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>东方卫视<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>7<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=623043810<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>安徽卫视<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>8<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=2309309351<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>深圳卫视<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>9<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=1926463423<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>珠江频道<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>10<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=2084914015<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>广东卫视<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>11<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=3006271240<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>辽宁卫视<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>12<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=877636586<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>青海卫视<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>13<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=2905421066<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>重庆卫视<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>14<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=3660187036<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>山东卫视<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>15<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=2739752321<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>陕西卫视<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>16<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=708402866<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>云南卫视<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>17<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=3051487004<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>贵州卫视<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>18<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=4172356212<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>河南卫视<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>19<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=830075195<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>天津卫视<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>20<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=974433428<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>广西卫视<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>21<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=1000637964<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>东南卫视<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>22<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=3444760127<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>甘肃卫视<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>23<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=3778086045<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>宁夏卫视<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>24<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=2342060367<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>内蒙古卫视<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>25<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=2280918693<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>广西综艺<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>26<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=2136314174<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>英语辅导<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>27<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=1249794075<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>嘉佳卡通<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>28<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=2552061131<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>CCTV中学生<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>29<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=4035478592<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>广东公共<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>30<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=2631736979<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>广东新闻<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>31<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=3727832148<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>长沙政法<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>32<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=4122776769<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>长沙新闻<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>33<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=2092781730<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>深圳财经<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>34<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=1926463423<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>珠江频道<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>35<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=2084914015<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>广东卫视<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>36<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=1249794075<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>嘉佳卡通<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>37<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=4035478592<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>广东公共<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>38<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=2631736979<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>广东新闻<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>39<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=3956944389<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>英雄联盟职业联赛<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>40<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=931734290<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>DNF官方电视台<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>41<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=1980972519<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>GTV游戏竞技<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>42<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=2584831218<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>NEOTV星际2<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>43<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=4050426117<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>NEOTV-英雄联盟<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>44<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=2674956498<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>ScnTV频道一<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>45<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=1424066668<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>ScnTV频道二<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>46<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;track&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;location&gt;</span>http://zb.v.qq.com:1863/?progid=1258215255<span style="color: #fb660a; font-weight: bold;">&lt;/location&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;title&gt;</span>1006TV<br /><span style="color: #fb660a; font-weight: bold;">&lt;/title&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;extension</span> <span style="color: #ff0086; font-weight: bold;">application=</span><span style="color: #0086d2;">"http://www.videolan.org/vlc/playlist/0"</span><span style="color: #fb660a; font-weight: bold;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:id&gt;</span>47<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:id&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;vlc:option&gt;</span>network-caching=1000<span style="color: #fb660a; font-weight: bold;">&lt;/vlc:option&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #fb660a; font-weight: bold;">&lt;/extension&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/track&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/trackList&gt;</span><br /><span style="color: #fb660a; font-weight: bold;">&lt;/playlist&gt;</span></div><br /><br /><br />]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xml学习笔记--xml的应用生成一个vlc播放列表</title>
    <link href="/2014/02/12/xml-xmlvlc.html"/>
    <url>/2014/02/12/xml-xmlvlc.html</url>
    
    <content type="html"><![CDATA[<br /><br /><br />&nbsp; &nbsp; &nbsp; vlc播放列表用的是xspf格式,其官方网址为：<a href="http://www.xspf.org/">http://www.xspf.org/</a>。其实，其也为一种xml格式。这样其实穿件播放列表的过程就是创建xml文档的过程，生成完xml后最后保存文件时直接保存成xspf格式即可用vlc打开就可以观看播放列表的视频、音频等等。<br /><br />其工作流程就是，先把location和title一条一条的存入数据库，然后生成对应格式的xspf文件。<br /><br />因为数据库都是在我的本地电脑上运行的。所以数据库的密码用户名什么的都需要修改。<br /><a name='more'></a><h4>存入到数据库（<a href="ftp://user2630253@www8.subdomain.com/www/xml/yzxspfinsert.php.bak" target="_blank">下载源码</a>）</h4><h4><div style="background-color: #fdfdfd; font-weight: normal;"><u>HTML+PHP语言</u>:&nbsp;<a href="http://fayaa.com/code/">高亮代码由发芽网提供</a></div><div class="source" style="background-color: black; color: #cfbfad; font-family: monospace, Consolas, 'Lucida Console', 'Courier New'; font-weight: normal;"><span style="color: #409090;">&lt;?php</span><br />&nbsp; &nbsp;<span style="color: #cd8b00;">//if(isset($_POST["sub"])&amp;&amp; !empty($_POST["location"]) &amp;&amp;!empty($_POST["tvTitle"]))</span><br />&nbsp; &nbsp;<span style="color: #cd8b00;">//wu zuo yong</span><br />&nbsp; &nbsp;<span style="color: #808bed;">if</span>(<span style="color: #cfbfad;">isset</span>(<span style="color: #ff8bff;">$_POST</span><span style="color: #cfbfad;">[</span><span style="background-color: #404040; color: #ffcd8b;">"sub"</span><span style="color: #cfbfad;">]))</span><br />&nbsp; &nbsp;<span style="color: #cfbfad;">{</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #ff8bff;">$h</span><span style="color: #cfbfad;">=</span><span style="color: #cfbfad;">mysql_connect</span>(<span style="background-color: #404040; color: #ffcd8b;">"127.0.0.1"</span><span style="color: #cfbfad;">,</span><span style="background-color: #404040; color: #ffcd8b;">"root"</span><span style="color: #cfbfad;">,</span><span style="background-color: #404040; color: #ffcd8b;">"123a123a"</span>)&nbsp;<span style="color: #808bed;">or</span>&nbsp;<span style="color: #808bed;">die</span>(<span style="color: #cfbfad;">mysql_error</span>());<br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cfbfad;">mysql_select_db</span>(<span style="background-color: #404040; color: #ffcd8b;">"yz"</span><span style="color: #cfbfad;">,</span><span style="color: #ff8bff;">$h</span>)&nbsp;<span style="color: #808bed;">or</span>&nbsp;<span style="color: #808bed;">die</span>(<span style="color: #cfbfad;">mysql_error</span>());<br /><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">for</span>&nbsp;(<span style="color: #ff8bff;">$i</span><span style="color: #cfbfad;">=</span><span style="color: #506dbd;">0</span>;&nbsp;<span style="color: #ff8bff;">$i</span>&nbsp;<span style="color: #cfbfad;">&lt;</span>&nbsp;<span style="color: #506dbd;">10</span>;&nbsp;<span style="color: #ff8bff;">$i</span><span style="color: #cfbfad;">++</span>)&nbsp;<span style="color: #cfbfad;">{</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;"># code...</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">if</span>(<span style="color: #808bed;">empty</span>(<span style="color: #ff8bff;">$_POST</span><span style="color: #cfbfad;">[</span><span style="background-color: #404040; color: #ffcd8b;">"location"</span><span style="color: #cfbfad;">][</span><span style="color: #ff8bff;">$i</span><span style="color: #cfbfad;">]))</span>&nbsp;<span style="color: #808bed;">continue</span>;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #ff8bff;">$insert</span><span style="color: #cfbfad;">=</span><span style="background-color: #404040; color: #ffcd8b;">'insert into track(location,tvTitle) values("'</span><span style="color: #cfbfad;">.</span><span style="color: #ff8bff;">$_POST</span><span style="color: #cfbfad;">[</span><span style="background-color: #404040; color: #ffcd8b;">"location"</span><span style="color: #cfbfad;">][</span><span style="color: #ff8bff;">$i</span><span style="color: #cfbfad;">]</span><span style="color: #cfbfad;">.</span><span style="background-color: #404040; color: #ffcd8b;">'","'</span><span style="color: #cfbfad;">.</span><span style="color: #ff8bff;">$_POST</span><span style="color: #cfbfad;">[</span><span style="background-color: #404040; color: #ffcd8b;">"tvTitle"</span><span style="color: #cfbfad;">][</span><span style="color: #ff8bff;">$i</span><span style="color: #cfbfad;">]</span><span style="color: #cfbfad;">.</span><span style="background-color: #404040; color: #ffcd8b;">'")'</span>;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cfbfad;">mysql_query</span>(<span style="color: #ff8bff;">$insert</span>)&nbsp;<span style="color: #808bed;">or</span>&nbsp;<span style="color: #808bed;">die</span>(<span style="color: #cfbfad;">mysql_error</span>());<br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cfbfad;">}</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br /><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cfbfad;">mysql_free_result</span>(<span style="color: #ff8bff;">$r</span>);<br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cfbfad;">mysql_close</span>(<span style="color: #ff8bff;">$h</span>);<br /><br />&nbsp; &nbsp;<span style="color: #cfbfad;">}</span><br />&nbsp; &nbsp;<span style="color: #cd8b00;">//var_dump($_POST["location"]);</span><br /><span style="color: #409090;">?&gt;</span><br /><span style="color: #808bed;">&lt;html&gt;</span><br />&nbsp; &nbsp;<span style="color: #808bed;">&lt;head&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">&lt;meta</span>&nbsp;<span style="color: #cfbfad;">charset=</span><span style="background-color: #404040; color: #ffcd8b;">"utf-8"</span><span style="color: #808bed;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">&lt;title&gt;</span>cha ru<span style="color: #808bed;">&lt;/title&gt;</span><br />&nbsp; &nbsp;<span style="color: #808bed;">&lt;/head&gt;</span><br />&nbsp; &nbsp;<span style="color: #808bed;">&lt;body&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">&lt;form</span>&nbsp;<span style="color: #cfbfad;">action=</span><span style="background-color: #404040; color: #ffcd8b;">""</span>&nbsp;<span style="color: #cfbfad;">method=</span><span style="background-color: #404040; color: #ffcd8b;">"post"</span>&nbsp;<span style="color: #808bed;">&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #409090;">&lt;?php</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">for</span>&nbsp;(<span style="color: #ff8bff;">$i</span><span style="color: #cfbfad;">=</span><span style="color: #506dbd;">0</span>;&nbsp;<span style="color: #ff8bff;">$i</span>&nbsp;<span style="color: #cfbfad;">&lt;</span>&nbsp;<span style="color: #506dbd;">10</span>;&nbsp;<span style="color: #ff8bff;">$i</span><span style="color: #cfbfad;">++</span>)&nbsp;<span style="color: #cfbfad;">{</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">echo</span>&nbsp;<span style="background-color: #404040; color: #ffcd8b;">'&lt;p&gt;location:&lt;input type="text" name="location[]"&gt; tvTitle: &lt;input type="text" name="tvTitle[]" "&gt;&lt;/p&gt;'</span>;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cfbfad;">}</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #409090;">?&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">&lt;p&gt;</span>&nbsp;<span style="color: #808bed;">&lt;input</span>&nbsp;<span style="color: #cfbfad;">type=</span><span style="background-color: #404040; color: #ffcd8b;">"submit"</span>&nbsp;<span style="color: #cfbfad;">name=</span><span style="background-color: #404040; color: #ffcd8b;">"sub"</span><span style="color: #808bed;">&gt;</span>&nbsp;<span style="color: #808bed;">&lt;/p&gt;</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">&lt;/form&gt;</span><br />&nbsp; &nbsp;<span style="color: #808bed;">&lt;/body&gt;</span><br /><span style="color: #808bed;">&lt;/html&gt;</span><br /><div><span style="color: #808bed;"><br /></span></div></div></h4><h4><br />生成xspf(<a href="http://soul11201.eu.nu/xml/yzxspf.php.bak" target="_blank">下载源码</a>)</h4><br /><div style="background: #fdfdfd; color: black;"><u>HTML+PHP语言</u>: <a href="http://fayaa.com/code/view/28048/">xml学习笔记</a></div><div class="source" style="background-color: black; color: #cfbfad; font-family: 'Courier New', Consolas, 'Lucida Console';"><span style="color: #409090;">&lt;?php</span><br />&nbsp; <br />&nbsp; &nbsp;<span style="color: #cfbfad;">header</span>(<span style="background-color: #404040; color: #ffcd8b;">"Content-Type:text/xml;charset:utf-8"</span>);<br /><br />&nbsp; &nbsp;<span style="color: #ff8bff;">$xspf</span> <span style="color: #cfbfad;">=</span> <span style="color: #808bed;">new</span> <span style="color: #cfbfad;">DOMdocument</span>(<span style="background-color: #404040; color: #ffcd8b;">"1.0"</span><span style="color: #cfbfad;">,</span><span style="background-color: #404040; color: #ffcd8b;">"utf-8"</span>);<br /><br />&nbsp; &nbsp;<span style="color: #808bed;">function</span> <span style="color: #cfbfad;">creEle</span>(<span style="color: #cfbfad;">&amp;</span><span style="color: #ff8bff;">$parent</span><span style="color: #cfbfad;">,</span><span style="color: #ff8bff;">$eleName</span><span style="color: #cfbfad;">=</span><span style="background-color: #404040; color: #ffcd8b;">""</span>)<br />&nbsp; &nbsp;<span style="color: #cfbfad;">{</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">global</span> <span style="color: #ff8bff;">$xspf</span>;<br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">// because the key word gloabal $xspf i worng a long time;</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #ff8bff;">$tem</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$xspf</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">createElement</span>(<span style="color: #ff8bff;">$eleName</span>);<br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #ff8bff;">$parent</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">appendChild</span>(<span style="color: #ff8bff;">$tem</span>);<br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">return</span> <span style="color: #506dbd;">0</span>;<br />&nbsp; &nbsp;<span style="color: #cfbfad;">}</span><br /><br />&nbsp; &nbsp;<span style="color: #808bed;">function</span> <span style="color: #cfbfad;">creAttr</span>(<span style="color: #cfbfad;">&amp;</span><span style="color: #ff8bff;">$parent</span><span style="color: #cfbfad;">,</span><span style="color: #ff8bff;">$eleName</span><span style="color: #cfbfad;">=</span><span style="background-color: #404040; color: #ffcd8b;">""</span><span style="color: #cfbfad;">,</span><span style="color: #ff8bff;">$value</span><span style="color: #cfbfad;">=</span><span style="background-color: #404040; color: #ffcd8b;">""</span>)<br />&nbsp; &nbsp;<span style="color: #cfbfad;">{</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">global</span> <span style="color: #ff8bff;">$xspf</span>;<br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #ff8bff;">$tem</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$xspf</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">createAttribute</span>(<span style="color: #ff8bff;">$eleName</span>);<br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #ff8bff;">$tem</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">value</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$value</span>;<br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #ff8bff;">$parent</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">appendChild</span>(<span style="color: #ff8bff;">$tem</span>);<br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">return</span> <span style="color: #506dbd;">0</span>;<br />&nbsp; &nbsp;<span style="color: #cfbfad;">}</span><br /><br />&nbsp; &nbsp;<span style="color: #808bed;">function</span> <span style="color: #cfbfad;">creTextNode</span>(<span style="color: #cfbfad;">&amp;</span><span style="color: #ff8bff;">$parent</span><span style="color: #cfbfad;">,</span><span style="color: #ff8bff;">$value</span><span style="color: #cfbfad;">=</span><span style="background-color: #404040; color: #ffcd8b;">""</span>)<br />&nbsp; &nbsp;<span style="color: #cfbfad;">{</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">global</span> <span style="color: #ff8bff;">$xspf</span>;<br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #ff8bff;">$tem</span> <span style="color: #cfbfad;">=</span><span style="color: #ff8bff;">$xspf</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">createTextNode</span>(<span style="color: #ff8bff;">$value</span>);<br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #ff8bff;">$parent</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">appendChild</span>(<span style="color: #ff8bff;">$tem</span>);<br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">return</span> <span style="color: #506dbd;">0</span>;<br />&nbsp; &nbsp;<span style="color: #cfbfad;">}</span><br /><br />&nbsp; &nbsp;<span style="color: #cd8b00;">//playlist node generate</span><br />&nbsp; &nbsp;<span style="color: #ff8bff;">$playlist</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$xspf</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">createElement</span>(<span style="background-color: #404040; color: #ffcd8b;">"playlist"</span>);<br />&nbsp; <br />&nbsp; &nbsp;<span style="color: #ff8bff;">$pl_attr_xlmns</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$xspf</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">createAttribute</span>(<span style="background-color: #404040; color: #ffcd8b;">"xmlns"</span>);<br />&nbsp; &nbsp;<span style="color: #ff8bff;">$pl_attr_xlmns</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">value</span> <span style="color: #cfbfad;">=</span> <span style="background-color: #404040; color: #ffcd8b;">"http://xspf.org/ns/0/"</span>;<br />&nbsp; &nbsp;<span style="color: #ff8bff;">$playlist</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">appendChild</span>(<span style="color: #ff8bff;">$pl_attr_xlmns</span>);<br /><br />&nbsp; &nbsp;<span style="color: #ff8bff;">$pl_attr_version</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$xspf</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">createAttribute</span>(<span style="background-color: #404040; color: #ffcd8b;">"version"</span>);<br />&nbsp; &nbsp;<span style="color: #ff8bff;">$pl_attr_version</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">value</span> <span style="color: #cfbfad;">=</span> <span style="background-color: #404040; color: #ffcd8b;">"1"</span>;<br />&nbsp; &nbsp;<span style="color: #ff8bff;">$playlist</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">appendChild</span>(<span style="color: #ff8bff;">$pl_attr_version</span>);<br />&nbsp; <br /><br />&nbsp; &nbsp;<span style="color: #cd8b00;">//title</span><br />&nbsp; &nbsp;<span style="color: #cfbfad;">creEle</span>(<span style="color: #cfbfad;">&amp;</span><span style="color: #ff8bff;">$playlist</span><span style="color: #cfbfad;">,</span><span style="background-color: #404040; color: #ffcd8b;">"title"</span>);<br />&nbsp; &nbsp;<span style="color: #cfbfad;">creTextNode</span>(<span style="color: #ff8bff;">$playlist</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">lastChild</span><span style="color: #cfbfad;">,</span><span style="background-color: #404040; color: #ffcd8b;">"TvList"</span>);<br />&nbsp; &nbsp;<span style="color: #cd8b00;">// &lt;creator&gt;</span><br />&nbsp; <br />&nbsp; &nbsp;<span style="color: #cfbfad;">creEle</span>(<span style="color: #cfbfad;">&amp;</span><span style="color: #ff8bff;">$playlist</span><span style="color: #cfbfad;">,</span><span style="background-color: #404040; color: #ffcd8b;">"creator"</span>);<br />&nbsp; &nbsp;<span style="color: #cfbfad;">creTextNode</span>(<span style="color: #ff8bff;">$playlist</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">lastChild</span><span style="color: #cfbfad;">,</span><span style="background-color: #404040; color: #ffcd8b;">"soul11201"</span>);<br />&nbsp; <br />&nbsp; &nbsp;<span style="color: #cd8b00;">//&lt;info&gt;http://soul11201.eu.nu&lt;/info&gt;</span><br />&nbsp; &nbsp;<span style="color: #cfbfad;">creEle</span>(<span style="color: #cfbfad;">&amp;</span><span style="color: #ff8bff;">$playlist</span><span style="color: #cfbfad;">,</span><span style="background-color: #404040; color: #ffcd8b;">'info'</span>);<br />&nbsp; &nbsp;<span style="color: #cfbfad;">creTextNode</span>(<span style="color: #ff8bff;">$playlist</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">lastChild</span><span style="color: #cfbfad;">,</span><span style="background-color: #404040; color: #ffcd8b;">'http://soul11201.eu.nu'</span>);<br />&nbsp; <br />&nbsp; &nbsp;<span style="color: #cd8b00;">//trackList</span><br />&nbsp; &nbsp;<span style="color: #cfbfad;">creEle</span>(<span style="color: #cfbfad;">&amp;</span><span style="color: #ff8bff;">$playlist</span><span style="color: #cfbfad;">,</span><span style="background-color: #404040; color: #ffcd8b;">"trackList"</span>);<br />&nbsp; &nbsp;<span style="color: #ff8bff;">$trackList</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$playlist</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">lastChild</span>;<br /><br /><br />&nbsp; <br />&nbsp; &nbsp;<span style="color: #cd8b00;">//////////////////////////////////////////////////////////////////////////////</span><br />&nbsp; &nbsp;<span style="color: #cd8b00;">//mysql;</span><br /><br />&nbsp; &nbsp;<span style="color: #ff8bff;">$handle</span><span style="color: #cfbfad;">=</span><span style="color: #cfbfad;">mysql_connect</span>(<span style="background-color: #404040; color: #ffcd8b;">"127.0.0.1"</span><span style="color: #cfbfad;">,</span><span style="background-color: #404040; color: #ffcd8b;">"root"</span><span style="color: #cfbfad;">,</span><span style="background-color: #404040; color: #ffcd8b;">"123a123a"</span>) <span style="color: #808bed;">or</span> <span style="color: #808bed;">die</span>(<span style="color: #cfbfad;">mysql_error</span>());<br />&nbsp; &nbsp;<span style="color: #cfbfad;">mysql_select_db</span>(<span style="background-color: #404040; color: #ffcd8b;">"yz"</span><span style="color: #cfbfad;">,</span><span style="color: #ff8bff;">$handle</span>) <span style="color: #808bed;">or</span> <span style="color: #808bed;">die</span>(<span style="color: #cfbfad;">mysql_error</span>());<br />&nbsp; <br />&nbsp; &nbsp;<span style="color: #ff8bff;">$select</span> <span style="color: #cfbfad;">=</span> <span style="background-color: #404040; color: #ffcd8b;">"select * from track"</span>;<br />&nbsp; &nbsp;<span style="color: #ff8bff;">$result</span> <span style="color: #cfbfad;">=</span> <span style="color: #cfbfad;">mysql_query</span>(<span style="color: #ff8bff;">$select</span>);<br />&nbsp; &nbsp;<span style="color: #808bed;">while</span>(<span style="color: #ff8bff;">$row</span><span style="color: #cfbfad;">=</span> <span style="color: #cfbfad;">mysql_fetch_row</span>(<span style="color: #ff8bff;">$result</span>))<br />&nbsp; &nbsp;<span style="color: #cfbfad;">{</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">//echo $row[2].'&lt;br/&gt;';</span><br /><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">//var_dump($row[2]);</span><br /><br /><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">//track</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cfbfad;">creEle</span>(<span style="color: #ff8bff;">$trackList</span><span style="color: #cfbfad;">,</span><span style="background-color: #404040; color: #ffcd8b;">'track'</span>);<br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #ff8bff;">$currentTrack</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$trackList</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">lastChild</span>;<br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">//locatiion</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cfbfad;">creEle</span>(<span style="color: #ff8bff;">$currentTrack</span><span style="color: #cfbfad;">,</span><span style="background-color: #404040; color: #ffcd8b;">'location'</span>);<br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cfbfad;">creTextNode</span>(<span style="color: #ff8bff;">$currentTrack</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">lastChild</span><span style="color: #cfbfad;">,</span><span style="color: #ff8bff;">$row</span><span style="color: #cfbfad;">[</span><span style="color: #506dbd;">2</span><span style="color: #cfbfad;">]);</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cfbfad;">creEle</span>(<span style="color: #ff8bff;">$currentTrack</span><span style="color: #cfbfad;">,</span><span style="background-color: #404040; color: #ffcd8b;">'title'</span>);<br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cfbfad;">creTextNode</span>(<span style="color: #ff8bff;">$currentTrack</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">lastChild</span><span style="color: #cfbfad;">,</span><span style="color: #ff8bff;">$row</span><span style="color: #cfbfad;">[</span><span style="color: #506dbd;">3</span><span style="color: #cfbfad;">]);</span><br />&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">///////////////////////////</span><br /><br /><br />&nbsp; &nbsp;<span style="color: #cfbfad;">}</span><br />&nbsp; &nbsp;<span style="color: #cfbfad;">mysql_free_result</span>(<span style="color: #ff8bff;">$result</span>);<br />&nbsp; &nbsp;<span style="color: #cfbfad;">mysql_close</span>(<span style="color: #ff8bff;">$handle</span>);<br />&nbsp; &nbsp;<span style="color: #cd8b00;">//debug result</span><br /><br />&nbsp; &nbsp;<span style="color: #cd8b00;">//////////////////////////////////////////////////////////////////////////</span><br /><br /><br /><br />&nbsp; &nbsp;<span style="color: #ff8bff;">$xspf</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">appendChild</span>(<span style="color: #ff8bff;">$playlist</span>);<br />&nbsp; &nbsp;<span style="color: #ff8bff;">$xspf</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">save</span>(<span style="background-color: #404040; color: #ffcd8b;">"yz.xspf"</span>);<br />&nbsp; &nbsp;<span style="color: #808bed;">echo</span> <span style="color: #ff8bff;">$xspf</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">saveXML</span>(<span style="color: #ff8bff;">$playlist</span>);<br /><br /><span style="color: #409090;">?&gt;</span></div><br /><br />]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xml学习笔记3--xml的创建</title>
    <link href="/2014/02/03/56-google-httpblog.html"/>
    <url>/2014/02/03/56-google-httpblog.html</url>
    
    <content type="html"><![CDATA[<div><br />先前由于一直没有注释下面这一行一直报下面的错误。</div><div><br /></div><div><span style="background-color: #1e1e27; color: #cd8b00; font-family: Consolas, 'Lucida Console', 'Courier New';">56&nbsp;</span><span style="background-color: #1e1e27; color: #cfbfad; font-family: Consolas, 'Lucida Console', 'Courier New';">&nbsp;&nbsp; &nbsp;</span><span style="background-color: #1e1e27; color: #cd8b00; font-family: Consolas, 'Lucida Console', 'Courier New';">//? &gt;&lt;?php--</span></div><div><br /></div><div><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-c35bZZTnG8Y/Uu-XUzfn6MI/AAAAAAAAAAo/oLc9xbDANi0/s1600/localhost-20140202-2.php.png" imageanchor="1"><img border="0" src="http://3.bp.blogspot.com/-c35bZZTnG8Y/Uu-XUzfn6MI/AAAAAAAAAAo/oLc9xbDANi0/s1600/localhost-20140202-2.php.png" height="100" width="740" /></a></div></div><div><br /></div><div>google以后根据<a href="http://blog.csdn.net/lilien1010/article/details/8793949">http://blog.csdn.net/lilien1010/article/details/8793949</a>，还以为是编码的错误。<a href="http://abloz.com/2011/10/13/php-sheng-cheng-xml-di-wen-ti.html">http://abloz.com/2011/10/13/php-sheng-cheng-xml-di-wen-ti.html</a>后来发现原来还是因为出现了多余的空格节点的原因。</div><div><br /><a name='more'></a><br /><br /><br /><br /></div><div><div style="background: #fdfdfd; color: black;"><u>PHP语言</u>: <a href="http://fayaa.com/code/">高亮代码由发芽网提供</a></div><div class="source" style="background-color: #1e1e27; color: #cfbfad; font-family: Consolas, 'Lucida Console', 'Courier New';"><span style="color: #cd8b00;">01&nbsp;</span><span style="color: #409090;">&lt;?php</span><br /><span style="color: #cd8b00;">02&nbsp;</span> &nbsp; &nbsp;<span style="color: #cd8b00;">//dom创建一个xml文档</span><br /><span style="color: #cd8b00;">03&nbsp;</span> &nbsp; &nbsp;<span style="color: #cd8b00;">//1.创建dom对象</span><br /><span style="color: #cd8b00;">04&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$document_xml</span> <span style="color: #cfbfad;">=</span> <span style="color: #808bed;">new</span> <span style="color: #cfbfad;">DOMdocument</span>(<span style="background-color: #404040; color: #ffcd8b;">"1.0"</span><span style="color: #cfbfad;">,</span><span style="background-color: #404040; color: #ffcd8b;">"utf-8"</span>);<br /><span style="color: #f810b0;">05&nbsp;</span> &nbsp; <br /><span style="color: #cd8b00;">06&nbsp;</span> &nbsp; &nbsp;<span style="color: #cd8b00;">//2.利用dom对象中的方法创建节点和融合节点</span><br /><span style="color: #cd8b00;">07&nbsp;</span> &nbsp; &nbsp;<span style="color: #cd8b00;">// &nbsp;2.1.创建节点</span><br /><span style="color: #cd8b00;">08&nbsp;</span> &nbsp; &nbsp;<span style="color: #cd8b00;">// &nbsp; 创建文本节点</span><br /><span style="color: #cd8b00;">09&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$text_xml_name</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$document_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">createTextNode</span>(<span style="background-color: #404040; color: #ffcd8b;">"诺基亚"</span>); &nbsp; <br /><span style="color: #f810b0;">10&nbsp;</span> &nbsp; &nbsp;<span style="color: #cd8b00;">// &nbsp; 创建普通元素节点</span><br /><span style="color: #cd8b00;">11&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$name_xml</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$document_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">createElement</span>(<span style="background-color: #404040; color: #ffcd8b;">"name"</span>);<br /><span style="color: #cd8b00;">12&nbsp;</span> &nbsp; <br /><span style="color: #cd8b00;">13&nbsp;</span> &nbsp; &nbsp;<span style="color: #cd8b00;">// &nbsp; 创建文本节点</span><br /><span style="color: #cd8b00;">14&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$text_xml_price</span><span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$document_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">createTextNode</span>(<span style="background-color: #404040; color: #ffcd8b;">"999"</span>);<br /><span style="color: #f810b0;">15&nbsp;</span> &nbsp; &nbsp;<span style="color: #cd8b00;">// 创建属性节点</span><br /><span style="color: #cd8b00;">16&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$price_xml</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$document_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">createElement</span>(<span style="background-color: #404040; color: #ffcd8b;">"price"</span>);<br /><span style="color: #cd8b00;">17&nbsp;</span><br /><span style="color: #cd8b00;">18&nbsp;</span> &nbsp; &nbsp;<span style="color: #cd8b00;">// &nbsp; 创建文本节点</span><br /><span style="color: #cd8b00;">19&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$text_xml_desc</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$document_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">createCDATASection</span>(<span style="background-color: #404040; color: #ffcd8b;">"这是一部好手机"</span>);<br /><span style="color: #f810b0;">20&nbsp;</span> &nbsp; &nbsp;<span style="color: #cd8b00;">// 创建属性节点</span><br /><span style="color: #cd8b00;">21&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$desc_xml</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$document_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">createElement</span>(<span style="background-color: #404040; color: #ffcd8b;">"desc"</span>);<br /><span style="color: #cd8b00;">22&nbsp;</span> &nbsp; <br /><span style="color: #cd8b00;">23&nbsp;</span><br /><span style="color: #cd8b00;">24&nbsp;</span> &nbsp; &nbsp;<span style="color: #cd8b00;">// &nbsp;2.2.融合节点appendChild()</span><br /><span style="color: #f810b0;">25&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$name_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">appendChild</span>(<span style="color: #ff8bff;">$text_xml_name</span>);<br /><span style="color: #cd8b00;">26&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$price_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">appendChild</span>(<span style="color: #ff8bff;">$text_xml_price</span>);<br /><span style="color: #cd8b00;">27&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$desc_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">appendChild</span>(<span style="color: #ff8bff;">$text_xml_desc</span>);<br /><span style="color: #cd8b00;">28&nbsp;</span> &nbsp; <br /><span style="color: #cd8b00;">29&nbsp;</span> &nbsp; &nbsp;<span style="color: #cd8b00;">//</span><br /><span style="color: #f810b0;">30&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$goods_xml</span><span style="color: #cfbfad;">=</span><span style="color: #ff8bff;">$document_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">createElement</span>(<span style="background-color: #404040; color: #ffcd8b;">"goods"</span>);<br /><span style="color: #cd8b00;">31&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$goods_attr_xml</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$document_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">createAttribute</span>(<span style="background-color: #404040; color: #ffcd8b;">"gid"</span>);<br /><span style="color: #cd8b00;">32&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$goods_attr_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">value</span> <span style="color: #cfbfad;">=</span> <span style="background-color: #404040; color: #ffcd8b;">"1"</span>;<br /><span style="color: #cd8b00;">33&nbsp;</span> &nbsp; <br /><span style="color: #cd8b00;">34&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$goods_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">appendChild</span>(<span style="color: #ff8bff;">$goods_attr_xml</span>);<br /><span style="color: #f810b0;">35&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$goods_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">appendChild</span>(<span style="color: #ff8bff;">$name_xml</span>);<br /><span style="color: #cd8b00;">36&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$goods_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">appendChild</span>(<span style="color: #ff8bff;">$price_xml</span>);<br /><span style="color: #cd8b00;">37&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$goods_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">appendChild</span>(<span style="color: #ff8bff;">$desc_xml</span>);<br /><span style="color: #cd8b00;">38&nbsp;</span><br /><span style="color: #cd8b00;">39&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$shop_xml</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$document_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">createElement</span>(<span style="background-color: #404040; color: #ffcd8b;">"shop"</span>);<br /><span style="color: #f810b0;">40&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$shop_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">appendChild</span>(<span style="color: #ff8bff;">$goods_xml</span>);<br /><span style="color: #cd8b00;">41&nbsp;</span> &nbsp; <br /><span style="color: #cd8b00;">42&nbsp;</span> &nbsp; &nbsp;<span style="color: #cfbfad;">header</span>(<span style="background-color: #404040; color: #ffcd8b;">"Content-type:text/xml;charset:utf-8;"</span>);<br /><span style="color: #cd8b00;">43&nbsp;</span> &nbsp; &nbsp;<span style="color: #cd8b00;">//错误的写法 </span><br /><span style="color: #cd8b00;">44&nbsp;</span> &nbsp; &nbsp;<span style="color: #cd8b00;">//echo $document_xml-&gt;saveXML();</span><br /><span style="color: #f810b0;">45&nbsp;</span> &nbsp; &nbsp;<span style="color: #cd8b00;">//第一种方法输出</span><br /><span style="color: #cd8b00;">46&nbsp;</span> &nbsp; &nbsp;<span style="color: #cd8b00;">//echo $document_xml-&gt;saveXML($shop_xml);</span><br /><span style="color: #cd8b00;">47&nbsp;</span><br /><span style="color: #cd8b00;">48&nbsp;</span> &nbsp; &nbsp;<span style="color: #cd8b00;">// 第二种方法输出.xml</span><br /><span style="color: #cd8b00;">49&nbsp;</span> &nbsp; &nbsp;<span style="color: #cd8b00;">//$document_xml-&gt;appendChild($shop_xml);</span><br /><span style="color: #f810b0;">50&nbsp;</span> &nbsp; &nbsp;<span style="color: #cd8b00;">//echo $document_xml-&gt;saveXML();</span><br /><span style="color: #cd8b00;">51&nbsp;</span> &nbsp; &nbsp;<span style="color: #cd8b00;">//echo $document_xml-&gt;saveXML($name_xml);从$name_xml节点开始输出</span><br /><span style="color: #cd8b00;">52&nbsp;</span> &nbsp; &nbsp;<span style="color: #cd8b00;">//echo $document_xml-&gt;saveXML($document_xml);</span><br /><span style="color: #cd8b00;">53&nbsp;</span> &nbsp; &nbsp;<span style="color: #cd8b00;">//echo $document_xml-&gt;save("generate_02.xml")?"OK":"NO";</span><br /><span style="color: #cd8b00;">54&nbsp;</span> &nbsp; &nbsp;<span style="color: #cd8b00;">//echo $document_xml-&gt;save("generate_02.xml");</span><br /><span style="color: #f810b0;">55&nbsp;</span> &nbsp; <br /><span style="color: #cd8b00;">56&nbsp;</span> &nbsp; &nbsp;<span style="color: #cd8b00;">//? &gt;&lt;?php--</span><br /><span style="color: #cd8b00;">57&nbsp;</span><br /><span style="color: #cd8b00;">58&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$text_xml_name</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$document_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">createTextNode</span>(<span style="background-color: #404040; color: #ffcd8b;">"天龙八部"</span>); &nbsp; <br /><span style="color: #cd8b00;">59&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$name_xml</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$document_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">createElement</span>(<span style="background-color: #404040; color: #ffcd8b;">"name"</span>);<br /><span style="color: #f810b0;">60&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$text_xml_price</span><span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$document_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">createTextNode</span>(<span style="background-color: #404040; color: #ffcd8b;">"12.3"</span>);<br /><span style="color: #cd8b00;">61&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$price_xml</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$document_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">createElement</span>(<span style="background-color: #404040; color: #ffcd8b;">"price"</span>);<br /><span style="color: #cd8b00;">62&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$text_xml_desc</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$document_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">createCDATASection</span>(<span style="background-color: #404040; color: #ffcd8b;">"这是一本好书,&gt;10000人在读"</span>);<br /><span style="color: #cd8b00;">63&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$desc_xml</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$document_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">createElement</span>(<span style="background-color: #404040; color: #ffcd8b;">"desc"</span>);<br /><span style="color: #cd8b00;">64&nbsp;</span><br /><span style="color: #f810b0;">65&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$name_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">appendChild</span>(<span style="color: #ff8bff;">$text_xml_name</span>);<br /><span style="color: #cd8b00;">66&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$price_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">appendChild</span>(<span style="color: #ff8bff;">$text_xml_price</span>);<br /><span style="color: #cd8b00;">67&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$desc_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">appendChild</span>(<span style="color: #ff8bff;">$text_xml_desc</span>);<br /><span style="color: #cd8b00;">68&nbsp;</span><br /><span style="color: #cd8b00;">69&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$goods_xml</span><span style="color: #cfbfad;">=</span><span style="color: #ff8bff;">$document_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">createElement</span>(<span style="background-color: #404040; color: #ffcd8b;">"goods"</span>);<br /><span style="color: #f810b0;">70&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$goods_attr_xml</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$document_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">createAttribute</span>(<span style="background-color: #404040; color: #ffcd8b;">"gid"</span>);<br /><span style="color: #cd8b00;">71&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$goods_attr_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">value</span> <span style="color: #cfbfad;">=</span> <span style="background-color: #404040; color: #ffcd8b;">"0"</span>;<br /><span style="color: #cd8b00;">72&nbsp;</span> &nbsp; <br /><span style="color: #cd8b00;">73&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$goods_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">appendChild</span>(<span style="color: #ff8bff;">$goods_attr_xml</span>);<br /><span style="color: #cd8b00;">74&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$goods_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">appendChild</span>(<span style="color: #ff8bff;">$name_xml</span>);<br /><span style="color: #f810b0;">75&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$goods_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">appendChild</span>(<span style="color: #ff8bff;">$price_xml</span>);<br /><span style="color: #cd8b00;">76&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$goods_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">appendChild</span>(<span style="color: #ff8bff;">$desc_xml</span>);<br /><span style="color: #cd8b00;">77&nbsp;</span><br /><span style="color: #cd8b00;">78&nbsp;</span> &nbsp; &nbsp;<span style="color: #cd8b00;">//$shop_xml = $document_xml-&gt;createElement("shop");</span><br /><span style="color: #cd8b00;">79&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$shop_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">appendChild</span>(<span style="color: #ff8bff;">$goods_xml</span>);<br /><span style="color: #f810b0;">80&nbsp;</span><br /><span style="color: #cd8b00;">81&nbsp;</span> &nbsp; &nbsp;<span style="color: #ff8bff;">$document_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">appendChild</span>(<span style="color: #ff8bff;">$shop_xml</span>);<br /><span style="color: #cd8b00;">82&nbsp;</span><br /><span style="color: #cd8b00;">83&nbsp;</span> &nbsp; &nbsp;<span style="color: #808bed;">echo</span> <span style="color: #ff8bff;">$document_xml</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">saveXML</span>(<span style="color: #ff8bff;">$document_xml</span>);<br /><span style="color: #cd8b00;">84&nbsp;</span><br /><span style="color: #f810b0;">85&nbsp;</span><br /><span style="color: #cd8b00;">86&nbsp;</span><span style="color: #409090;">?&gt;</span></div><br /><br /><br /><br /></div>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xml学习笔记2---xml的解析</title>
    <link href="/2014/02/02/xml2-xml.html"/>
    <url>/2014/02/02/xml2-xml.html</url>
    
    <content type="html"><![CDATA[<br /><br /><h3>&nbsp; &nbsp;<span style="color: red;">目标：</span>根据一个已知的xml获取一件商品的名字。</h3><h3><span style="color: orange;">&nbsp;<span style="font-weight: normal;"> </span></span>&nbsp;<span style="color: red;">总结：</span></h3>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 处理这个问题的流程已写在了php的注释之中。<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; xml学习的过程中要始终把握<span style="color: red;"><b>一切皆节点</b></span>这一原则，空格换行也不例外。<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 根据dom树，根据其节点对应的对象的类型我自己简单的将不同类对象概括为：标签(元素)类型（<span style="color: red;">domElement</span>）、属性类型（<span style="color: red;">domAttribute</span>）、文本节点类型（<span style="color: red;">domeText</span>），和节点列表类型（<span style="color: red;">domnodelist</span>），括号内的红色字体为手册内给出的类，我在此处没有区分大小写。<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 根据手册可以发现，他们有很多的相同的属性方法，继承了domnode类。<span style="color: red;">并且有些节点对象不同的属性，可能有相同的值。不同的对象，相同的属性有相同的值。</span><br /><br /><br /><a name='more'></a><br /><br /><br /><div style="background: #fdfdfd; color: black;"><u>XML语言</u>: <a href="http://fayaa.com/code/">高亮代码由发芽网提供</a></div><div class="source" style="background-color: silver; color: black; font-family: Consolas, 'Lucida Console', 'Courier New';"><span style="color: #008800; font-style: italic;">01&nbsp;</span><span style="color: #008800;">&lt;?xml version='1.0' encoding = "utf-8" ?&gt;</span><br /><span style="color: #008800; font-style: italic;">02&nbsp;</span><span style="color: green; font-weight: bold;">&lt;shop&gt;</span><br /><span style="color: #008800; font-style: italic;">03&nbsp;</span> &nbsp; &nbsp;<span style="color: green; font-weight: bold;">&lt;goods</span> <span style="color: #bb4444;">gid=</span><span style="color: #bb4444;">"1"</span><span style="color: green; font-weight: bold;">&gt;</span><br /><span style="color: #008800; font-style: italic;">04&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: green; font-weight: bold;">&lt;name&gt;</span>天龙八部<span style="color: green; font-weight: bold;">&lt;/name&gt;</span><br /><span style="color: #f810b0;">05&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: green; font-weight: bold;">&lt;price&gt;</span>12.3<span style="color: green; font-weight: bold;">&lt;/price&gt;</span><br /><span style="color: #008800; font-style: italic;">06&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: green; font-weight: bold;">&lt;desc&gt;</span> <span style="color: #008800;">&lt;![CDATA[这是一本好书,&gt;10000人在读]]&gt;</span> <span style="color: green; font-weight: bold;">&lt;/desc&gt;</span><br /><span style="color: #008800; font-style: italic;">07&nbsp;</span> &nbsp; &nbsp;<span style="color: green; font-weight: bold;">&lt;/goods&gt;</span><br /><span style="color: #008800; font-style: italic;">08&nbsp;</span> &nbsp; &nbsp;<span style="color: green; font-weight: bold;">&lt;goods</span> <span style="color: #bb4444;">gid=</span><span style="color: #bb4444;">"1"</span><span style="color: green; font-weight: bold;">&gt;</span><br /><span style="color: #008800; font-style: italic;">09&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: green; font-weight: bold;">&lt;name&gt;</span>诺基亚<span style="color: green; font-weight: bold;">&lt;/name&gt;</span><br /><span style="color: #f810b0;">10&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: green; font-weight: bold;">&lt;price&gt;</span>999<span style="color: green; font-weight: bold;">&lt;/price&gt;</span><br /><span style="color: #008800; font-style: italic;">11&nbsp;</span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: green; font-weight: bold;">&lt;desc&gt;</span> <span style="color: #008800;">&lt;![CDATA[这是一部好手机]]&gt;</span> <span style="color: green; font-weight: bold;">&lt;/desc&gt;</span><br /><span style="color: #008800; font-style: italic;">12&nbsp;</span> &nbsp; &nbsp;<span style="color: green; font-weight: bold;">&lt;/goods&gt;</span><br /><span style="color: #008800; font-style: italic;">13&nbsp;</span><span style="color: green; font-weight: bold;">&lt;/shop&gt;</span></div><br /><br /><div style="background: #fdfdfd; color: black;"><u>PHP语言</u>: <a href="http://fayaa.com/code/">高亮代码由发芽网提供</a></div><div class="source" style="background-color: black; color: #cfbfad; font-family: Consolas, 'Lucida Console', 'Courier New';"><span style="color: #cd8b00;">01 </span><span style="color: #409090;">&lt;?php</span><br /><span style="color: #cd8b00;">02 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">//获取一件商品名字</span><br /><span style="color: #cd8b00;">03 </span><br /><span style="color: #cd8b00;">04 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">//1.创建一个空dom对象并将xml加载到内存中</span><br /><span style="color: #f810b0;">05 </span> &nbsp; &nbsp;<span style="color: #cfbfad;">header</span>(<span style="background-color: #404040; color: #ffcd8b;">"Content-type: text/html; charset=utf-8"</span>);<br /><span style="color: #cd8b00;">06 </span> &nbsp; &nbsp;<span style="color: #ff8bff;">$dom</span><span style="color: #cfbfad;">=</span><span style="color: #808bed;">new</span> <span style="color: #cfbfad;">DOMdocument</span>(<span style="background-color: #404040; color: #ffcd8b;">"1.0"</span><span style="color: #cfbfad;">,</span><span style="background-color: #404040; color: #ffcd8b;">"utf-8"</span>); <span style="color: #cd8b00;">//DOMDocument Object</span><br /><span style="color: #cd8b00;">07 </span> &nbsp; &nbsp;<span style="color: #ff8bff;">$dom</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">load</span>(<span style="background-color: #404040; color: #ffcd8b;">"1.xml"</span>);<br /><span style="color: #cd8b00;">08 </span><br /><span style="color: #cd8b00;">09 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">//print_r($dom);</span><br /><span style="color: #f810b0;">10 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">//2.获取&lt;name&gt;节点列表 document</span><br /><span style="color: #cd8b00;">11 </span> &nbsp; &nbsp;<span style="color: #ff8bff;">$goods_name</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$dom</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">getElementsByTagName</span>(<span style="background-color: #404040; color: #ffcd8b;">"name"</span>);<span style="color: #cd8b00;">//DOMNodeList Object</span><br /><span style="color: #cd8b00;">12 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">//print_r($goods_name);</span><br /><span style="color: #cd8b00;">13 </span><br /><span style="color: #cd8b00;">14 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">//3.从列表元素中得到一件商品的名字</span><br /><span style="color: #f810b0;">15 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">//DOMNodeList Object有一个属性一个方法</span><br /><span style="color: #cd8b00;">16 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">/*echo '有'.$goods_name-&gt;length.'件商品&lt;br/&gt;';</span><br /><span style="color: #cd8b00;">17 </span><span style="color: #cd8b00;"> &nbsp; &nbsp;for ($i=0; $i &lt; $goods_name-&gt;length; $i++) {</span><br /><span style="color: #cd8b00;">18 </span><span style="color: #cd8b00;"> &nbsp; &nbsp; &nbsp; &nbsp;echo "&lt;br/&gt;&lt;pre&gt;"; &nbsp; &nbsp;</span><br /><span style="color: #cd8b00;">19 </span><span style="color: #cd8b00;"> &nbsp; &nbsp; &nbsp; &nbsp;print_r($goods_name-&gt;item($i)); // $goods_name-&gt;item($i) &nbsp; DOMElement Object</span><br /><span style="color: #f810b0;">20 </span><span style="color: #cd8b00;"> &nbsp; &nbsp; &nbsp; &nbsp;echo "&lt;/pre&gt;";</span><br /><span style="color: #cd8b00;">21 </span><span style="color: #cd8b00;"> &nbsp; &nbsp;}</span><br /><span style="color: #cd8b00;">22 </span><span style="color: #cd8b00;"> &nbsp; &nbsp;*/</span><br /><span style="color: #cd8b00;">23 </span><br /><span style="color: #cd8b00;">24 </span> &nbsp; &nbsp;<span style="color: #ff8bff;">$temp</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$goods_name</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">item</span>(<span style="color: #506dbd;">0</span>);<br /><span style="color: #f810b0;">25 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">// echo "&lt;br/&gt;&lt;pre&gt;";</span><br /><span style="color: #cd8b00;">26 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">// print_r($temp);</span><br /><span style="color: #cd8b00;">27 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">// echo "&lt;/pre&gt;";</span><br /><span style="color: #cd8b00;">28 </span> &nbsp; <br /><span style="color: #cd8b00;">29 </span> &nbsp; &nbsp;<span style="color: #ff8bff;">$textnode</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$temp</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">childNodes</span>;<br /><span style="color: #f810b0;">30 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">//echo "&lt;br/&gt;&lt;pre&gt;";</span><br /><span style="color: #cd8b00;">31 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">//print_r($name);</span><br /><span style="color: #cd8b00;">32 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">//echo "&lt;/pre&gt;";</span><br /><span style="color: #cd8b00;">33 </span><br /><span style="color: #cd8b00;">34 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">//查看textnode每个元素对象的详细信息。</span><br /><span style="color: #f810b0;">35 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">// print_r($textnode);</span><br /><span style="color: #cd8b00;">36 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">// for ($i=0; $i &lt; $textnode-&gt;length; $i++) { </span><br /><span style="color: #cd8b00;">37 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">// &nbsp; &nbsp; echo "&lt;br/&gt;&lt;pre&gt;";</span><br /><span style="color: #cd8b00;">38 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">// &nbsp; &nbsp; &nbsp;print_r($textnode-&gt;item($i));</span><br /><span style="color: #cd8b00;">39 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">// &nbsp; &nbsp; echo "&lt;/pre&gt;";</span><br /><span style="color: #f810b0;">40 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">// }</span><br /><span style="color: #cd8b00;">41 </span> &nbsp; <br /><span style="color: #cd8b00;">42 </span> &nbsp; &nbsp;<span style="color: #808bed;">echo</span> <span style="color: #ff8bff;">$textnode</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">item</span>(<span style="color: #506dbd;">0</span>)<span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">wholeText</span><span style="color: #cfbfad;">.</span><span style="background-color: #404040; color: #ffcd8b;">'&lt;br/&gt;'</span>;<br /><span style="color: #cd8b00;">43 </span> &nbsp; &nbsp;<span style="color: #808bed;">echo</span> <span style="color: #ff8bff;">$textnode</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">item</span>(<span style="color: #506dbd;">0</span>)<span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">textContent</span><span style="color: #cfbfad;">.</span><span style="background-color: #404040; color: #ffcd8b;">'&lt;br/&gt;'</span>; <br /><span style="color: #cd8b00;">44 </span> &nbsp; &nbsp;<span style="color: #808bed;">echo</span> <span style="color: #ff8bff;">$textnode</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">item</span>(<span style="color: #506dbd;">0</span>)<span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">nodeValue</span><span style="color: #cfbfad;">.</span><span style="background-color: #404040; color: #ffcd8b;">'&lt;br/&gt;'</span>;<br /><span style="color: #f810b0;">45 </span><br /><span style="color: #cd8b00;">46 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">//echo $temp-&gt;wholeText.'&lt;br/&gt;';</span><br /><span style="color: #cd8b00;">47 </span> &nbsp; &nbsp;<span style="color: #808bed;">echo</span> <span style="color: #cfbfad;">var_dump</span>(<span style="color: #ff8bff;">$temp</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">textContent</span>)<span style="color: #cfbfad;">.</span><span style="background-color: #404040; color: #ffcd8b;">'&lt;br/&gt;'</span>; <br /><span style="color: #cd8b00;">48 </span> &nbsp; &nbsp;<span style="color: #808bed;">echo</span> <span style="color: #cfbfad;">var_dump</span>(<span style="color: #ff8bff;">$temp</span><span style="color: #cfbfad;">-&gt;</span><span style="color: #cfbfad;">nodeValue</span>)<span style="color: #cfbfad;">.</span><span style="background-color: #404040; color: #ffcd8b;">'&lt;br/&gt;'</span>;<br /><span style="color: #cd8b00;">49 </span><br /><span style="color: #f810b0;">50 </span><span style="color: #409090;">?&gt;</span></div><br /><br />]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>概率论笔记</title>
    <link href="/2014/02/02/blog-post.html"/>
    <url>/2014/02/02/blog-post.html</url>
    
    <content type="html"><![CDATA[<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="https://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=7,0,19,0" height="460" id="pyn2" width="610">     <param name="movie" value='http://soul11201.webcindario.com/1.swf'>         <param name="bgcolor" value="#FFFFFF">         <param name="quality" value="high">         <param name="allowscriptaccess" value="samedomain">         <param name="wmode" value="transparent">         <embed            type="application/x-shockwave-flash"            pluginspage="https://www.adobe.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash"            name="pyn2"            width="610" height="460"        src='http://soul11201.webcindario.com/1.swf'            bgcolor="#FFFFFF"            quality="high"            allowscriptaccess="samedomain"        wmode="transparent" >           <noembed></noembed>        </object><br /><br />主要试一下blogger能否插入mindjet导出的swf.源网址：<a href="http://soul11201.webcindario.com/gailv1.html">http://soul11201.webcindario.com/gailv1.html</a><br /><br />]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>xml学习笔记-1</title>
    <link href="/2014/02/01/xml-1.html"/>
    <url>/2014/02/01/xml-1.html</url>
    
    <content type="html"><![CDATA[<br />&nbsp; &nbsp; 看xml感觉特别爽，全是数据的集合，样式这些噪声影响非常小，感觉达到了短小精悍的地步。顺便打下广告吧，我学的xml是是看的<a href="http://www.zixue.it/">自学it网</a>的xml教程，感觉教的挺好的。<br /><br />&nbsp; &nbsp; 下面的代码就是仿照视频课程里面的写的（基本上照抄的~__~），也算是复习吧。本来想着也把优酷的搞一下的。没想到file_get_contents();无法获取想要的内容老提示错误。也就先放一放了。<br /><br /><h3>&nbsp; &nbsp;知识点的复习：</h3><h3>&nbsp; &nbsp;1.xml的获取</h3><div>&nbsp; &nbsp; 土豆视频的xml获取方法，在视频里讲的非常的清楚。但是因为时间的原因还是有一些不同的地方的。但基本上还是相同的。首先在开放平台注册账号，完善开发者信息，创建应用。稍微复杂了一些，即使还没有通过验证，但是也能先用key。</div><h3>&nbsp; &nbsp;2.php</h3><div>&nbsp; &nbsp; 在这个实例中php用到的地方主要是操作字符串，主要包括字符串的<a href="http://cn2.php.net/manual/en/function.substr.php" target="_blank">截取substr()</a>;、粘连(.)、查找模式串在字符串的起始位置<a href="http://cn2.php.net/manual/zh/function.strpos.php" target="_blank">strpos()</a>。整个过程也用到了其他的一些函数如isset(),empty()，和在调试的时候用到了var_dump(),print_r, echo等等。<br />&nbsp; &nbsp; &nbsp;empty()和isset()的区别.用<a href="http://cn2.php.net/manual/en/function.empty.php" target="_blank">empty</a>判断变量是否存在(exsit)或者是否是false,isset()用来判断变量是否存在（set）或者是否是NULL。我感觉他们俩的主要区别是在后者，在前者判断变量是否存在，很难说出有什么不同（英文文档中一个用exist，一个用set我将其都理解为存在的意思）。</div><h4>&nbsp; &nbsp; 3.javascript</h4><div style="background-color: black; color: #cfbfad; font-family: Consolas, 'Lucida Console', 'Courier New';"><span style="color: #cd8b00;">57 </span><span style="color: #cfbfad;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;span&gt;土豆开放平台appkey:&lt;input type="text" name="key" onfocus="this.value=''" value="</span><span style="color: #409090;">&lt;?php</span> <span style="color: #808bed;">if</span>(<span style="color: #cfbfad;">isset</span>(<span style="color: #ff8bff;">$_POST</span><span style="color: #cfbfad;">[</span><span style="background-color: #404040; color: #ffcd8b;">'key'</span><span style="color: #cfbfad;">]))</span> &nbsp;<span style="color: #808bed;">echo</span> <span style="color: #ff8bff;">$_POST</span><span style="color: #cfbfad;">[</span><span style="background-color: #404040; color: #ffcd8b;">'key'</span><span style="color: #cfbfad;">];</span> <span style="color: #808bed;">else</span> <span style="color: #808bed;">echo</span> <span style="background-color: #404040; color: #ffcd8b;">'d07a99702d923952'</span>;<span style="color: #409090;">?&gt;</span><span style="color: #cfbfad;">" /&gt;&lt;/span&gt;</span></div><h4>&nbsp; &nbsp; 4.HTML</h4><div style="background-color: black; color: #cfbfad; font-family: Consolas, 'Lucida Console', 'Courier New';"><span style="color: #cd8b00; font-family: Consolas, 'Lucida Console', 'Courier New';">26&nbsp;</span><span style="color: #cfbfad; font-family: Consolas, 'Lucida Console', 'Courier New';">&nbsp; &nbsp; &nbsp; &nbsp;</span><span style="color: #cd8b00; font-family: Consolas, 'Lucida Console', 'Courier New';">//&lt;pre&gt;</span><br /><div style="color: #cfbfad; font-family: Consolas, 'Lucida Console', 'Courier New';"><span style="color: #cd8b00;">27&nbsp;</span>&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">// &nbsp; &nbsp;fadfad&lt;div&gt;&lt;/div&gt;</span></div><span style="color: #cd8b00; font-family: Consolas, 'Lucida Console', 'Courier New';">28&nbsp;</span><span style="color: #cfbfad; font-family: Consolas, 'Lucida Console', 'Courier New';">&nbsp; &nbsp; &nbsp; &nbsp;</span><span style="color: #cd8b00; font-family: Consolas, 'Lucida Console', 'Courier New';">//&lt;/pre&gt;</span>&nbsp;</div><br /><br />&nbsp; <br /><br /><a name='more'></a><h3>所有的源码</h3><div style="background: #fdfdfd; color: black;"><u>PHP语言</u>: <a href="http://fayaa.com/code/">高亮代码由发芽网提供</a></div><div class="source" style="background-color: black; color: #cfbfad; font-family: Consolas, 'Lucida Console', 'Courier New';"><span style="color: #cd8b00;">01 </span><span style="color: #409090;">&lt;?php</span><br /><span style="color: #cd8b00;">02 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">/*</span><br /><span style="color: #cd8b00;">03 </span><span style="color: #cd8b00;"> &nbsp; &nbsp; &nbsp; &nbsp;获取土头和优酷视频的播放地址</span><br /><span style="color: #cd8b00;">04 </span><span style="color: #cd8b00;"> &nbsp; &nbsp;*/</span><br /><span style="color: #f810b0;">05 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">//echo "string";</span><br /><span style="color: #cd8b00;">06 </span> &nbsp; &nbsp;<span style="color: #cfbfad;">var_dump</span>(<span style="color: #ff8bff;">$_POST</span>);<br /><span style="color: #cd8b00;">07 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">///*</span><br /><span style="color: #cd8b00;">08 </span> &nbsp; &nbsp;<span style="color: #808bed;">if</span>(<span style="color: #cfbfad;">isset</span>(<span style="color: #ff8bff;">$_POST</span><span style="color: #cfbfad;">[</span><span style="background-color: #404040; color: #ffcd8b;">"tudou"</span><span style="color: #cfbfad;">])){</span><br /><span style="color: #cd8b00;">09 </span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">//echo "yes";</span><br /><span style="color: #f810b0;">10 </span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #ff8bff;">$url</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$_POST</span><span style="color: #cfbfad;">[</span><span style="background-color: #404040; color: #ffcd8b;">"tudou"</span><span style="color: #cfbfad;">];</span><br /><span style="color: #cd8b00;">11 </span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">//http://www.tudou.com/programs/view/YRITBqGAmRM/</span><br /><span style="color: #cd8b00;">12 </span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #ff8bff;">$itemcode</span> <span style="color: #cfbfad;">=</span> <span style="color: #cfbfad;">basename</span>(<span style="color: #ff8bff;">$url</span>); <span style="color: #cd8b00;">//</span><br /><span style="color: #cd8b00;">13 </span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">//echo $itemcode;</span><br /><span style="color: #cd8b00;">14 </span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #ff8bff;">$myAppKey</span> <span style="color: #cfbfad;">=</span> <span style="color: #ff8bff;">$_POST</span><span style="color: #cfbfad;">[</span><span style="background-color: #404040; color: #ffcd8b;">'key'</span><span style="color: #cfbfad;">];</span><br /><span style="color: #f810b0;">15 </span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #ff8bff;">$api</span> <span style="color: #cfbfad;">=</span> <span style="background-color: #404040; color: #ffcd8b;">'http://api.tudou.com/v6/video/info?app_key='</span><span style="color: #cfbfad;">.</span><span style="color: #ff8bff;">$myAppKey</span><span style="color: #cfbfad;">.</span><span style="background-color: #404040; color: #ffcd8b;">'&amp;format=xml&amp;itemCodes='</span><span style="color: #cfbfad;">.</span><span style="color: #ff8bff;">$itemcode</span>;<br /><span style="color: #cd8b00;">16 </span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #ff8bff;">$con</span> <span style="color: #cfbfad;">=</span> <span style="color: #cfbfad;">file_get_contents</span>(<span style="color: #ff8bff;">$api</span>);<br /><span style="color: #cd8b00;">17 </span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #ff8bff;">$start</span> <span style="color: #cfbfad;">=</span> <span style="color: #cfbfad;">strpos</span>(<span style="color: #ff8bff;">$con</span><span style="color: #cfbfad;">,</span><span style="background-color: #404040; color: #ffcd8b;">"&lt;outerPlayerUrl&gt;"</span>)<span style="color: #cfbfad;">+</span><span style="color: #506dbd;">16</span>;<br /><span style="color: #cd8b00;">18 </span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #ff8bff;">$length</span> <span style="color: #cfbfad;">=</span> <span style="color: #cfbfad;">strpos</span>(<span style="color: #ff8bff;">$con</span><span style="color: #cfbfad;">,</span><span style="background-color: #404040; color: #ffcd8b;">"&lt;/outerPlayerUrl&gt;"</span>) <span style="color: #cfbfad;">-</span> <span style="color: #ff8bff;">$start</span>;<br /><span style="color: #cd8b00;">19 </span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">//echo $start ,$length;</span><br /><span style="color: #f810b0;">20 </span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #ff8bff;">$swf</span> <span style="color: #cfbfad;">=</span> <span style="color: #cfbfad;">substr</span>(<span style="color: #ff8bff;">$con</span><span style="color: #cfbfad;">,</span> <span style="color: #ff8bff;">$start</span><span style="color: #cfbfad;">,</span><span style="color: #ff8bff;">$length</span>);<br /><span style="color: #cd8b00;">21 </span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">//echo $swf;</span><br /><span style="color: #cd8b00;">22 </span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">//var_dump($swf);</span><br /><span style="color: #cd8b00;">23 </span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">//echo $con; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br /><span style="color: #cd8b00;">24 </span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">//print_r($con) ;</span><br /><span style="color: #f810b0;">25 </span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">//&lt;pre&gt;contents &lt;/pre&gt; content中的标签不会被显示出来。</span><br /><span style="color: #cd8b00;">26 </span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">//&lt;pre&gt;</span><br /><span style="color: #cd8b00;">27 </span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">// &nbsp; &nbsp;fadfad&lt;div&gt;&lt;/div&gt; </span><br /><span style="color: #cd8b00;">28 </span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">//&lt;/pre&gt;</span><br /><span style="color: #cd8b00;">29 </span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">//&lt;div&gt;还是会被解析，不会显示出字符fadfad&lt;div&gt;&lt;/div&gt;而只会显示出字符fadfad</span><br /><span style="color: #f810b0;">30 </span> &nbsp; <br /><span style="color: #cd8b00;">31 </span> &nbsp; &nbsp;<span style="color: #cfbfad;">}</span><span style="color: #cd8b00;">//else{</span><br /><span style="color: #cd8b00;">32 </span> &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">//echo "no";</span><br /><span style="color: #cd8b00;">33 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">//}</span><br /><span style="color: #cd8b00;">34 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">//*/</span><br /><span style="color: #f810b0;">35 </span> &nbsp; &nbsp;<span style="color: #cd8b00;">/*</span><br /><span style="color: #cd8b00;">36 </span><span style="color: #cd8b00;"> &nbsp; &nbsp;if(isset($_POST["youku"]))</span><br /><span style="color: #cd8b00;">37 </span><span style="color: #cd8b00;"> &nbsp; &nbsp;{</span><br /><span style="color: #cd8b00;">38 </span><span style="color: #cd8b00;"> &nbsp; &nbsp; &nbsp; &nbsp;$itemcode_y = substr(basename($_POST["youku"]),3,-5);</span><br /><span style="color: #cd8b00;">39 </span><span style="color: #cd8b00;"> &nbsp; &nbsp; &nbsp; &nbsp;//http://v.youku.com/v_show/id_XNjY1NTE1MTg4.html</span><br /><span style="color: #f810b0;">40 </span><span style="color: #cd8b00;"> &nbsp; &nbsp; &nbsp; &nbsp;echo $itemcode_y."&lt;br/&gt;";</span><br /><span style="color: #cd8b00;">41 </span><span style="color: #cd8b00;"> &nbsp; &nbsp; &nbsp; &nbsp;$api = 'http://openapi.youku.com/v2/videos/show_basic.json?client_id=fa38ffda4fd2f01a&amp;video_id='.$itemcode_y;</span><br /><span style="color: #cd8b00;">42 </span><span style="color: #cd8b00;"> &nbsp; &nbsp; &nbsp; &nbsp;echo $api;</span><br /><span style="color: #cd8b00;">43 </span><span style="color: #cd8b00;"> &nbsp; &nbsp; &nbsp; &nbsp;//$con_y = file_get_contents(urlencode($api));</span><br /><span style="color: #cd8b00;">44 </span><span style="color: #cd8b00;"> &nbsp; &nbsp; &nbsp; &nbsp;$con_y = file_get_contents($api);</span><br /><span style="color: #f810b0;">45 </span><span style="color: #cd8b00;"> &nbsp; &nbsp; &nbsp; &nbsp;//$swf_y = substr(string, start);</span><br /><span style="color: #cd8b00;">46 </span><span style="color: #cd8b00;"> &nbsp; &nbsp;}*/</span><br /><span style="color: #cd8b00;">47 </span><span style="color: #409090;">?&gt;</span><br /><span style="color: #cd8b00;">48 </span><br /><span style="color: #cd8b00;">49 </span><span style="color: #cfbfad;">&lt;html&gt;</span><br /><span style="color: #f810b0;">50 </span><span style="color: #cfbfad;"> &nbsp; &nbsp;&lt;head&gt;</span><br /><span style="color: #cd8b00;">51 </span><span style="color: #cfbfad;"> &nbsp; &nbsp; &nbsp; &nbsp;&lt;title&gt;查看视频源地址&lt;/title&gt;</span><br /><span style="color: #cd8b00;">52 </span><span style="color: #cfbfad;"> &nbsp; &nbsp; &nbsp; &nbsp;&lt;meta charset = "utf-8"/&gt;</span><br /><span style="color: #cd8b00;">53 </span><span style="color: #cfbfad;"> &nbsp; &nbsp;&lt;/head&gt;</span><br /><span style="color: #cd8b00;">54 </span><span style="color: #cfbfad;"> &nbsp; &nbsp;&lt;body&gt;</span><br /><span style="color: #f810b0;">55 </span><span style="color: #cfbfad;"> &nbsp; &nbsp; &nbsp; &nbsp;&lt;form method="post"&gt;</span><br /><span style="color: #cd8b00;">56 </span><span style="color: #cfbfad;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;p&gt;</span><br /><span style="color: #cd8b00;">57 </span><span style="color: #cfbfad;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;span&gt;土豆开放平台appkey:&lt;input type="text" name="key" onfocus="this.value=''" value="</span><span style="color: #409090;">&lt;?php</span> <span style="color: #808bed;">if</span>(<span style="color: #cfbfad;">isset</span>(<span style="color: #ff8bff;">$_POST</span><span style="color: #cfbfad;">[</span><span style="background-color: #404040; color: #ffcd8b;">'key'</span><span style="color: #cfbfad;">]))</span> &nbsp;<span style="color: #808bed;">echo</span> <span style="color: #ff8bff;">$_POST</span><span style="color: #cfbfad;">[</span><span style="background-color: #404040; color: #ffcd8b;">'key'</span><span style="color: #cfbfad;">];</span> <span style="color: #808bed;">else</span> <span style="color: #808bed;">echo</span> <span style="background-color: #404040; color: #ffcd8b;">'d07a99702d923952'</span>;<span style="color: #409090;">?&gt;</span><span style="color: #cfbfad;">" /&gt;&lt;/span&gt;</span><br /><span style="color: #cd8b00;">58 </span><span style="color: #cfbfad;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;br/&gt;&lt;br/&gt;</span><br /><span style="color: #cd8b00;">59 </span><span style="color: #cfbfad;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;span&gt;土豆视频网页url:&lt;input type="text" name="tudou" onfocus="this.value = ''" value="</span><span style="color: #409090;">&lt;?php</span> <span style="color: #808bed;">if</span>(<span style="color: #cfbfad;">isset</span>(<span style="color: #ff8bff;">$_POST</span><span style="color: #cfbfad;">[</span><span style="background-color: #404040; color: #ffcd8b;">'tudou'</span><span style="color: #cfbfad;">]))</span> <span style="color: #808bed;">echo</span> <span style="color: #ff8bff;">$_POST</span><span style="color: #cfbfad;">[</span><span style="background-color: #404040; color: #ffcd8b;">'tudou'</span><span style="color: #cfbfad;">];</span> <span style="color: #409090;">?&gt;</span><span style="color: #cfbfad;">" /&gt; &lt;/span&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br /><span style="color: #f810b0;">60 </span><span style="color: #cfbfad;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;/p&gt;</span><br /><span style="color: #cd8b00;">61 </span><span style="color: #cfbfad;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;!--&lt;p&gt;</span><br /><span style="color: #cd8b00;">62 </span><span style="color: #cfbfad;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;优酷视频网页url&lt;input type="text" name="youku" value="" /&gt;</span><br /><span style="color: #cd8b00;">63 </span><span style="color: #cfbfad;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;/p&gt;--&gt;</span><br /><span style="color: #cd8b00;">64 </span><span style="color: #cfbfad;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;input type="submit" value= "查看视频源地址"&gt; &nbsp; &nbsp;</span><br /><span style="color: #f810b0;">65 </span><span style="color: #cfbfad;"> &nbsp; &nbsp; &nbsp; &nbsp;&lt;/form&gt;</span><br /><span style="color: #cd8b00;">66 </span><span style="color: #cfbfad;"> &nbsp; &nbsp; &nbsp; &nbsp;&lt;p&gt;</span><br /><span style="color: #cd8b00;">67 </span><span style="color: #cfbfad;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;视频源地址：</span><br /><span style="color: #cd8b00;">68 </span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #409090;">&lt;?php</span> <br /><span style="color: #cd8b00;">69 </span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">//echo "&lt;pre&gt;".$con."&lt;/pre&gt;"; </span><br /><span style="color: #f810b0;">70 </span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">if</span>(<span style="color: #cfbfad;">!</span><span style="color: #808bed;">empty</span>(<span style="color: #ff8bff;">$_POST</span><span style="color: #cfbfad;">[</span><span style="background-color: #404040; color: #ffcd8b;">"tudou"</span><span style="color: #cfbfad;">]))</span><br /><span style="color: #cd8b00;">71 </span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #808bed;">echo</span> <span style="color: #ff8bff;">$swf</span>;<br /><span style="color: #cd8b00;">72 </span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #cd8b00;">//echo "empty(var)";</span><br /><span style="color: #cd8b00;">73 </span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #409090;">?&gt;</span><br /><span style="color: #cd8b00;">74 </span><span style="color: #cfbfad;"> &nbsp; &nbsp; &nbsp; &nbsp;&lt;/p&gt;</span><br /><span style="color: #f810b0;">75 </span><span style="color: #cfbfad;"> &nbsp; &nbsp;&lt;/body&gt;</span><br /><span style="color: #cd8b00;">76 </span><br /><span style="color: #cd8b00;">77 </span><span style="color: #cfbfad;">&lt;/html&gt;</span></div><br /><br /><br /><br /><br /><br /><br />]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQery权威指南学习笔记</title>
    <link href="/2014/01/11/jquery-learn-1.html"/>
    <url>/2014/01/11/jquery-learn-1.html</url>
    
    <content type="html"><![CDATA[<p>基本上比着书上的程序照抄的一个程序.在runjs.cn上写的，感觉这个平台用来入门学习html,js,css感觉挺不错的，三种代码分别在不同的窗口写，显得比较清爽，其次还可以实时预览。因为</p><p>把addClass写成了addclass,结果一直出错，没注意大小写，血淋淋的教训啊。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<br><br><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>$(<span class="hljs-string">&quot;.divTitle&quot;</span>).<span class="hljs-title function_">click</span>(<br><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;divCurrent&quot;</span>).<span class="hljs-title function_">next</span>(<span class="hljs-string">&quot;.divContent&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;display&quot;</span>,<span class="hljs-string">&quot;block&quot;</span>);<br>&#125;<br>)<br>&#125;<br>);<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.divFrame</span>&#123;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">260px</span>;<br><span class="hljs-attribute">border</span>:solid <span class="hljs-number">1px</span> <span class="hljs-number">#666</span>;<br><span class="hljs-attribute">font-size</span>:<span class="hljs-number">10pt</span>;<br>&#125;<br><span class="hljs-selector-class">.divTitle</span>&#123;<br><span class="hljs-attribute">background-color</span>:<span class="hljs-number">#eee</span>;<span class="hljs-attribute">padding</span>:<span class="hljs-number">5px</span>;&#125;<br><span class="hljs-selector-class">.divContent</span>&#123;<br><span class="hljs-attribute">padding</span>:<span class="hljs-number">5px</span>;<span class="hljs-attribute">display</span>:none;&#125;<br><span class="hljs-selector-class">.divCurrent</span>&#123;<span class="hljs-attribute">background-color</span>:red;&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HelloWorld<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jquery_182&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;library&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/sandbox/jquery/jquery-1.8.2.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;divFrame&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>  <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;divTitle&quot;</span>&gt;</span>点我试一试<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>= <span class="hljs-string">&quot;divContent&quot;</span>&gt;</span><br>HelloWorld!<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jQuery</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正弦电磁波 坡印廷定理证明</title>
    <link href="/2013/12/15/blog-post_3295.html"/>
    <url>/2013/12/15/blog-post_3295.html</url>
    
    <content type="html"><![CDATA[<html><head> <title>正弦电磁波 坡印廷定理证明</title><link href="https://stackedit.io/res-min/themes/base.css" rel="stylesheet"></link><script src="https://stackedit.io/libs/MathJax/MathJax.js?config=TeX-AMS_HTML" type="text/javascript"></script></head><body><div class="container"><h1 id="正弦电磁波">正弦电磁波</h1><hr /> <blockquote>  空间任一点的电磁波随时间的变化是按照正弦波变化。<br />      <h4 id="矢量表示的是不同维度上的分量变化复数包含了初相和幅度复矢量只不过是前两者的结合既表示出了各个维度上的分量同时包含了对应维度上的幅度与初相位">矢量表示的是不同维度上的分量变化,复数包含了初相和幅度。复矢量只不过是前两者的结合，既表示出了各个维度上的分量，同时包含了对应维度上的幅度与初相位。</h4></blockquote><h1 id="坡印廷定理的成立是因为有下面一个数学恒等式">坡印廷定理的成立是因为有下面一个数学恒等式。</h1><blockquote>  <a href="http://www.codecogs.com/eqnedit.php?latex=\dpi{80}&amp;space;\bg_green&amp;space;\dpi{200}&amp;space;\overrightarrow{E}&amp;space;\times&amp;space;\overrightarrow{H}&amp;space;=&amp;space;\frac{1}{2}&amp;space;Re&amp;space;\{\dot{\overrightarrow{E}}&amp;space;\times&amp;space;\dot{\overrightarrow{H^{*}}}&amp;space;+&amp;space;\dot{\overrightarrow{E}}&amp;space;\times&amp;space;\dot{\overrightarrow{H}}&amp;space;e^{2&amp;space;j&amp;space;\omega&amp;space;t}\}" target="_blank"><img src="http://latex.codecogs.com/gif.latex?\dpi{80}&amp;space;\bg_green&amp;space;\dpi{200}&amp;space;\overrightarrow{E}&amp;space;\times&amp;space;\overrightarrow{H}&amp;space;=&amp;space;\frac{1}{2}&amp;space;Re&amp;space;\{\dot{\overrightarrow{E}}&amp;space;\times&amp;space;\dot{\overrightarrow{H^{*}}}&amp;space;+&amp;space;\dot{\overrightarrow{E}}&amp;space;\times&amp;space;\dot{\overrightarrow{H}}&amp;space;e^{2&amp;space;j&amp;space;\omega&amp;space;t}\}" title="\bg_green \dpi{200} \overrightarrow{E} \times \overrightarrow{H} = \frac{1}{2} Re \{\dot{\overrightarrow{E}} \times \dot{\overrightarrow{H^{*}}} + \dot{\overrightarrow{E}} \times \dot{\overrightarrow{H}} e^{2 j \omega t}\}" /></a><br />      <h2 id="对任意一个正弦电磁波都是成立的">对任意一个正弦电磁波都是成立的。</h2></blockquote>下面开始证明上面这个等式。<br /><a name='more'></a><h2 id="任一点的电场瞬时表达式和复矢量表达式">任一点的电场瞬时表达式和复矢量表达式。</h2><a href="http://www.codecogs.com/eqnedit.php?latex=\dpi{200}&amp;space;\bg_green&amp;space;\\&amp;space;\overrightarrow{E}(\overrightarrow{r},t)&amp;space;=\widehat{x}E_{mx}(\overrightarrow{r})cos(\omega&amp;space;t-&amp;space;\varphi_{ex}&amp;space;(\overrightarrow{r})&amp;space;)&amp;space;+&amp;space;\widehat{y}E_{my}(\overrightarrow{r})cos(\omega&amp;space;t-&amp;space;\varphi_{ey}&amp;space;(\overrightarrow{r})&amp;space;)&amp;space;+\widehat{z}E_{mz}(\overrightarrow{r})cos(\omega&amp;space;t-&amp;space;\varphi_{ez}(\overrightarrow{r})&amp;space;)&amp;space;\\&amp;space;\\&amp;space;\dot{\overrightarrow{E}}&amp;space;=&amp;space;E_{mx}({\overrightarrow{r}})e^{-j\varphi_{ex}(\overrightarrow{r})}&amp;space;+&amp;space;E_{my}({\overrightarrow{r}})e^{-j\varphi_{ey}(\overrightarrow{r})&amp;space;}&amp;space;+&amp;space;E_{mz}({\overrightarrow{r}})e^{-j\varphi_{ez}(\overrightarrow{r})&amp;space;}" target="_blank"><img data-pinit="registered" src="http://latex.codecogs.com/gif.latex?\dpi{200}&amp;space;\bg_green&amp;space;\\&amp;space;\overrightarrow{E}(\overrightarrow{r},t)&amp;space;=\widehat{x}E_{mx}(\overrightarrow{r})cos(\omega&amp;space;t-&amp;space;\varphi_{ex}&amp;space;(\overrightarrow{r})&amp;space;)&amp;space;+&amp;space;\widehat{y}E_{my}(\overrightarrow{r})cos(\omega&amp;space;t-&amp;space;\varphi_{ey}&amp;space;(\overrightarrow{r})&amp;space;)&amp;space;+\widehat{z}E_{mz}(\overrightarrow{r})cos(\omega&amp;space;t-&amp;space;\varphi_{ez}(\overrightarrow{r})&amp;space;)&amp;space;\\&amp;space;\\&amp;space;\dot{\overrightarrow{E}}&amp;space;=&amp;space;E_{mx}({\overrightarrow{r}})e^{-j\varphi_{ex}(\overrightarrow{r})}&amp;space;+&amp;space;E_{my}({\overrightarrow{r}})e^{-j\varphi_{ey}(\overrightarrow{r})&amp;space;}&amp;space;+&amp;space;E_{mz}({\overrightarrow{r}})e^{-j\varphi_{ez}(\overrightarrow{r})&amp;space;}" title="\bg_green \\ \overrightarrow{E}(\overrightarrow{r},t) =\widehat{x}E_{mx}(\overrightarrow{r})cos(\omega t- \varphi_{ex} (\overrightarrow{r}) ) + \widehat{y}E_{my}(\overrightarrow{r})cos(\omega t- \varphi_{ey} (\overrightarrow{r}) ) +\widehat{z}E_{mz}(\overrightarrow{r})cos(\omega t- \varphi_{ez}(\overrightarrow{r}) ) \\ \\ \dot{\overrightarrow{E}} = E_{mx}({\overrightarrow{r}})e^{-j\varphi_{ex}(\overrightarrow{r})} + E_{my}({\overrightarrow{r}})e^{-j\varphi_{ey}(\overrightarrow{r}) } + E_{mz}({\overrightarrow{r}})e^{-j\varphi_{ez}(\overrightarrow{r}) }" /></a><br />  <blockquote>  <h4 id="电场瞬时矢量和复矢量可以简单的表示为">电场瞬时矢量和复矢量可以简单的表示为 ：</h4><a href="http://www.codecogs.com/eqnedit.php?latex=\dpi{200}&amp;space;\\&amp;space;\overrightarrow{E}=\widehat{x}E_{1}cos(\omega&amp;space;t-&amp;space;\varphi_{e1})&amp;space;+&amp;space;\widehat{y}E_{2}cos(\omega&amp;space;t-&amp;space;\varphi_{e2})&amp;space;+\widehat{z}E_{3}cos(\omega&amp;space;t-&amp;space;\varphi_{e3}(\overrightarrow{r})&amp;space;)" target="_blank"><img src="http://latex.codecogs.com/gif.latex?\dpi{200}&amp;space;\\&amp;space;\overrightarrow{E}=\widehat{x}E_{1}cos(\omega&amp;space;t-&amp;space;\varphi_{e1})&amp;space;+&amp;space;\widehat{y}E_{2}cos(\omega&amp;space;t-&amp;space;\varphi_{e2})&amp;space;+\widehat{z}E_{3}cos(\omega&amp;space;t-&amp;space;\varphi_{e3}(\overrightarrow{r})&amp;space;)" title="\\ \overrightarrow{E}=\widehat{x}E_{1}cos(\omega t- \varphi_{e1}) + \widehat{y}E_{2}cos(\omega t- \varphi_{e2}) +\widehat{z}E_{3}cos(\omega t- \varphi_{e3}(\overrightarrow{r}) )" /></a><br />      <a href="http://www.codecogs.com/eqnedit.php?latex=\dpi{200}&amp;space;\\&amp;space;\dot{\overrightarrow{E}}&amp;space;=&amp;space;E_{1}e^{-j\varphi_{e1}}&amp;space;+E_{2}e^{-j\varphi_{e2}}&amp;space;+E_{3}e^{-j\varphi_{e3}}" target="_blank"><img src="http://latex.codecogs.com/gif.latex?\dpi{200}&amp;space;\\&amp;space;\dot{\overrightarrow{E}}&amp;space;=&amp;space;E_{1}e^{-j\varphi_{e1}}&amp;space;+E_{2}e^{-j\varphi_{e2}}&amp;space;+E_{3}e^{-j\varphi_{e3}}" title="\\ \dot{\overrightarrow{E}} = E_{1}e^{-j\varphi_{e1}} +E_{2}e^{-j\varphi_{e2}} +E_{3}e^{-j\varphi_{e3}}" /></a><br /> </blockquote><h2 id="磁场的瞬时表达式和复矢量表达式">磁场的瞬时表达式和复矢量表达式</h2><a href="http://www.codecogs.com/eqnedit.php?latex=\dpi{200}&amp;space;\bg_green&amp;space;\\&amp;space;\overrightarrow{H}(\overrightarrow{r},t)&amp;space;=\widehat{x}H_{mx}(\overrightarrow{r})cos(\omega&amp;space;t-&amp;space;\varphi_{mx}&amp;space;(\overrightarrow{r})&amp;space;)&amp;space;+&amp;space;\widehat{y}H_{my}(\overrightarrow{r})cos(\omega&amp;space;t-&amp;space;\varphi_{my}&amp;space;(\overrightarrow{r})&amp;space;)&amp;space;+\widehat{z}H_{mz}(\overrightarrow{r})cos(\omega&amp;space;t-&amp;space;\varphi_{mz}(\overrightarrow{r})&amp;space;)&amp;space;\\&amp;space;\\&amp;space;\dot{\overrightarrow{H}}&amp;space;=&amp;space;H_{mx}({\overrightarrow{r}})e^{-j\varphi_{mx}(\overrightarrow{r})}&amp;space;+&amp;space;H_{my}({\overrightarrow{r}})e^{-j\varphi_{my}(\overrightarrow{r})}&amp;space;+&amp;space;H_{mz}({\overrightarrow{r}})e^{-j\varphi_{mz}(\overrightarrow{r})}" target="_blank"><img data-pinit="registered" src="http://latex.codecogs.com/gif.latex?\dpi{200}&amp;space;\bg_green&amp;space;\\&amp;space;\overrightarrow{H}(\overrightarrow{r},t)&amp;space;=\widehat{x}H_{mx}(\overrightarrow{r})cos(\omega&amp;space;t-&amp;space;\varphi_{mx}&amp;space;(\overrightarrow{r})&amp;space;)&amp;space;+&amp;space;\widehat{y}H_{my}(\overrightarrow{r})cos(\omega&amp;space;t-&amp;space;\varphi_{my}&amp;space;(\overrightarrow{r})&amp;space;)&amp;space;+\widehat{z}H_{mz}(\overrightarrow{r})cos(\omega&amp;space;t-&amp;space;\varphi_{mz}(\overrightarrow{r})&amp;space;)&amp;space;\\&amp;space;\\&amp;space;\dot{\overrightarrow{H}}&amp;space;=&amp;space;H_{mx}({\overrightarrow{r}})e^{-j\varphi_{mx}(\overrightarrow{r})}&amp;space;+&amp;space;H_{my}({\overrightarrow{r}})e^{-j\varphi_{my}(\overrightarrow{r})}&amp;space;+&amp;space;H_{mz}({\overrightarrow{r}})e^{-j\varphi_{mz}(\overrightarrow{r})}" title="\bg_green \\ \overrightarrow{H}(\overrightarrow{r},t) =\widehat{x}H_{mx}(\overrightarrow{r})cos(\omega t- \varphi_{mx} (\overrightarrow{r}) ) + \widehat{y}H_{my}(\overrightarrow{r})cos(\omega t- \varphi_{my} (\overrightarrow{r}) ) +\widehat{z}H_{mz}(\overrightarrow{r})cos(\omega t- \varphi_{mz}(\overrightarrow{r}) ) \\ \\ \dot{\overrightarrow{H}} = H_{mx}({\overrightarrow{r}})e^{-j\varphi_{mx}(\overrightarrow{r})} + H_{my}({\overrightarrow{r}})e^{-j\varphi_{my}(\overrightarrow{r})} + H_{mz}({\overrightarrow{r}})e^{-j\varphi_{mz}(\overrightarrow{r})}" /></a><br />  <blockquote>  <h4 id="磁场的瞬时矢量和复矢量可以简单的表示为">磁场的瞬时矢量和复矢量可以简单的表示为</h4><a href="http://www.codecogs.com/eqnedit.php?latex=\dpi{200}&amp;space;\bg_green&amp;space;\\&amp;space;\overrightarrow{H}=\widehat{x}H_{1}cos(\omega&amp;space;t-&amp;space;\varphi_{h1})&amp;space;+&amp;space;\widehat{y}H_{2}cos(\omega&amp;space;t-&amp;space;\varphi_{h2})&amp;space;+\widehat{z}H_{3}cos(\omega&amp;space;t-&amp;space;\varphi_{h3}(\overrightarrow{r})&amp;space;)" target="_blank"><img src="http://latex.codecogs.com/gif.latex?\dpi{200}&amp;space;&amp;space;\\&amp;space;\overrightarrow{H}=\widehat{x}H_{1}cos(\omega&amp;space;t-&amp;space;\varphi_{h1})&amp;space;+&amp;space;\widehat{y}H_{2}cos(\omega&amp;space;t-&amp;space;\varphi_{h2})&amp;space;+\widehat{z}H_{3}cos(\omega&amp;space;t-&amp;space;\varphi_{h3}(\overrightarrow{r})&amp;space;)" title="\bg_green \\ \overrightarrow{H}=\widehat{x}H_{1}cos(\omega t- \varphi_{h1}) + \widehat{y}H_{2}cos(\omega t- \varphi_{h2}) +\widehat{z}H_{3}cos(\omega t- \varphi_{h3}(\overrightarrow{r}) )" /></a><br />      <a href="http://www.codecogs.com/eqnedit.php?latex=\dpi{200}&amp;space;\bg_green&amp;space;\\&amp;space;\dot{\overrightarrow{H}}&amp;space;=&amp;space;H_{1}e^{-j\varphi_{m1}}&amp;space;+&amp;space;H_{2}e^{-j\varphi_{m2}}&amp;space;+&amp;space;H_{3}e^{-j\varphi_{m3}}" target="_blank"><img src="http://latex.codecogs.com/gif.latex?\dpi{200}&amp;space;&amp;space;\\&amp;space;\dot{\overrightarrow{H}}&amp;space;=&amp;space;H_{1}e^{-j\varphi_{m1}}&amp;space;+&amp;space;H_{2}e^{-j\varphi_{m2}}&amp;space;+&amp;space;H_{3}e^{-j\varphi_{m3}}" title="\bg_green \\ \dot{\overrightarrow{H}} = H_{1}e^{-j\varphi_{m1}} + H_{2}e^{-j\varphi_{m2}} + H_{3}e^{-j\varphi_{m3}}" /></a><br /> </blockquote><h2 id="复坡印廷矢量">复坡印廷矢量</h2><a href="http://www.codecogs.com/eqnedit.php?latex=\dpi{80}&amp;space;\bg_green&amp;space;\dpi{200}&amp;space;\\&amp;space;\dot{\overrightarrow{S}}&amp;space;=&amp;space;\dot{\overrightarrow{E}}&amp;space;\times&amp;space;\dot{\overrightarrow{H^{*}}}&amp;space;\\&amp;space;\\&amp;space;=&amp;space;\begin{vmatrix}&amp;space;\widehat{x}&amp;space;&amp;&amp;space;\widehat{y}&amp;space;&amp;&amp;space;\widehat{z}&amp;space;\\&amp;space;E_{1}e^{-j\varphi_{e1}}&amp;space;&amp;E_{2}e^{-j\varphi_{e2}}&amp;E_{3}e^{-j\varphi_{e3}}&amp;space;\\&amp;space;H_{1}e^{j\varphi_{m1}}&amp;space;&amp;H_{2}e^{j\varphi_{m2}}&amp;H_{3}e^{j\varphi_{m3}}&amp;space;\end{vmatrix}&amp;space;\\&amp;space;\\&amp;space;=&amp;space;\widehat{x}&amp;space;\{&amp;space;E_{2}&amp;space;H_{3}e^{j(\varphi_{m3}-\varphi_{e2})}&amp;space;-&amp;space;E_{3}&amp;space;H_{2}e^{j(\varphi_{m2}-\varphi_{e3})}&amp;space;\}\\&amp;space;-\widehat{y}&amp;space;\{&amp;space;E_{1}&amp;space;H_{3}e^{j(\varphi_{m3}-\varphi_{e1})}&amp;space;-&amp;space;E_{3}&amp;space;H_{1}e^{j(\varphi_{m1}-\varphi_{e3})}&amp;space;\}\\&amp;space;+\widehat{z}&amp;space;\{&amp;space;E_{1}&amp;space;H_{2}e^{j(\varphi_{m2}-\varphi_{e1})}&amp;space;-&amp;space;E_{2}&amp;space;H_{1}e^{j(\varphi_{m1}-\varphi_{e2})}&amp;space;\}" target="_blank"><img data-pinit="registered" src="http://latex.codecogs.com/gif.latex?\dpi{80}&amp;space;\bg_green&amp;space;\dpi{200}&amp;space;\\&amp;space;\dot{\overrightarrow{S}}&amp;space;=&amp;space;\dot{\overrightarrow{E}}&amp;space;\times&amp;space;\dot{\overrightarrow{H^{*}}}&amp;space;\\&amp;space;\\&amp;space;=&amp;space;\begin{vmatrix}&amp;space;\widehat{x}&amp;space;&amp;&amp;space;\widehat{y}&amp;space;&amp;&amp;space;\widehat{z}&amp;space;\\&amp;space;E_{1}e^{-j\varphi_{e1}}&amp;space;&amp;E_{2}e^{-j\varphi_{e2}}&amp;E_{3}e^{-j\varphi_{e3}}&amp;space;\\&amp;space;H_{1}e^{j\varphi_{m1}}&amp;space;&amp;H_{2}e^{j\varphi_{m2}}&amp;H_{3}e^{j\varphi_{m3}}&amp;space;\end{vmatrix}&amp;space;\\&amp;space;\\&amp;space;=&amp;space;\widehat{x}&amp;space;\{&amp;space;E_{2}&amp;space;H_{3}e^{j(\varphi_{m3}-\varphi_{e2})}&amp;space;-&amp;space;E_{3}&amp;space;H_{2}e^{j(\varphi_{m2}-\varphi_{e3})}&amp;space;\}\\&amp;space;-\widehat{y}&amp;space;\{&amp;space;E_{1}&amp;space;H_{3}e^{j(\varphi_{m3}-\varphi_{e1})}&amp;space;-&amp;space;E_{3}&amp;space;H_{1}e^{j(\varphi_{m1}-\varphi_{e3})}&amp;space;\}\\&amp;space;+\widehat{z}&amp;space;\{&amp;space;E_{1}&amp;space;H_{2}e^{j(\varphi_{m2}-\varphi_{e1})}&amp;space;-&amp;space;E_{2}&amp;space;H_{1}e^{j(\varphi_{m1}-\varphi_{e2})}&amp;space;\}" title="\bg_green \dpi{200} \\ \dot{\overrightarrow{S}} = \dot{\overrightarrow{E}} \times \dot{\overrightarrow{H^{*}}} \\ \\ = \begin{vmatrix} \widehat{x} &amp; \widehat{y} &amp; \widehat{z} \\ E_{1}e^{-j\varphi_{e1}} &amp;E_{2}e^{-j\varphi_{e2}}&amp;E_{3}e^{-j\varphi_{e3}} \\ H_{1}e^{j\varphi_{m1}} &amp;H_{2}e^{j\varphi_{m2}}&amp;H_{3}e^{j\varphi_{m3}} \end{vmatrix} \\ \\ = \widehat{x} \{ E_{2} H_{3}e^{j(\varphi_{m3}-\varphi_{e2})} - E_{3} H_{2}e^{j(\varphi_{m2}-\varphi_{e3})} \}\\ -\widehat{y} \{ E_{1} H_{3}e^{j(\varphi_{m3}-\varphi_{e1})} - E_{3} H_{1}e^{j(\varphi_{m1}-\varphi_{e3})} \}\\ +\widehat{z} \{ E_{1} H_{2}e^{j(\varphi_{m2}-\varphi_{e1})} - E_{2} H_{1}e^{j(\varphi_{m1}-\varphi_{e2})} \}" /></a><br />  <h2 id="瞬时坡印廷矢量如下">瞬时坡印廷矢量，如下：</h2><a href="http://www.codecogs.com/eqnedit.php?latex=\dpi{150}&amp;space;\bg_green&amp;space;\\&amp;space;\overrightarrow{S}=\overrightarrow{E}(\overrightarrow{r},t)&amp;space;\times&amp;space;\overrightarrow{H}(\overrightarrow{r},t)&amp;space;\\&amp;space;\\&amp;space;=&amp;space;\begin{vmatrix}&amp;space;\widehat{x}&amp;space;&amp;\widehat{y}&amp;space;&amp;\widehat{z}&amp;space;\\&amp;space;E_{1}cos(\omega&amp;space;t-\varphi_{e1})&amp;space;&amp;E_{2}cos(\omega&amp;space;t-\varphi_{e2})&amp;space;&amp;E_{3}cos(\omega&amp;space;t-\varphi_{e3})\\&amp;space;H_{1}cos(\omega&amp;space;t-\varphi_{m1})&amp;space;&amp;H_{2}cos(\omega&amp;space;t-\varphi_{m2})&amp;space;&amp;H_{3}cos(\omega&amp;space;t-\varphi_{m3})&amp;space;\end{vmatrix}" target="_blank"><img data-pinit="registered" src="http://latex.codecogs.com/gif.latex?\dpi{150}&amp;space;\bg_green&amp;space;\\&amp;space;\overrightarrow{S}=\overrightarrow{E}(\overrightarrow{r},t)&amp;space;\times&amp;space;\overrightarrow{H}(\overrightarrow{r},t)&amp;space;\\&amp;space;\\&amp;space;=&amp;space;\begin{vmatrix}&amp;space;\widehat{x}&amp;space;&amp;\widehat{y}&amp;space;&amp;\widehat{z}&amp;space;\\&amp;space;E_{1}cos(\omega&amp;space;t-\varphi_{e1})&amp;space;&amp;E_{2}cos(\omega&amp;space;t-\varphi_{e2})&amp;space;&amp;E_{3}cos(\omega&amp;space;t-\varphi_{e3})\\&amp;space;H_{1}cos(\omega&amp;space;t-\varphi_{m1})&amp;space;&amp;H_{2}cos(\omega&amp;space;t-\varphi_{m2})&amp;space;&amp;H_{3}cos(\omega&amp;space;t-\varphi_{m3})&amp;space;\end{vmatrix}" title="\\ \overrightarrow{S}=\overrightarrow{E}(\overrightarrow{r},t) \times \overrightarrow{H}(\overrightarrow{r},t) \\ \\ = \begin{vmatrix} \widehat{x} &amp;\widehat{y} &amp;\widehat{z} \\ E_{1}cos(\omega t-\varphi_{e1}) &amp;E_{2}cos(\omega t-\varphi_{e2}) &amp;E_{3}cos(\omega t-\varphi_{e3})\\ H_{1}cos(\omega t-\varphi_{m1}) &amp;H_{2}cos(\omega t-\varphi_{m2}) &amp;H_{3}cos(\omega t-\varphi_{m3}) \end{vmatrix}" /></a><br />  <a href="http://www.codecogs.com/eqnedit.php?latex=\dpi{200}&amp;space;\bg_green&amp;space;\\&amp;space;=&amp;space;\widehat{x}\{E_{2}H_{3}cos(\omega&amp;space;t-\varphi_{e2})cos(\omega&amp;space;t&amp;space;-\varphi_{m3})-&amp;space;E_{3}H_{2}cos(\omega&amp;space;t-\varphi_{e3})&amp;space;cos(\omega&amp;space;t&amp;space;-&amp;space;\varphi_{m2})&amp;space;\}&amp;space;\\&amp;space;-&amp;space;\widehat{y}\{E_{1}H_{3}cos(\omega&amp;space;t-\varphi_{e1})cos(\omega&amp;space;t&amp;space;-\varphi_{m3})-&amp;space;E_{3}H_{1}cos(\omega&amp;space;t-\varphi_{e3})&amp;space;cos(\omega&amp;space;t&amp;space;-&amp;space;\varphi_{m1})&amp;space;\}&amp;space;\\&amp;space;+&amp;space;\widehat{z}\{E_{1}H_{2}cos(\omega&amp;space;t-\varphi_{e1})cos(\omega&amp;space;t&amp;space;-\varphi_{m2})-&amp;space;E_{2}H_{1}cos(\omega&amp;space;t-\varphi_{e2})&amp;space;cos(\omega&amp;space;t&amp;space;-&amp;space;\varphi_{m1})&amp;space;\}" target="_blank"><img data-pinit="registered" src="http://latex.codecogs.com/gif.latex?\dpi{200}&amp;space;\bg_green&amp;space;\\&amp;space;=&amp;space;\widehat{x}\{E_{2}H_{3}cos(\omega&amp;space;t-\varphi_{e2})cos(\omega&amp;space;t&amp;space;-\varphi_{m3})-&amp;space;E_{3}H_{2}cos(\omega&amp;space;t-\varphi_{e3})&amp;space;cos(\omega&amp;space;t&amp;space;-&amp;space;\varphi_{m2})&amp;space;\}&amp;space;\\&amp;space;-&amp;space;\widehat{y}\{E_{1}H_{3}cos(\omega&amp;space;t-\varphi_{e1})cos(\omega&amp;space;t&amp;space;-\varphi_{m3})-&amp;space;E_{3}H_{1}cos(\omega&amp;space;t-\varphi_{e3})&amp;space;cos(\omega&amp;space;t&amp;space;-&amp;space;\varphi_{m1})&amp;space;\}&amp;space;\\&amp;space;+&amp;space;\widehat{z}\{E_{1}H_{2}cos(\omega&amp;space;t-\varphi_{e1})cos(\omega&amp;space;t&amp;space;-\varphi_{m2})-&amp;space;E_{2}H_{1}cos(\omega&amp;space;t-\varphi_{e2})&amp;space;cos(\omega&amp;space;t&amp;space;-&amp;space;\varphi_{m1})&amp;space;\}" title="\\ = \widehat{x}\{E_{2}H_{3}cos(\omega t-\varphi_{e2})cos(\omega t -\varphi_{m3})- E_{3}H_{2}cos(\omega t-\varphi_{e3}) cos(\omega t - \varphi_{m2}) \} \\ - \widehat{y}\{E_{1}H_{3}cos(\omega t-\varphi_{e1})cos(\omega t -\varphi_{m3})- E_{3}H_{1}cos(\omega t-\varphi_{e3}) cos(\omega t - \varphi_{m1}) \} \\ + \widehat{z}\{E_{1}H_{2}cos(\omega t-\varphi_{e1})cos(\omega t -\varphi_{m2})- E_{2}H_{1}cos(\omega t-\varphi_{e2}) cos(\omega t - \varphi_{m1}) \}" /></a><br />  <a href="http://www.codecogs.com/eqnedit.php?latex=\dpi{200}&amp;space;\bg_green&amp;space;\\=&amp;space;\widehat{x}&amp;space;\frac&amp;space;{1}{2}&amp;space;\{E_{2}H_{3}&amp;space;cos(\varphi_{m3}-\varphi_{e2})&amp;space;-&amp;space;E_{3}H_{2}cos(\varphi_{m2}-\varphi_{e3})&amp;space;+&amp;space;E_{2}H_{3}&amp;space;cos(2\omega&amp;space;t&amp;space;-\varphi_{e2}&amp;space;-&amp;space;\varphi_{m3})&amp;space;-&amp;space;E_{3}H_{2}cos(2&amp;space;\omega&amp;space;t-\varphi_{e3}&amp;space;-\varphi_{m2})&amp;space;\}&amp;space;\\&amp;space;\\&amp;space;-\widehat{y}&amp;space;\frac&amp;space;{1}{2}&amp;space;\{&amp;space;E_{1}H_{3}cos(\varphi_{m3}-\varphi_{e1})&amp;space;-&amp;space;E_{3}H_{1}cos(\varphi_{m1}-\varphi_{e3})&amp;space;+&amp;space;E_{1}H_{3}cos(2\omega&amp;space;t&amp;space;-&amp;space;\varphi_{e1}&amp;space;-\varphi_{m3})-&amp;space;E_{3}H_{1}cos(2\omega&amp;space;t-\varphi_{e3}-\varphi_{m1})&amp;space;\}&amp;space;\\&amp;space;\\&amp;space;+&amp;space;\widehat{z}\frac&amp;space;{1}{2}&amp;space;\{E_{1}H_{2}cos(\varphi_{m2}-\varphi_{e1})-&amp;space;E_{2}H_{1}cos(\varphi_{m1}-\varphi_{e2})&amp;space;+&amp;space;E_{1}H_{2}&amp;space;cos(2\omega&amp;space;t-\varphi_{e1}-\varphi_{m2})&amp;space;-&amp;space;E_{2}H_{1}cos(2\omega&amp;space;t&amp;space;-\varphi_{e2}-&amp;space;\varphi_{m1})&amp;space;\}" target="_blank"><img data-pinit="registered" src="http://latex.codecogs.com/gif.latex?\dpi{200}&amp;space;\bg_green&amp;space;\\=&amp;space;\widehat{x}&amp;space;\frac&amp;space;{1}{2}&amp;space;\{E_{2}H_{3}&amp;space;cos(\varphi_{m3}-\varphi_{e2})&amp;space;-&amp;space;E_{3}H_{2}cos(\varphi_{m2}-\varphi_{e3})&amp;space;+&amp;space;E_{2}H_{3}&amp;space;cos(2\omega&amp;space;t&amp;space;-\varphi_{e2}&amp;space;-&amp;space;\varphi_{m3})&amp;space;-&amp;space;E_{3}H_{2}cos(2&amp;space;\omega&amp;space;t-\varphi_{e3}&amp;space;-\varphi_{m2})&amp;space;\}&amp;space;\\&amp;space;\\&amp;space;-\widehat{y}&amp;space;\frac&amp;space;{1}{2}&amp;space;\{&amp;space;E_{1}H_{3}cos(\varphi_{m3}-\varphi_{e1})&amp;space;-&amp;space;E_{3}H_{1}cos(\varphi_{m1}-\varphi_{e3})&amp;space;+&amp;space;E_{1}H_{3}cos(2\omega&amp;space;t&amp;space;-&amp;space;\varphi_{e1}&amp;space;-\varphi_{m3})-&amp;space;E_{3}H_{1}cos(2\omega&amp;space;t-\varphi_{e3}-\varphi_{m1})&amp;space;\}&amp;space;\\&amp;space;\\&amp;space;+&amp;space;\widehat{z}\frac&amp;space;{1}{2}&amp;space;\{E_{1}H_{2}cos(\varphi_{m2}-\varphi_{e1})-&amp;space;E_{2}H_{1}cos(\varphi_{m1}-\varphi_{e2})&amp;space;+&amp;space;E_{1}H_{2}&amp;space;cos(2\omega&amp;space;t-\varphi_{e1}-\varphi_{m2})&amp;space;-&amp;space;E_{2}H_{1}cos(2\omega&amp;space;t&amp;space;-\varphi_{e2}-&amp;space;\varphi_{m1})&amp;space;\}" title="\\= \widehat{x} \frac {1}{2} \{E_{2}H_{3} cos(\varphi_{m3}-\varphi_{e2}) - E_{3}H_{2}cos(\varphi_{m2}-\varphi_{e3}) + E_{2}H_{3} cos(2\omega t -\varphi_{e2} - \varphi_{m3}) - E_{3}H_{2}cos(2 \omega t-\varphi_{e3} -\varphi_{m2}) \} \\ \\ -\widehat{y} \frac {1}{2} \{ E_{1}H_{3}cos(\varphi_{m3}-\varphi_{e1}) - E_{3}H_{1}cos(\varphi_{m1}-\varphi_{e3}) + E_{1}H_{3}cos(2\omega t - \varphi_{e1} -\varphi_{m3})- E_{3}H_{1}cos(2\omega t-\varphi_{e3}-\varphi_{m1}) \} \\ \\ + \widehat{z}\frac {1}{2} \{E_{1}H_{2}cos(\varphi_{m2}-\varphi_{e1})- E_{2}H_{1}cos(\varphi_{m1}-\varphi_{e2}) + E_{1}H_{2} cos(2\omega t-\varphi_{e1}-\varphi_{m2}) - E_{2}H_{1}cos(2\omega t -\varphi_{e2}- \varphi_{m1}) \}" /></a><br />  <blockquote>  <h3 id="另外有等式">另外，有等式：</h3><a href="http://www.codecogs.com/eqnedit.php?latex=\dpi{80}&amp;space;\bg_green&amp;space;\dpi{200}&amp;space;\\&amp;space;\dot{\overrightarrow{E}}&amp;space;\times&amp;space;\dot{\overrightarrow{H}}&amp;space;\\&amp;space;\\&amp;space;=&amp;space;\begin{vmatrix}&amp;space;\widehat{x}&amp;space;&amp;&amp;space;\widehat{y}&amp;space;&amp;&amp;space;\widehat{z}&amp;space;\\&amp;space;E_{1}e^{-j\varphi_{e1}}&amp;space;&amp;E_{2}e^{-j\varphi_{e2}}&amp;E_{3}e^{-j\varphi_{e3}}&amp;space;\\&amp;space;H_{1}e^{-j\varphi_{m1}}&amp;space;&amp;H_{2}e^{-j\varphi_{m2}}&amp;H_{3}e^{-j\varphi_{m3}}&amp;space;\end{vmatrix}&amp;space;\\&amp;space;\\&amp;space;=&amp;space;\widehat{x}&amp;space;\{&amp;space;E_{2}&amp;space;H_{3}e^{-j(\varphi_{m3}+\varphi_{e2})}&amp;space;-&amp;space;E_{3}&amp;space;H_{2}e^{-j(\varphi_{m2}+\varphi_{e3})}&amp;space;\}\\&amp;space;-\widehat{y}&amp;space;\{&amp;space;E_{1}&amp;space;H_{3}e^{-j(\varphi_{m3}+\varphi_{e1})}&amp;space;-&amp;space;E_{3}&amp;space;H_{1}e^{-j(\varphi_{m1}+\varphi_{e3})}&amp;space;\}\\&amp;space;+\widehat{z}&amp;space;\{&amp;space;E_{1}&amp;space;H_{2}e^{-j(\varphi_{m2}+\varphi_{e1})}&amp;space;-&amp;space;E_{2}&amp;space;H_{1}e^{-j(\varphi_{m1}+\varphi_{e2})}&amp;space;\}" target="_blank"><img data-pinit="registered" src="http://latex.codecogs.com/gif.latex?\dpi{80}&amp;space;\bg_green&amp;space;\dpi{200}&amp;space;\\&amp;space;\dot{\overrightarrow{E}}&amp;space;\times&amp;space;\dot{\overrightarrow{H}}&amp;space;\\&amp;space;\\&amp;space;=&amp;space;\begin{vmatrix}&amp;space;\widehat{x}&amp;space;&amp;&amp;space;\widehat{y}&amp;space;&amp;&amp;space;\widehat{z}&amp;space;\\&amp;space;E_{1}e^{-j\varphi_{e1}}&amp;space;&amp;E_{2}e^{-j\varphi_{e2}}&amp;E_{3}e^{-j\varphi_{e3}}&amp;space;\\&amp;space;H_{1}e^{-j\varphi_{m1}}&amp;space;&amp;H_{2}e^{-j\varphi_{m2}}&amp;H_{3}e^{-j\varphi_{m3}}&amp;space;\end{vmatrix}&amp;space;\\&amp;space;\\&amp;space;=&amp;space;\widehat{x}&amp;space;\{&amp;space;E_{2}&amp;space;H_{3}e^{-j(\varphi_{m3}+\varphi_{e2})}&amp;space;-&amp;space;E_{3}&amp;space;H_{2}e^{-j(\varphi_{m2}+\varphi_{e3})}&amp;space;\}\\&amp;space;-\widehat{y}&amp;space;\{&amp;space;E_{1}&amp;space;H_{3}e^{-j(\varphi_{m3}+\varphi_{e1})}&amp;space;-&amp;space;E_{3}&amp;space;H_{1}e^{-j(\varphi_{m1}+\varphi_{e3})}&amp;space;\}\\&amp;space;+\widehat{z}&amp;space;\{&amp;space;E_{1}&amp;space;H_{2}e^{-j(\varphi_{m2}+\varphi_{e1})}&amp;space;-&amp;space;E_{2}&amp;space;H_{1}e^{-j(\varphi_{m1}+\varphi_{e2})}&amp;space;\}" title="\bg_green \dpi{200} \\ \dot{\overrightarrow{E}} \times \dot{\overrightarrow{H}} \\ \\ = \begin{vmatrix} \widehat{x} &amp; \widehat{y} &amp; \widehat{z} \\ E_{1}e^{-j\varphi_{e1}} &amp;E_{2}e^{-j\varphi_{e2}}&amp;E_{3}e^{-j\varphi_{e3}} \\ H_{1}e^{-j\varphi_{m1}} &amp;H_{2}e^{-j\varphi_{m2}}&amp;H_{3}e^{-j\varphi_{m3}} \end{vmatrix} \\ \\ = \widehat{x} \{ E_{2} H_{3}e^{-j(\varphi_{m3}+\varphi_{e2})} - E_{3} H_{2}e^{-j(\varphi_{m2}+\varphi_{e3})} \}\\ -\widehat{y} \{ E_{1} H_{3}e^{-j(\varphi_{m3}+\varphi_{e1})} - E_{3} H_{1}e^{-j(\varphi_{m1}+\varphi_{e3})} \}\\ +\widehat{z} \{ E_{1} H_{2}e^{-j(\varphi_{m2}+\varphi_{e1})} - E_{2} H_{1}e^{-j(\varphi_{m1}+\varphi_{e2})} \}" /></a><br /> </blockquote><h3 id="由上面三个等式得到">由上面三个等式得到</h3><blockquote>  <a href="http://www.codecogs.com/eqnedit.php?latex=\dpi{80}&amp;space;\bg_green&amp;space;\dpi{200}&amp;space;\overrightarrow{E}&amp;space;\times&amp;space;\overrightarrow{H}&amp;space;=&amp;space;\frac{1}{2}&amp;space;Re&amp;space;\{\dot{\overrightarrow{E}}&amp;space;\times&amp;space;\dot{\overrightarrow{H^{*}}}&amp;space;+&amp;space;\dot{\overrightarrow{E}}&amp;space;\times&amp;space;\dot{\overrightarrow{H}}&amp;space;e^{2&amp;space;j&amp;space;\omega&amp;space;t}\}" target="_blank"><img src="http://latex.codecogs.com/gif.latex?\dpi{80}&amp;space;\bg_green&amp;space;\dpi{200}&amp;space;\overrightarrow{E}&amp;space;\times&amp;space;\overrightarrow{H}&amp;space;=&amp;space;\frac{1}{2}&amp;space;Re&amp;space;\{\dot{\overrightarrow{E}}&amp;space;\times&amp;space;\dot{\overrightarrow{H^{*}}}&amp;space;+&amp;space;\dot{\overrightarrow{E}}&amp;space;\times&amp;space;\dot{\overrightarrow{H}}&amp;space;e^{2&amp;space;j&amp;space;\omega&amp;space;t}\}" title="\bg_green \dpi{200} \overrightarrow{E} \times \overrightarrow{H} = \frac{1}{2} Re \{\dot{\overrightarrow{E}} \times \dot{\overrightarrow{H^{*}}} + \dot{\overrightarrow{E}} \times \dot{\overrightarrow{H}} e^{2 j \omega t}\}" /></a><br />      <h2 id="对任意一个正弦电磁波都是成立的-1">对任意一个正弦电磁波都是成立的。</h2></blockquote><h3 id="对上式求一个周期内的平均值从而得到平均坡印廷矢量下面这个公式">对上式，求一个周期内的平均值，从而得到平均坡印廷矢量下面这个公式。</h3><img alt="" data-pinit="registered" src="http://latex.codecogs.com/gif.latex?%5Cdpi%7B200%7D%20%5Cbg_green%20%5C%5C%3CS%3E%20%3D%20%5Cfrac%7B1%7D%7BT%7D%20%5Cint_%7B0%7D%5E%7BT%7D%20%5Coverrightarrow%7BE%7D%20%5Ctimes%20%5Coverrightarrow%7BH%7D%20dt%20%5C%5C%20%3D%20%5Cfrac%7B1%7D%7B2T%7D%20%5Cint_%7B0%7D%5E%7BT%7D%20Re%20%5C%7B%5Cdot%7B%5Coverrightarrow%7BE%7D%7D%20%5Ctimes%20%5Cdot%7B%20%5Coverrightarrow%7BH%5E%7B*%7D%7D%7D%20+%20%5Cdot%7B%5Coverrightarrow%7BE%7D%7D%20%5Ctimes%20%5Cdot%7B%5Coverrightarrow%7BH%7D%7D%20e%5E%7B2%20j%20%5Comega%20t%7D%20%5C%7Ddt%20%5C%5C%20%3D%20%5Cfrac%7B1%7D%7B2%7D%20Re%5C%7B%20%5Cdot%7B%5Coverrightarrow%7BE%7D%7D%20%5Ctimes%20%5Cdot%7B%20%5Coverrightarrow%7BH%5E%7B*%7D%7D%20%7D%20%5C%7D" title="" /></div></body></html>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hetedyne 与 hotodyne</title>
    <link href="/2013/10/19/hetedyne-hotodyne.html"/>
    <url>/2013/10/19/hetedyne-hotodyne.html</url>
    
    <content type="html"><![CDATA[<p>今天终于问明白了这两个专业词语是什么意思了。</p><p>hetedyne:超外差，是指在解调的时候用的解调频率与载波频率有个差值，比如载频有900M，解调的时候用的频率为700M这个时候的好处就是抗干扰能力加强了。</p><p>hotodyne：零差频,是指在解调的时候用的解调频率与载波频率相同</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电磁场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hdu_2012素数判定</title>
    <link href="/2013/07/15/oj-hdu-2012.html"/>
    <url>/2013/07/15/oj-hdu-2012.html</url>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> x,y,flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y),x||y)<br>    &#123;<br> <br>        flag = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = x;i&lt;=y;++i)<br>        &#123;<br>            <span class="hljs-type">int</span> t = i*i+i+<span class="hljs-number">41</span>,j;<br>            <span class="hljs-keyword">for</span>(j = <span class="hljs-number">2</span>;j &lt;= <span class="hljs-type">int</span>(<span class="hljs-built_in">sqrt</span>(t));++j)<br>                <span class="hljs-keyword">if</span>(t%j == <span class="hljs-number">0</span>)<br>                &#123;<br>                    flag = <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br> <br>        &#125;<br>        <span class="hljs-keyword">if</span>(!flag)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sorry\n&quot;</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;OK\n&quot;</span>);<br> <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
      <tag>ACM 训练</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hdu_2011多项式求和</title>
    <link href="/2013/07/15/oj-hdu2011.html"/>
    <url>/2013/07/15/oj-hdu2011.html</url>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> c,t,f;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;c);<br>    <span class="hljs-type">double</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; c;++j)<br>    &#123;<br>        sum = <span class="hljs-number">0</span>;<br>        f= <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;t);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=t;++i)<br>        &#123;<br>            sum += <span class="hljs-number">1</span>/<span class="hljs-type">double</span>((i*f));<br>            f *= <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2f\n&quot;</span>,sum);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
      <tag>ACM 训练</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hdu_2017字符串统计</title>
    <link href="/2013/07/15/oj-hdu-2017.html"/>
    <url>/2013/07/15/oj-hdu-2017.html</url>
    
    <content type="html"><![CDATA[<p>无节操水三道题，加积分，找成就感。嘿嘿。。。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> t,n;<br>    <span class="hljs-type">char</span> s;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;t);<br>    getchar();<br> <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; t;++i)<br>    &#123;<br>        n = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>((s = getchar())!= <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s &lt;=<span class="hljs-string">&#x27;9&#x27;</span> &amp;&amp; s&gt;=<span class="hljs-string">&#x27;0&#x27;</span>) ++n;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,n);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
      <tag>ACM 训练</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hdu 2955 Robberies</title>
    <link href="/2013/06/30/oj-hdu-2955.html"/>
    <url>/2013/06/30/oj-hdu-2955.html</url>
    
    <content type="html"><![CDATA[<p>参考blog:http://blog.csdn.net/hellobabygogo3/article/details/7915083</p><p>加上一点自己的感悟吧，开始这里楼判了等于0，因为他有可能没去偷钱,所以为零。</p><p>因为去偷每一家银行的钱事件是独立的，所以有P(AB)= P(A)P(B);</p><p>所以dp初始化为0。</p><p><code>for(int i = sum;i&gt;=0;--i)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> m(a,b) a&gt;b?a:b</span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> t,n,m[<span class="hljs-number">105</span>];<br>    <span class="hljs-type">double</span> dp[<span class="hljs-number">10005</span>],pm[<span class="hljs-number">105</span>],p;<br>    <span class="hljs-type">int</span> sum;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;t);<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf%d&quot;</span>,&amp;p,&amp;n);<br>        sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%lf&quot;</span>,&amp;m[i],&amp;pm[i]);<br>            sum += m[i];<br>        &#125;<br>        <span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(dp));<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = sum;j &gt;= m[i];--j)<br>            &#123;<br>                dp[j] = m(dp[j],dp[j-m[i]] * (<span class="hljs-number">1</span>-pm[i]));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = sum;i&gt;=<span class="hljs-number">0</span>;--i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(dp[i] &gt; <span class="hljs-number">1</span>-p)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,i);<span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
      <tag>ACM 训练</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>poj 1458 动态规划解最长公共子序列问题</title>
    <link href="/2013/06/28/oj-poj-1458.html"/>
    <url>/2013/06/28/oj-poj-1458.html</url>
    
    <content type="html"><![CDATA[<p>参考blog：http://blog.csdn.net/yysdsyl/article/details/4226630</p><p>【问题】 求两字符序列的最长公共字符子序列</p><p>问题描述：字符序列的子序列是指从给定字符序列中随意地（不一定连续）去掉若干个字符（可能一个也不去掉）后所形成的字符序列。令给定的字符序列X=“x0，x1，…，xm-1”，序列Y=“y0，y1，…，yk-1”是X的子序列，存在X的一个严格递增下标序列&lt;i0，i1，…，ik-1&gt;，使得对所有的j=0，1，…，k-1，有xij=yj。例如，X=“ABCBDAB”，Y=“BCDB”是X的一个子序列。</p><p>考虑最长公共子序列问题如何分解成子问题，设A=“a0，a1，…，am-1”，B=“b0，b1，…，bm-1”，并Z=“z0，z1，…，zk-1”为它们的最长公共子序列。不难证明有以下性质：</p><p>（1）如果am-1=bn-1，则zk-1=am-1=bn-1，且“z0，z1，…，zk-2”是“a0，a1，…，am-2”和“b0，b1，…，bn-2”的一个最长公共子序列；</p><p>（2）如果am-1!=bn-1，则若zk-1!=am-1，蕴涵“z0，z1，…，zk-1”是“a0，a1，…，am-2”和“b0，b1，…，bn-1”的一个最长公共子序列；</p><p>（3）如果am-1!=bn-1，则若zk-1!=bn-1，蕴涵“z0，z1，…，zk-1”是“a0，a1，…，am-1”和“b0，b1，…，bn-2”的一个最长公共子序列。</p><p>这样，在找A和B的公共子序列时，如有am-1=bn-1，则进一步解决一个子问题，找“a0，a1，…，am-2”和“b0，b1，…，bm-2”的一个最长公共子序列；如果am-1!=bn-1，则要解决两个子问题，找出“a0，a1，…，am-2”和“b0，b1，…，bn-1”的一个最长公共子序列和找出“a0，a1，…，am-1”和“b0，b1，…，bn-2”的一个最长公共子序列，再取两者中较长者作为A和B的最长公共子序列。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> M(a,b) a&gt;b?a:b</span><br> <br><span class="hljs-type">int</span> c[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>];<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> a[<span class="hljs-number">1005</span>],b[<span class="hljs-number">1005</span>];<br> <br>    <span class="hljs-type">int</span> a_len,b_len;<br> <br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s&quot;</span>,a,b))<br>    &#123;<br>        a_len = <span class="hljs-built_in">strlen</span>(a);<br>        b_len = <span class="hljs-built_in">strlen</span>(b);<br>        c[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i= <span class="hljs-number">0</span>;i&lt;=a_len;++i)<br>        &#123;<br>            c[i][<span class="hljs-number">0</span>] =<span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j&lt;=b_len;++j)<br>        &#123;<br>            c[<span class="hljs-number">0</span>][j] = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=a_len;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;=b_len;++j)<br>            &#123;<br> <br>                <span class="hljs-keyword">if</span>(a[i<span class="hljs-number">-1</span>] == b[j<span class="hljs-number">-1</span>])<br>                &#123;<br>                    c[i][j] =c[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>] + <span class="hljs-number">1</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    c[i][j] = M(c[i<span class="hljs-number">-1</span>][j],c[i][j<span class="hljs-number">-1</span>]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,c[a_len][b_len]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
      <tag>ACM 训练</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NYOJ_79_拦截导弹</title>
    <link href="/2013/06/25/oj-nyoj-79.html"/>
    <url>/2013/06/25/oj-nyoj-79.html</url>
    
    <content type="html"><![CDATA[<p>http://acm.nyist.net/JudgeOnline/problem.php?pid=79</p><p>先前写过是N^2复杂度，现在是个nlgn复杂度的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"> <br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">int</span>  <span class="hljs-title function_">q</span><span class="hljs-params">(<span class="hljs-type">int</span> *num,<span class="hljs-type">int</span> B,<span class="hljs-type">int</span> E,<span class="hljs-type">int</span> elem)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(B&gt;=E) <span class="hljs-keyword">return</span> E;<br>    <span class="hljs-type">int</span> mid = (B+E)/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(num[mid]&gt;elem) <span class="hljs-keyword">return</span> q(num,mid+<span class="hljs-number">1</span>,E,elem);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> q(num,B,mid,elem);<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(M a,M b)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> a.weight&lt;b.weight;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> t,num[<span class="hljs-number">5005</span>];<br>    <span class="hljs-type">int</span> tm,top = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> input[<span class="hljs-number">5005</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;t);<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br> <br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;tm);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;tm;++i)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;input[i]);<br>        top = <span class="hljs-number">0</span>;<br>        num[<span class="hljs-number">0</span>] = input[<span class="hljs-number">0</span>];<br>        ++top;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; tm;++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(input[i]&lt;num[top<span class="hljs-number">-1</span>])<br>            &#123;<br>                num[top++]=input[i];<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                num[q(num,<span class="hljs-number">0</span>,top<span class="hljs-number">-1</span>,input[i])]=input[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,top);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
      <tag>ACM 训练</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NYOJ_236_心急的C小加</title>
    <link href="/2013/06/25/oj-nyoj-236.html"/>
    <url>/2013/06/25/oj-nyoj-236.html</url>
    
    <content type="html"><![CDATA[<p>http://acm.nyist.net/JudgeOnline/problem.php?pid=236</p><p>这道题，华丽丽的坑了我六个小时的时间。</p><p>参考了一下其他的blog,发现原来用的diworth定理。</p><p>先将一边排好序，然后，对另一个参数构成的序列，求最长单调递减子序列即可以。</p><p>一开始我用的dp双重循环，虽然感觉时间有点危险，但是图省事，提交上去。瞬间tle了。只好改写为栈优化的最长单调递减子序列。</p><p>首先卡壳在了二分查找哪里，看到一篇文章说90%的人都写不对二分查找，然后写啊写啊，一直提交一直错，以为自己的二分查找写错了。</p><p>但是我改啊改啊，怎么就是找不到错，感觉不对劲然后找了另外一道题,http://acm.nyist.net/JudgeOnline/problem.php?pid=17,试了一下，发现自己的二分查找没有写错，那么应该是我的逻辑有错误了，发现自己对diworth定理理解的不是很深刻，然后回头想了一下，也没发现问题，然后又找了道题一导弹防御的问题一试果然有问题。然后开始琢磨怎么回事，最后突然想是不是栈优化的地方出了问题，发现果然是哪里出现了问题。最后总结了一下栈应该怎么用。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">如果是严格单调下降的子序列。在栈中应该替换最先小于等于此值的位置的值。而如果求的不是严格单调下降的子序列。在栈中应该替换最先小于此值的位置的值。<br>反之，求上升的子序列时也是这样。也是可以这样理解，严格的升序或降序则不能有重复的值在栈中，不严格的升序或降序则可以有重复的值。<br></code></pre></td></tr></table></figure><p>修改完栈的错误后，直接把导弹防御的问题给AC了，但是这道题还是有错误，这时候我的个心真是哇凉哇凉的了，然后看讨论区吧，突然发现一句话，说此题要好好看题，瞬间我想是不是我没理解好题意，或者是有哪里漏想了，发现有一句话有意思了，是每一个参数都要小于等于另外一个参数，然后我想是不是少考虑了，有一个参数相等的情况。因为相等的情况下，这时这些木棍只需要一个时间就可以了，发现cmp哪里果然有问题。改完后，瞬间过了。哈哈。。</p><p>总之很开心啊，哈哈，明天考电磁场了，今天真给鼓劲啊，哈哈。。。</p><p>cmp原先是： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(M a,M b)</span><br>&#123;<br>     <span class="hljs-keyword">return</span> a.weight&lt;b.weight;<br>&#125;<br><br></code></pre></td></tr></table></figure></p><p>AC代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> weight;<br>    <span class="hljs-type">int</span> len;<br>&#125;M;<br> <br><span class="hljs-type">int</span>  <span class="hljs-title function_">q</span><span class="hljs-params">(<span class="hljs-type">int</span> *num,<span class="hljs-type">int</span> B,<span class="hljs-type">int</span> E,<span class="hljs-type">int</span> elem)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(B&gt;=E) <span class="hljs-keyword">return</span> E;<br>    <span class="hljs-type">int</span> mid = (B+E)/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(num[mid]&gt;elem) <span class="hljs-keyword">return</span> q(num,mid+<span class="hljs-number">1</span>,E,elem);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> q(num,B,mid,elem);<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(M a,M b)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(a.weight==b.weight) <span class="hljs-keyword">return</span> a.len&lt;b.len;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> a.weight&lt;b.weight;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> t,num[<span class="hljs-number">5005</span>];<br>    <span class="hljs-type">int</span> tm,top = <span class="hljs-number">0</span>;<br>    M input[<span class="hljs-number">5005</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;t);<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br> <br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;tm);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;tm;++i)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;input[i].len,&amp;input[i].weight);<br>        sort(input,input+tm,cmp);<br> <br>        top = <span class="hljs-number">0</span>;<br>        num[<span class="hljs-number">0</span>] = input[<span class="hljs-number">0</span>].len;<br>        ++top;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; tm;++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(input[i].len&lt;num[top<span class="hljs-number">-1</span>])<br>            &#123;<br>                num[top++]=input[i].len;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                num[q(num,<span class="hljs-number">0</span>,top<span class="hljs-number">-1</span>,input[i].len)]=input[i].len;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,top);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
      <tag>ACM 训练</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NYOJ_17_单调递增最长子序列</title>
    <link href="/2013/06/25/oj-nyoj-17.html"/>
    <url>/2013/06/25/oj-nyoj-17.html</url>
    
    <content type="html"><![CDATA[<p>http://acm.nyist.net/JudgeOnline/problem.php?pid=17</p><p>裸的求最长递增子序列。不过要用二分查找+栈优化，不然用二重循环dp会tle</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">q</span><span class="hljs-params">(<span class="hljs-type">char</span> *input,<span class="hljs-type">int</span> begin,<span class="hljs-type">int</span> end,<span class="hljs-type">char</span> elem)</span><br>&#123;<br><span class="hljs-keyword">if</span>(begin &gt;= end) <span class="hljs-keyword">return</span> end;<br><span class="hljs-type">int</span> mid = (begin+end)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(input[mid] &lt; elem) <span class="hljs-keyword">return</span> q(input,mid+<span class="hljs-number">1</span>,end,elem);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> q(input,begin,mid,elem);<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span><br>&#123;<br><span class="hljs-type">int</span> t,top,l;<br><span class="hljs-type">char</span> input[<span class="hljs-number">10010</span>],s[<span class="hljs-number">10010</span>];<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;t);<br><span class="hljs-keyword">while</span>(t--)<br>&#123;<br> <br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,input);<br>top = <span class="hljs-number">1</span>;<br>s[<span class="hljs-number">0</span>]=input[<span class="hljs-number">0</span>];<br> <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;<span class="hljs-built_in">strlen</span>(input);++i)<br>&#123;<br><span class="hljs-keyword">if</span>(s[top<span class="hljs-number">-1</span>] &lt; input[i])&#123;<br>s[top++] = input[i];<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    l=q(s,<span class="hljs-number">0</span>,top<span class="hljs-number">-1</span>,input[i]);<br>s[l] = input[i];<br>&#125;<br>&#125;<br> <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,top);<br>&#125;<br> <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
      <tag>ACM 训练</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NYOJ 矩形嵌套</title>
    <link href="/2013/06/23/nyoj-rect-inner.html"/>
    <url>/2013/06/23/nyoj-rect-inner.html</url>
    
    <content type="html"><![CDATA[<p>比如说矩形(a,b),要是能嵌入到矩形（c,d)中,abcd都为矩形的边长，不防假设a&lt;b,c&lt;d</p><p>必须要a&lt;c 且b&lt;d.这一种情况。</p><p>这样,只需要把所有的矩形按其最长边进行一次升序排列。然后，按其短边构成的序列，找出最长升序子序列就可。</p><p>因为a&lt;c,所以是严格的升序且还要b&lt;d.所以在状态转移的是时候条件是：</p><p><code>input_rec[i].a &gt;input_rec[j].a &amp;&amp; input_rec[i].b&gt;input_rec[j].b</code></p><p>总结起来算法就两步：</p><p>1。将矩形排序：取出每个矩形的最长边，按其升序排列，得到新的矩形的排列顺序。2。最长上升子序列（严格的升序）：按照矩形的短边构成的一个最长上升子序列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S(a,b) a^=b; b^=a; a^=b</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX(a,b) a&gt;b?a:b</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> a,b;<br>&#125;rec;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(rec A,rec B)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> A.b&lt;B.b;<br>&#125;<br> <br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> test,num[<span class="hljs-number">1005</span>];<br>    rec input_rec[<span class="hljs-number">1005</span>];<br> <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;test);<br>    <span class="hljs-keyword">while</span>(test--)<br>    &#123;<br>        <span class="hljs-type">int</span> tmp,m=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;tmp);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i= <span class="hljs-number">0</span>; i &lt; tmp; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;input_rec[i].a,&amp;input_rec[i].b);<br>            <span class="hljs-keyword">if</span>(input_rec[i].a &gt;input_rec[i].b)<br>            &#123;<br>                S(input_rec[i].a,input_rec[i].b);<br>            &#125;<br>        &#125;<br>        sort(input_rec,input_rec+tmp,cmp);<br> <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;tmp;++i)<br>        &#123;<br>            num[i] =<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j&lt;i;++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(input_rec[i].a &gt;input_rec[j].a&amp;&amp;input_rec[i].b&gt;input_rec[j].b)<br>                    num[i] = MAX(num[i],num[j]+<span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(m&lt;num[i])m=num[i];<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,m);<br>    &#125;<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
      <tag>ACM 训练</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>poj 1700 过河问题</title>
    <link href="/2013/06/21/oj-poj-1700.html"/>
    <url>/2013/06/21/oj-poj-1700.html</url>
    
    <content type="html"><![CDATA[<p>参考blog:http://www.cnblogs.com/steady/archive/2011/01/23/1942555.html</p><p>http://blog.csdn.net/wuzhekai1985/article/details/6846934</p><p>上面两篇blog都给出了该怎么做，而且非常详细，但是没给出为什么这么做。</p><p>我试着证明了一下，我感觉这个题的策略其实就是把行动最慢的两个人送过去花费的时间最短。那么这道题的最终结果将是最优的。</p><p>因为送两个人过河所花费的最小时间已经证明出来了。然后就以每两个两个的去送，那么就形成了递归。但是送以两个人两个人的去送，这时时间一定是最优的吗？以三个三个人去送为什么就不行呢?</p><p>不知道对不对希望有大神能指点一下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Cross_river</span><span class="hljs-params">(<span class="hljs-type">int</span> *input,<span class="hljs-type">int</span> num)</span><br>&#123;<br> <br> <br>    <span class="hljs-keyword">if</span>(num &lt;= <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> input[num<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num == <span class="hljs-number">3</span>)<span class="hljs-keyword">return</span> input[<span class="hljs-number">0</span>]+input[<span class="hljs-number">1</span>]+input[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">int</span> t1=input[<span class="hljs-number">0</span>]+input[<span class="hljs-number">1</span>]*<span class="hljs-number">2</span>+input[num<span class="hljs-number">-1</span>];<br>        <span class="hljs-type">int</span> t2=input[<span class="hljs-number">0</span>]*<span class="hljs-number">2</span>+input[num<span class="hljs-number">-1</span>]+input[num<span class="hljs-number">-2</span>];<br>        <span class="hljs-type">int</span> tmp=<span class="hljs-number">0</span>;<br>        tmp = t1&gt;t2?t2:t1;<br>        <span class="hljs-keyword">return</span> Cross_river(input,num<span class="hljs-number">-2</span>)+tmp;<br>    &#125;<br>&#125;<br> <br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> T_c,num,input[<span class="hljs-number">1005</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;T_c);<br>    <span class="hljs-keyword">while</span>(T_c--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; num;++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;input[i]);<br>        &#125;<br>        sort(input,input+num);<br> <br>        sum = Cross_river(input,num);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,sum);<br>    &#125;<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
      <tag>ACM 训练</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单片机上机题目</title>
    <link href="/2013/06/01/danbianji-zuoye.html"/>
    <url>/2013/06/01/danbianji-zuoye.html</url>
    
    <content type="html"><![CDATA[<p>我再也不想写汇编了，写了这么长时间了，还是写不出来易读的代码。读C，还能凑合着读出来一句话，读这玩意，就是在读一个个的字母。</p><p>实验题编程参考</p><p>1．设无符号数x存于内部RAM的VAR的单元，y存于FUNC单元，有如下函数时式</p><pre><code class="hljs">                    x   ，   x≥40              y=    2x  ，   20＜x＜40                    x   ，   x≤20</code></pre><p>设2x仍为一字节数，编写计算此函数的程序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs asm"><br>    ljmp main<br>    org 0030h<br>main:<br>    mov a,#30<br>    cjne a,#40,lp1<br>    ljmp res<br>lp1:<br>    jnc res<br>    cjne a,#20,lp2<br>    ljmp res<br>lp2:<br>    jc res<br>    rlc a<br>res:<br>    mov 31h,a<br><br></code></pre></td></tr></table></figure><p>2．编写8位BCD数加法的程序。设被加数存于内部RAM的30H～33H单元，加数存于40H～43H单元，相加结果存于50H～53H单元，数据按低字节在前的顺序排列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs asm"><br>ajmp main<br>;org 30h<br>;db 05,01,06,03<br>;org 40h<br>;db 1,2,3,4<br> <br>main:<br>    mov r0,#30h<br>    mov r1,#40h<br>    mov r3,#50h<br>    mov r7,#4<br>    clr c<br>    mov sp,#30h<br>     <br>loop_n:<br>   ;mov 不能同时是rn @ri 或是直接地址<br>    mov a,@r0    <br>    addc a,@r1                         <br>    da a<br>    mov @r0,a<br>     <br>    inc r1<br>    inc r0<br>    djnz r7,loop_n<br> <br>    mov r7,4<br>    mov r0,#30h<br>    mov r1,#50h<br>again:<br>      mov a,@r0<br>      mov @r1,a<br>      djnz r7,again<br>       <br></code></pre></td></tr></table></figure><p>3．设在43H～40H单元有4个BCD码，它们为（43H）03，（42H）06，（41H）01，（40H）05。即为一个3615（十进制数），请把它们转换成二进制数，并存入R3R2中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs asm">ajmp main<br>org 0030h<br>main:<br>    mov r0,#43h<br>    acall bcd2b<br>    mov b,#100<br>    mul ab<br>    mov r2,a<br>    mov r3,b<br> <br>    dec r0<br>    acall bcd2b<br>    add a,r2<br>    ;add a,<br>    mov r2,a<br>    mov a,r3<br>    addc a,#00h<br>    mov r3,a<br>here:ajmp here<br>bcd2b:<br>    mov a,@r0<br>    mov b,#0ah<br>    mul ab<br>    dec r0<br>    addc a,@r0<br>ret<br></code></pre></td></tr></table></figure><p>4．设有一个16位二进制数0E1FH存放在（R3R2）中，请将其转换成BCD数，并存放在44H～40H单元中。</p><p>方法：D15×215 + D14×214 … + D1×2 + D0</p><p>(((((((((((((((D15×2 + D14)×2 + D13)× 2 + D12)×2 …</p><ul><li>D1）×2 + D0 ；红字部分对应下面红字程序</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs asm"><br>ajmp main<br>;<br>;解题思路：先将r3r2中存的十六进制数0e1f,按照每位的方式拆开为，0,e,1,f存入到30开始的位置<br>;然后用模拟的方法模拟除k求余法求出十进制的形式<br>;<br>;<br>;<br>org 0030h<br>main:<br>    mov r0,#30h<br>    mov sp,#3fh<br> <br>    mov r3,#0eh<br>    mov r2,#1fh<br>    mov a,r2<br>    acall trans<br>    mov a,r3<br>    acall trans<br>    mov r6,#04h<br> <br>modd:<br>    mov r0,#33h<br>    mov a,#00h<br>    mov b,#00h<br>    acall loop_mod<br>    push b<br>    ; 进栈时sp先加1再进数;<br>    djnz r6,modd<br> <br>here:ajmp here<br> <br>loop_mod:<br>    mov r7,#04<br>    loop_mod_n:<br>    mov b,#10h<br>    mul ab<br>    mov b,#0ah<br>    add a,@r0<br>    div ab<br>    mov @r0,a<br>    mov a,b<br>    dec r0<br>    djnz r7,loop_mod_n<br>ret<br> <br>trans:<br>    push a<br>    anl a,#0fh<br>    mov @r0,a<br>    inc r0<br> <br>    pop a<br>    swap a<br>    anl a,#0fh<br>    mov @r0,a<br>    inc r0<br>ret<br><br></code></pre></td></tr></table></figure><p>5． 在单片机内部RAM50H～57H单元中存放着8个单字节无符号数，编程求它们的和（双字节），放在R1R2中，将其均值(只取整数)放在R3中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs asm">ajmp main<br>org 0030h<br>main:<br>    ;init<br>    acall init<br>    mov a,#0ffh<br>    copy:<br>        mov @r0,a<br>        ;inc a<br>        inc r0<br>    djnz r7,copy<br>    acall init<br> <br>    ;add<br>    ;sum<br>add_loop:<br>    add a,@r0<br>    jnc next<br>    inc r1<br>    next:<br>    inc r0<br>    djnz r7,add_loop<br> <br>    ;averge<br>    mov r2,a<br>    mov r7,#3<br>yiwei:<br>    mov a,r1<br>    rrc a<br>    mov r1,a<br>    mov a,r2<br>    rrc a<br>    mov r2,a<br>    clr c<br>    djnz r7,yiwei<br>here:ajmp here<br> <br>init:<br>    mov r7,#8<br>    mov r0,#50h<br>    mov a,#0<br>    mov r1,#0<br>    mov r2,#0<br>ret<br><br></code></pre></td></tr></table></figure><ol start="6" type="1"><li>将30H单元的二进制数转换成ASCII码放入40H（低位）、41H（高位）单元中。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs asm"><br>ajmp main<br> <br>org 0030h<br>main:<br>    mov r0,#40h<br>    mov a,30h<br> <br>    push a<br>    acall trans<br>    pop a<br>    swap a<br>    acall trans<br> <br>here:ajmp here<br> <br>trans:  <br>        anl a,#0fh<br>        clr c<br>        cjne a,#0ah,san<br>        sjmp hex<br>    san:    <br>        jnc hex<br>        add a,#30h<br>        sjmp out_here<br>    hex:<br>        add a,#40h<br> <br>    out_here:<br>        mov @r0,a<br>        inc r0<br>        nop<br>ret<br><br></code></pre></td></tr></table></figure><ol start="7" type="1"><li>将40H（低位）、41H（高位）的ASCII码转换成二进制数放入30H单元中。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asm">ajmp main<br>org 0030h<br>main:<br>    mov a,40h<br>    anl a,#0fh<br>    mov 40h,a<br>    mov a,41h<br>    anl a,#0fh<br>    swap a<br>    add a,40h<br>    mov 30h,a<br>here:ajmp here<br></code></pre></td></tr></table></figure><p>8．将30H中的bcd码转换成二进制数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asm">MOV A,30H<br>ANL A,#0FH<br>MOV R0,A<br>MOV A,30H<br>SWAP A<br>MOV B,#10<br>MUL AB<br>ADD A,R0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
      <tag>微机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>korasaju算法的粗浅理解</title>
    <link href="/2013/04/29/korasaju-pro.html"/>
    <url>/2013/04/29/korasaju-pro.html</url>
    
    <content type="html"><![CDATA[<p>首先证明一些这句话：<code>逆图中能根据u搜到的点v，说明原图中v可以到达u，而原图中v一定是u树中的结点，也就是说u可到达v,从而一定能形成强连通分支。</code></p><ul><li><p>证明：逆图中能根据u搜到的点v，说明原图中v可以到达u。</p><p>这个很容易证明，因为你在逆图中u能搜到的点v，原图中肯定是v可以到达u。</p></li><li><p>证明：而原图中v一定是u树中的结点，也就是说u可到达v。</p><p>因为是从ｕ开始搜到ｖ，所以ｕ的结束时间比ｖ的大。</p><p>假设原图中ｕ不指向ｖ，又ｖ的结束时间比ｕ小说明先遍历的ｖ后遍历的ｕ，又原图中v可以到达u，故ｖ的结束时间比ｕ的小。则ｕ的结束时间应该比ｖ的小，与已知矛盾，假设不成立。故原图中ｕ能到达ｖ。</p></li></ul><p>综上，也就是说u可到达v,从而形成一个强连通分支。但是能把所有的强连通分支都遍历出来吗？根据强连通性的特点，只要u,v为强连通分量，不管逆图还是原图中u和v都能互相到达。结合上面的证明两个节点的推广一下，就证明了能把包含起始节点u的极大强连通分量给遍历出来。</p><p>参考链接：http://www.cnblogs.com/rainydays/archive/2011/05/01/2033941.html</p><p><strong>自己的一些总结</strong></p><p>根据深搜和回溯来标示节点的开始与结束时间故可以推出以下的性质：</p><ol type="1"><li><p>所有比一个结点X的结束时间小的节点都是在原图中节点X能到达的节点</p></li><li><p>如果逆图中X能到达某一个节点Y,说明原图中节点Y能到达X.</p></li><li><p>节点X结束时间最大说明：X是一个子树的根，否则X的结束时间不是最大的，其根的时间要比它还大。</p></li><li><p>其所有子树节点的值处在其开始时间和结束时间之间。</p></li><li><p>所有比节点X的结束时间大的节点是节点X不能到达的，所以先处理大的结束时间就避免了转置图中所有X能到达的没被访问过的节点在原图中是X能到的。要是X不能到肯定结束时间比X的大已经被处理。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
      <tag>ACM 训练</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>天线半波振子二元阵图 matlab画图</title>
    <link href="/2013/04/07/ant.html"/>
    <url>/2013/04/07/ant.html</url>
    
    <content type="html"><![CDATA[<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%半波振子元阵子的图像</span><br>a = [<span class="hljs-number">0</span>:<span class="hljs-number">0.1</span>:<span class="hljs-number">2</span>*<span class="hljs-built_in">pi</span>];<br>b = <span class="hljs-built_in">pi</span>*<span class="hljs-built_in">cos</span>(a)/<span class="hljs-number">2</span>;<br>c = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">cos</span>(b)./<span class="hljs-built_in">sin</span>(a));<br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>);<br>polar(a,c);<br>  <br><span class="hljs-comment">%阵因子图像</span><br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>);<br>d = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">cos</span>(<span class="hljs-built_in">pi</span>*<span class="hljs-built_in">cos</span>(a))*<span class="hljs-number">2</span>);<br>polar(a,d);<br>  <br><span class="hljs-comment">%方向图的 E 图像</span><br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>);<br>e = c.*d;<br>polar(a,e);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>matlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二分查找</title>
    <link href="/2013/04/06/binsearch.html"/>
    <url>/2013/04/06/binsearch.html</url>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">query</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> xy,<span class="hljs-type">int</span> begin,<span class="hljs-type">int</span> end)</span><br>&#123;<br>    <span class="hljs-type">int</span> i = (begin + end)/<span class="hljs-number">2</span>;<br>    <br>    <span class="hljs-keyword">if</span>(begin &lt;= end)&#123;<br>    <br>        <span class="hljs-keyword">if</span>(xy == a[i])<span class="hljs-keyword">return</span> i;<br>    <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(xy &gt; a[i]) query(xy,i+<span class="hljs-number">1</span>,end);<br>    <br>        <span class="hljs-keyword">else</span>  query(xy,begin,i - <span class="hljs-number">1</span>);<br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><p>上面是先前写的二分查找的程序，最终返回的值是乱七八糟的。原本以为是编译器有问题，后来发现是函数又问题，漏掉了return，自己还是没理解透递归。下面是正确的二分查找。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">query</span><span class="hljs-params">(<span class="hljs-type">int</span> *a,<span class="hljs-type">int</span> xy,<span class="hljs-type">int</span> begin,<span class="hljs-type">int</span> end)</span><br>&#123;<br>    <span class="hljs-type">int</span> i = (begin + end)/<span class="hljs-number">2</span>;<br>   <br>    <span class="hljs-keyword">if</span>(begin &lt;= end)&#123;<br>   <br>        <span class="hljs-keyword">if</span>(xy == a[i])<span class="hljs-keyword">return</span> i;<br>   <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(xy &gt; a[i]) <span class="hljs-keyword">return</span> query(xy,i+<span class="hljs-number">1</span>,end);<br>   <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span>  query(xy,begin,i - <span class="hljs-number">1</span>);<br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><p>后来又发现一个问题，漏掉处理当查询不到时这种情况的处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">query</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> xy,<span class="hljs-type">int</span> begin,<span class="hljs-type">int</span> end)</span><br>&#123;<br>    <span class="hljs-type">int</span> i = (begin + end)/<span class="hljs-number">2</span>;<br>    <br>    <span class="hljs-keyword">if</span>(begin &lt;= end)&#123;<br>    <br>        <span class="hljs-keyword">if</span>(xy == a[i])<span class="hljs-keyword">return</span> i;<br>    <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(xy &gt; a[i]) query(xy,i+<span class="hljs-number">1</span>,end);<br>    <br>        <span class="hljs-keyword">else</span>  query(xy,begin,i - <span class="hljs-number">1</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
      <tag>ACM 训练</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>序列的周期性判断与求法</title>
    <link href="/2013/04/05/backup_dsp-1.html"/>
    <url>/2013/04/05/backup_dsp-1.html</url>
    
    <content type="html"><![CDATA[<p><img src="/assets/dsp-0.jpg" /></p><p>假设序列的周期为N，则有：</p><p><img src="/assets/dsp-1.jpg" /></p><p>因为N为序列的周期，故为整数，又k为整数，所以若序列为周期序列则有：<imgsrc="/assets/dsp-2.jpg" />为有理数。即序列的周期性和<imgsrc="/assets/dsp-2.jpg" />为有理数为互为充要条件。</p><p>那如果已知序列为周期序列那周期为多少呢？下面从下面的式子入手求解。<img src="/assets/dsp-3.jpg" /></p><p>由上式可知：</p><p><img src="/assets/dsp-4.jpg" /></p><p>可以看到应为k 的取值可以是全体整数，而<imgsrc="/assets/dsp-2.jpg" />为有理数，N为整数，故N即为：</p><p><img src="/assets/dsp-5.jpg" /></p><p>找到的最小整数N即为序列的最小周期，当然N的倍数也为序列的周期。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字信号处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ax中的十六进制数据以ascii码的形式显示出来</title>
    <link href="/2013/04/05/backup_display_ax_num.html"/>
    <url>/2013/04/05/backup_display_ax_num.html</url>
    
    <content type="html"><![CDATA[<p>ax中的十六进制数据以ascii码的形式显示出来</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code,<span class="hljs-built_in">ds</span>:data<br>   <br>data <span class="hljs-meta">segment</span><br>    mem <span class="hljs-built_in">db</span> <span class="hljs-number">4</span> dup(?),<span class="hljs-string">&#x27;$&#x27;</span><br>data ends<br>   <br>code <span class="hljs-meta">segment</span><br><span class="hljs-symbol">    start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,data<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">di</span>,mem<br>       <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">2a49h</span><br>       <br>    <span class="hljs-keyword">call</span> tiaoAL<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">ah</span><br>    <span class="hljs-keyword">call</span> tiaoAL<br>       <br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">dx</span>,mem<br>    <span class="hljs-keyword">mov</span> <span class="hljs-number">ah</span>,<span class="hljs-number">09h</span><br>    <span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br>       <br>    <span class="hljs-keyword">mov</span> <span class="hljs-number">ah</span>,<span class="hljs-number">4ch</span><br>    <span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br><span class="hljs-symbol">       </span><br><span class="hljs-symbol">    tiaoAL:</span><br>        <span class="hljs-keyword">push</span> <span class="hljs-built_in">ax</span><br>        <span class="hljs-keyword">call</span> tiao<br>        <span class="hljs-keyword">mov</span> [<span class="hljs-built_in">di</span>],<span class="hljs-built_in">al</span><br>        <span class="hljs-keyword">inc</span> <span class="hljs-built_in">di</span><br>        <span class="hljs-keyword">pop</span> <span class="hljs-built_in">ax</span><br>           <br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cl</span>,<span class="hljs-number">4</span><br>        <span class="hljs-keyword">shr</span> <span class="hljs-built_in">al</span>,<span class="hljs-built_in">cl</span><br>        <span class="hljs-keyword">call</span> tiao<br>        <span class="hljs-keyword">mov</span> [<span class="hljs-built_in">di</span>],<span class="hljs-built_in">al</span><br>        <span class="hljs-keyword">inc</span> <span class="hljs-built_in">di</span><br>    <span class="hljs-keyword">ret</span><br><span class="hljs-symbol">       </span><br><span class="hljs-symbol">       </span><br><span class="hljs-symbol">    tiao:</span><br>        <span class="hljs-keyword">and</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">0fh</span><br>        <span class="hljs-keyword">daa</span><br>        <span class="hljs-keyword">add</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">0f0h</span><br>        <span class="hljs-keyword">adc</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">40h</span><br>    <span class="hljs-keyword">ret</span><br>code ends<br>end start<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
      <tag>微机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>int21h的02、 09功能模拟</title>
    <link href="/2013/04/05/backup_int210209.html"/>
    <url>/2013/04/05/backup_int210209.html</url>
    
    <content type="html"><![CDATA[<p>在写这个程序的过程中学中遇到了，很多的错误。</p><p>1、入栈出栈的次数要一致</p><p>比如说写下面的程序的时候：</p><p>;原始值恢复，返回主程序</p><p>pop dx</p><p>pop bx</p><p>pop di</p><p>pop dx一开始没有加，导致在最后一次的循环的过程中，直接jz,少执行一次popax,最终堆栈进出的次数不一致，导致ret 的恢复的ip地址错了，</p><p>最后在屏幕上显示了，一堆乱码。</p><p>2、0a,0d 在ascii码表里说是回车换行.</p><p>最后我发现程序有个问题就是，因为我是直接操作的显存。直接忽视了、回车与换行，在</p><p>执行了下面的程序后：</p><p>mov dl,0ah</p><p>call int21h02</p><p>mov dl,0dh</p><p>call int21h02</p><p>本应该另起一行再显示的。但是当我执行完：</p><p>mov dl,'l'</p><p>call int21h02</p><p>被l代替了a，输出的最终结果为 lbcdefgh</p><p>程序最终也只能覆盖显示了。嗯，这个bug留在以后调试吧。</p><p>int21h的02、 09功能模拟程序</p><p>;系统的字符串输出功能 assume cs:code,ds:data</p><p>data segment buffer db 'abcdefgh$' data ends</p><p>code segment start: mov ax,data mov ds,ax</p><p>lea dx,buffer call int21h09</p><p>mov dl,0ah call int21h02 mov dl,0dh call int21h02</p><p>mov dl,'l' call int21h02</p><p>mov ax,4c00h int 21h</p><p>;将偏移地址以dx为首的字符串输出在屏幕上，摸拟系统的9号功能int21h09:</p><p>;bx ，di中的原始值保存起来 push di push bx</p><p>xor di,di again: ;将dx指向的字符送到dl中 push dx;dl中将会把字符存到dl中，故先把dx中的值保存一下。 mov bx,dx mov dl,[bx]cmp dl,'$' ;字符串是否为结束标志 jz outAgain call int21h02;不是结束标志,则将dl中的字符显示出来 pop dx inc dx add di,2 jmpagain</p><p>outAgain: ;原始值恢复，返回主程序 pop dx pop bx pop di ret</p><p>;显示单个字符，将dl中的字符显示出来，模拟系统的2号功能 int21h02: movbx,0b800h mov es,bx mov es:[di],dl ret</p><p>code ends end start</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
      <tag>微机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中断请求标志位</title>
    <link href="/2013/03/21/zhong-duan-biao-zhi-wei.html"/>
    <url>/2013/03/21/zhong-duan-biao-zhi-wei.html</url>
    
    <content type="html"><![CDATA[<p>关于中断请求标志位</p><p>今天才发现我用了这么长时间的中断服务函数，竟然不知道中断请求标志位到底具体是什么意思~~~悲哀！！！</p><p>一般就用了定时器中断服务函数，没关心中断请求标志位，今天才发现，原来定时器中断请求标志位就是定时器溢出标志位，定时器溢出时自动跳到相应中断向量处，当主机响应该定时器中断时，该标志位由硬件自动清零。所以，我虽然写了定时器中断服务函数，而没操作定时器溢出标志位，程序还能运行，是因为单片机自己把这事儿给办了~~是典型的瞎猫碰到死老鼠</p><p>对于外部中断，其中断请求标志位跟定时器溢出标志位相似，都是主机相应中断后自动硬件清零，所以，也不必考虑需要不需要软件清零</p><p>串行口中断就不一样了，它分为发送中断标志位和接受中断标志位，在方式0中，当发送完或者接受完第八位数据后，由硬件置位，而其他工作方式下，（发送时）当发送停止位前或者（接收时）当接受到停止位的中间时刻由硬件置位。标志位置位象征着一帧数据的操作完成，继而转到中断服务函数，但是，这些标志位不能由硬件清零，只能用软件清零。</p><p>其他扩展的单片机，还有N多可以产生中断的功能，如果写中断服务函数，就要看清楚这些中断标志位了，看下到底需要不需要软件清零，需要软件清零但是不软件清零的，可能就要死在终端服务函数中了~~~~~~应该是吧，至少我这么理解</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
      <tag>微机组成原理</tag>
      
      <tag>中断</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单片机：数码管显示0到9实验</title>
    <link href="/2013/03/14/backup_asm_shu_ma_guan_display_0_9.html"/>
    <url>/2013/03/14/backup_asm_shu_ma_guan_display_0_9.html</url>
    
    <content type="html"><![CDATA[<p>收获：</p><p>寻址方式.</p><p>存储器结构.</p><p>用到的指令：</p><p>mov movc movx</p><p>dptr cjne djnz</p><p>lcall org ajmp</p><p>ret</p><p>思路就是每个一会换成另外一个数。先前写的：</p><p>;显示电子钟的秒数的变化 org 0000h ajmp main org 0030h main: movp2,#7eh lcall Delay mov p2,#44h lcall Delay mov p2,#3dh lcall Delay movp2,#6dh lcall Delay mov p2,#47h lcall Delay mov p2,#6bh lcall Delay movp2,#7bh lcall Delay mov p2,#4ch lcall Delay mov p2,#7fh lcall Delay movp2,#6fh lcall Delay ajmp main</p><p>Delay: mov r5,#0ah delay_3:mov r7,#0ffh delay_1:mov r6,#0ffhdelay_2:djnz r6,delay_2 djnz r7,delay_1 djnz r5,delay_3 ret</p><p>后来利用在片内程序区查表的方法。实现了相同的功能。</p><p>org 000h Ljmp main org 0030h main: mov dptr,#table</p><p>mov r1,#00h loop: mov a,r1 movc a,<span class="citation"data-cites="a+dptr">@a+dptr</span> mov p2,a lcall Delay_650ms inc r1cjne r1,#0ah,loop ajmp main</p><p>Delay_650ms: mov r7,#05h delay_1: mov r6,#0ffh delay_2: mov r5,#0ffhdelay_3: djnz r5,delay_3 djnz r6,delay_2 djnz r7,delay_1 ret</p><p>table: db 7eh,44h,3dh,6dh,47h ;0 - 4 db 6bh,7bh,4ch,7fh,6fh ;5 -8</p><p>因为在片内程序存储区，用寄存器间接寻址的方法寻址时只能用dptr或pc配合使用，且movc的操作数结果送到a里面去。</p><p>所以出现了，上面的一堆废话。并且用寄存器 r1作为中间的变量进行暂存数据取到哪个位置了。</p><p>mov r1,#00h loop: mov a,r1 movc a,<span class="citation"data-cites="a+dptr">@a+dptr</span> mov p2,a lcall Delay_650ms inc r1cjne r1,#0ah,loop</p><p>收获：</p><pre><code class="hljs">    因为单片机为哈佛存储器结构，从用户角度来看单片机有程序存储空间，片内数据存储区，片外存储区。从程序区、还是从片内数据存储区、还是从片外数据存储区要用不同的指令，为：movc mov movx，三条不同的指令来实现。先前因为没有把这一点搞明白，在这里调试了几个小时：</code></pre><p>原先写的错误的代码：</p><p>;数码管循环显示从0到9 org 0000h ajmp main org 0030h main: movr1,#table loop: mov a,<span class="citation" data-cites="r1">@r1</span>mov p2,a lcall Delay_650ms inc r1 cjne r1,#0ah,loop ajmp main</p><p>;延时 Delay_650ms: mov r7,#05h delay_1: mov r6,#0ffh delay_2: movr5,#0ffh delay_3: djnz r5,delay_3 djnz r6,delay_2 djnz r7,delay_1 ret;表格</p><p>主要的差别在：</p><p>mov a,<span class="citation" data-cites="r1">@r1</span> mov p2,a</p><p>两句话上。直接把片内数据区的数值赋给了a。导致在a里面的结果一直是00h。唉。。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
      <tag>微机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单片机：数码管显示0到9实验</title>
    <link href="/2013/03/14/danpianji-shixian-1.html"/>
    <url>/2013/03/14/danpianji-shixian-1.html</url>
    
    <content type="html"><![CDATA[<p>收获：</p><p>寻址方式.</p><p>存储器结构.</p><p>用到的指令：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mov</span> movc <span class="hljs-keyword">movx</span> <br><br><span class="hljs-symbol">dptr</span>  cjne   djnz  <br><br><span class="hljs-symbol">lcall</span>   org   ajmp<br><br><span class="hljs-symbol">ret</span><br></code></pre></td></tr></table></figure><p>思路就是每个一会换成另外一个数。先前写的：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-comment">;显示电子钟的秒数的变化</span><br>org <span class="hljs-number">0000</span>h<br>ajmp main<br>org <span class="hljs-number">0030</span>h<br><span class="hljs-symbol">main:</span><br>         <span class="hljs-keyword">mov</span> p2,<span class="hljs-meta">#7eh</span><br>         lcall Delay<br>         <span class="hljs-keyword">mov</span> p2,<span class="hljs-meta">#44h</span><br>         lcall Delay<br>         <span class="hljs-keyword">mov</span> p2,<span class="hljs-meta">#3dh</span><br>         lcall Delay<br>         <span class="hljs-keyword">mov</span> p2,<span class="hljs-meta">#6dh</span><br>         lcall Delay<br>         <span class="hljs-keyword">mov</span> p2,<span class="hljs-meta">#47h</span><br>         lcall Delay<br>         <span class="hljs-keyword">mov</span> p2,<span class="hljs-meta">#6bh</span><br>         lcall Delay<br>         <span class="hljs-keyword">mov</span> p2,<span class="hljs-meta">#7bh</span><br>         lcall Delay<br>         <span class="hljs-keyword">mov</span> p2,<span class="hljs-meta">#4ch</span><br>         lcall Delay<br>         <span class="hljs-keyword">mov</span> p2,<span class="hljs-meta">#7fh</span><br>         lcall Delay<br>         <span class="hljs-keyword">mov</span> p2,<span class="hljs-meta">#6fh</span><br>         lcall Delay<br>ajmp main<br>                 <br><span class="hljs-symbol">Delay:</span><br>      <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r5</span>,<span class="hljs-meta">#0ah</span><br>      delay_3:<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r7</span>,<span class="hljs-meta">#0ffh</span><br>      delay_1:<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r6</span>,<span class="hljs-meta">#0ffh</span><br>             delay_2:djnz <span class="hljs-built_in">r6</span>,delay_2<br>             djnz <span class="hljs-built_in">r7</span>,delay_1<br>       djnz <span class="hljs-built_in">r5</span>,delay_3<br><span class="hljs-keyword">ret</span><br></code></pre></td></tr></table></figure><p>后来利用在片内程序区查表的方法。实现了相同的功能。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">org <span class="hljs-number">000h</span><br>Ljmp main<br>org <span class="hljs-number">0030h</span><br><span class="hljs-symbol">main:</span><br><span class="hljs-keyword">mov</span> dptr,#table<br>             <br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>,#<span class="hljs-number">00h</span><br><span class="hljs-symbol">    loop:</span><br>     <span class="hljs-keyword">mov</span> a,<span class="hljs-built_in">r1</span><br>     movc a,@a+dptr<br>     <span class="hljs-keyword">mov</span> p2,a<br>     lcall Delay_650ms<br>     <span class="hljs-keyword">inc</span> <span class="hljs-built_in">r1</span><br>     cjne <span class="hljs-built_in">r1</span>,#<span class="hljs-number">0ah</span>,<span class="hljs-keyword">loop</span><br>ajmp main<br><span class="hljs-symbol">             </span><br><span class="hljs-symbol">Delay_650ms:</span><br>            <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r7</span>,#<span class="hljs-number">05h</span><br><span class="hljs-symbol">            delay_1:</span> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r6</span>,#<span class="hljs-number">0ffh</span><br><span class="hljs-symbol">            delay_2:</span> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r5</span>,#<span class="hljs-number">0ffh</span><br><span class="hljs-symbol">            delay_3:</span> djnz <span class="hljs-built_in">r5</span>,delay_3<br>            djnz <span class="hljs-built_in">r6</span>,delay_2<br>            djnz <span class="hljs-built_in">r7</span>,delay_1<br><span class="hljs-keyword">ret</span><br><span class="hljs-symbol">             </span><br><span class="hljs-symbol">table:</span><br>      <span class="hljs-built_in">db</span> <span class="hljs-number">7eh</span>,<span class="hljs-number">44h</span>,<span class="hljs-number">3dh</span>,<span class="hljs-number">6dh</span>,<span class="hljs-number">47h</span> <span class="hljs-comment">;0 - 4</span><br>      <span class="hljs-built_in">db</span> <span class="hljs-number">6bh</span>,<span class="hljs-number">7bh</span>,<span class="hljs-number">4ch</span>,<span class="hljs-number">7fh</span>,<span class="hljs-number">6fh</span> <span class="hljs-comment">;5 - 8</span><br></code></pre></td></tr></table></figure><p>因为在片内程序存储区，用寄存器间接寻址的方法寻址时只能用dptr或pc配合使用，且movc的操作数结果送到a里面去。</p><p>所以出现了，上面的一堆废话。并且用寄存器 r1作为中间的变量进行暂存数据取到哪个位置了。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>,<span class="hljs-meta">#00h</span><br><span class="hljs-symbol">loop:</span><br>     <span class="hljs-keyword">mov</span> a,<span class="hljs-built_in">r1</span><br>     movc a,@a+dptr<br>     <span class="hljs-keyword">mov</span> p2,a<br>     lcall Delay_650ms<br>     <span class="hljs-keyword">inc</span> <span class="hljs-built_in">r1</span><br>cjne <span class="hljs-built_in">r1</span>,<span class="hljs-meta">#0ah,loop</span><br></code></pre></td></tr></table></figure><p>收获：</p><pre><code class="hljs">    因为单片机为哈佛存储器结构，从用户角度来看单片机有程序存储空间，片内数据存储区，片外存储区。从程序区、还是从片内数据存储区、还是从片外数据存储区要用不同的指令，为：movc mov movx，三条不同的指令来实现。先前因为没有把这一点搞明白，在这里调试了几个小时：</code></pre><p>原先写的错误的代码：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-comment">;数码管循环显示从0到9</span><br>org <span class="hljs-number">0000</span>h<br>ajmp main<br>org <span class="hljs-number">0030</span>h<br><span class="hljs-symbol">main:</span><br>     <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>,<span class="hljs-meta">#table</span><br>     loop:<br>           <span class="hljs-keyword">mov</span> a,@<span class="hljs-built_in">r1</span><br>           <span class="hljs-keyword">mov</span> p2,a<br>           lcall Delay_650ms<br>           <span class="hljs-keyword">inc</span> <span class="hljs-built_in">r1</span><br>           cjne <span class="hljs-built_in">r1</span>,<span class="hljs-meta">#0ah,loop</span><br>ajmp main<br>          <br><span class="hljs-comment">;延时</span><br><span class="hljs-symbol">Delay_650ms:</span><br>         <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r7</span>,<span class="hljs-meta">#05h</span><br>         delay_1: <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r6</span>,<span class="hljs-meta">#0ffh</span><br>         delay_2: <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r5</span>,<span class="hljs-meta">#0ffh</span><br>         delay_3: djnz <span class="hljs-built_in">r5</span>,delay_3<br>                  djnz <span class="hljs-built_in">r6</span>,delay_2<br>                  djnz <span class="hljs-built_in">r7</span>,delay_1<br><span class="hljs-keyword">ret</span><br><span class="hljs-comment">;表格</span><br></code></pre></td></tr></table></figure><p>主要的差别在：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mov</span> a,<span class="hljs-comment">@r1</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">p2</span>,a<br></code></pre></td></tr></table></figure><p>两句话上。直接把片内数据区的数值赋给了a。导致在a里面的结果一直是00h。唉。。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
      <tag>微机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单片机指令简单总结</title>
    <link href="/2013/03/12/backup_asm-summary.html"/>
    <url>/2013/03/12/backup_asm-summary.html</url>
    
    <content type="html"><![CDATA[<p>　　</p><p>立即寻址:MOV A,#05H</p><p>直接寻址:MOV A,06H</p><p>寄存器寻址：MOV A,Rn</p><p>寄存器间接寻址：MOV A,<span class="citation"data-cites="R0">@R0</span> / <span class="citation"data-cites="R1">@R1</span></p><p>变址寻址：MOV A,<span class="citation"data-cites="A+DPTR">@A+DPTR</span></p><p>位寻址: SETB 27H.5////3DH</p><p>一：数据传输类：</p><ol type="1"><li>片内数据传输指令：MOV 　　片外数据传输指令：MOVX　　程序存储器访问指令：MOVC，又叫查表指令。PC,DPTR 2.堆栈操作指令：　　PUSH SP 　　POP<br />交换指令： XCH XCHD SWAP 二：算术运算类　　加法指令：ADD,ADDC必须有A,且结果送回到A 　　ADD A ，<br />　　ADDC A ， 　　INC 　　减法指令： 　　SUBB 　　DEC 十进制调整指令：　　DA 三：逻辑运算类指令 　　与：ANL 　　或：ORL 　　异或：XRL　　对累加器A的指令：取反：CPL A，清零：CLR A 　　循环移位指令：　　左移：RL 　　右移：RR 　　循环左移：RLC 　　循环右移：RRC</li></ol><p>　　控制转移类： 　　无条件转移指令：LJMP，AJMP，LJMP　　条件转移指令： JZ, JNZ, CJNE, DJNZ JMP 　　子程序条用及返回指令：　　LCALL, ACALL RET RETI 　　空操作指令： 　　NOP 四：布尔运算指令：　　位数据传送指令(针对CY)：MOV C,BIT 　　位修改指令：CLR CPL SETB　　位逻辑运算：ORL,ANL 　　位转移指令(bit cy)：JC JNC JB JNB JBC</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
      <tag>微机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>流水灯，利用循环左移指令</title>
    <link href="/2013/03/12/backup_asm-liushuideng.html"/>
    <url>/2013/03/12/backup_asm-liushuideng.html</url>
    
    <content type="html"><![CDATA[<p>用到的指令：rl，其只能以a为操作数</p><p>立即数#0feh,与0feh是有区别的。</p><p>;流水灯,每隔640ms org 000h ajmp main org 030h main: mov a,#0feh ;rlr0 只能以a为操作数</p><pre><code class="hljs">  L:mov P0,a  rl a  lcall delay_1s</code></pre><p>ajmp L</p><p>;延时时间大概时间为640ms Delay_1s: mov r7,#05h delay_1: mov r6,#0ffhdelay_2: mov r5,#0ffh delay_3: djnz r5,delay_3 djnz r6,delay_2 djnzr7,delay_1</p><p>ret</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
      <tag>微机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数L,在二进制下末尾0的个数k,与fft过程中的码位倒序</title>
    <link href="/2013/03/10/fft-lowit-l.html"/>
    <url>/2013/03/10/fft-lowit-l.html</url>
    
    <content type="html"><![CDATA[<p>今天看树状数组，突然发现了这个东西，想了一想，然后用文字简要的证明了一下：</p><p><code>2^k = L and (L xor (L　－　１) )</code></p><pre><code class="hljs">设i在二进制下从末尾数的第 k 位第一次不为0.先用 c = i^(i-1)则将第 k 位以左的数变为0，从k位往右都为1再用 i &amp; c 因为c的末尾 k位为1,k位以左为0，i的末尾 k-1位为0,第k位为1，k位以左不知道。按位与后则剩余的数即为 2^(k - 1)</code></pre><p>下面是程序： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NUM 16</span><br>                        <br><span class="hljs-comment">//lowbit:计算当 i 在二进制下整数 末尾0的个数为k时求2^k 即 2^k = lowBit(i)</span><br>                        <br><span class="hljs-comment">//设i在二进制下从末尾数的第 k 位第一次不为0.</span><br><span class="hljs-comment">//先用 c = i^(i-1)则将第 k 位以左的数变为0，从k位往右都为1</span><br><span class="hljs-comment">//再用 i &amp; c 因为c的末尾 k位为1,k位以左为0，i的末尾 k-1位为0,第k位为1，k位以左不知道。</span><br><span class="hljs-comment">//按位与后则剩余的数即为 2^(k - 1),</span><br>                        <br><span class="hljs-comment">//从而能计算出当 i 在二进制下整数 末尾0的个数为k时求2^k 即 2^k = lowBit(i)</span><br><span class="hljs-comment">//要算k为多少只需再以2为底进行取余即可。 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">lowBit</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">return</span> i&amp;(i^(i<span class="hljs-number">-1</span>));<br>&#125;<br>                        <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>                            <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt; NUM + <span class="hljs-number">1</span>;++i)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d:\t%d\n&quot;</span>,i,(<span class="hljs-type">int</span>)log2(lowBit(i)));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>在解决完这个问题后，我突然想到了，一个问题，按照这个方法，改改程序，我就可以求出ｆｆｔ里面的那个码位倒序这个过程了。</p><p>代码如下：ｆｆｔ中的码位倒序代码,当然也可以一位一位的去求但是当i为2的k次幂时就会比较费时，至少能起到一个常数系数的优化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NUM 16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NUM_WEI 4</span><br>           <br><span class="hljs-type">int</span> <span class="hljs-title function_">lowBit</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">return</span> i&amp;(i^(i<span class="hljs-number">-1</span>));<br>&#125;<br>          <br><span class="hljs-type">int</span> <span class="hljs-title function_">ma_wei_dao_xu</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span>&#123;<br>    <span class="hljs-type">int</span> l;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(k)&#123;<br>                  <br>        l = lowBit(k);<br>                  <br>        sum += (<span class="hljs-type">int</span>)<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,NUM_WEI - log2(l) - <span class="hljs-number">1</span>);<br>                  <br>        k &amp;= (NUM  - l * <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125; <br>          <br>          <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>              <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; NUM;++i)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d:\t%d\n&quot;</span>,i,ma_wei_dao_xu(i));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>后续：</p><p>刚才吃饭的时候想了一下以4位数来说节省的时间为C(1,4) + 2<em>C(2,4)+3</em> C(3,4) + 4*C(4,4);</p><p>对于为N位的二进制数来说总的时间为： C(1,N) + 2<em>C(2,N) +.....+(N-1)</em>C(N-1,N) + N*C(N,N);</p><p>因为节剩的总 时间就为0的总个数。C(m，N)其实就暗含了，N位二进制中包含m个零的数的个数，包含的零的个数为：m*C(m,N);</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACM 训练</tag>
      
      <tag>数字信号处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>弃九法，数论同余学习笔记</title>
    <link href="/2013/02/28/num-theory-1.html"/>
    <url>/2013/02/28/num-theory-1.html</url>
    
    <content type="html"><![CDATA[<p>在数论里面有这么一个方法能简单的判断一下两个数相乘以后得到的结果是否是正确的，而这个方法就是弃九法。弃九法归根结底还用了同余的一些基本性质。</p><pre><code class="hljs">   那什么是弃九法呢？先从两个数相乘说起吧。比如说 28997*29459 = 11441912613这个结果对吗？由于弃九法用到了很多</code></pre><p>的同余方面的只是。那么先就说一下有关同余的概念。</p><p>什么是同余呢？</p><p>同余的概念是这样说的，如果a，b都为整数，m是一个固定的正整数。则当m|(a-b)，即当m能把（a - b）整除的时候，我们说a，b，对m同余记作a ≡ b(modm)，其实也可以简单的理解就是a mod m = b modm,mod表示取余。很快的我们得出b ≡ a(mod m).且还有 ak ≡ bk(mod m).</p><p>我们还可以很快的推出</p><p>a ≡ b(mod m), b ≡ c(mod m)则就有a ≡ c(modm)即同余性质具有传递性。</p><p>下面只简单的证明一下传递性质。</p><p>证明如下： 因为a ≡ b(mod m)，根据定义有 a - b = mt (1),t为一个整数。因为b ≡ c(mod m)， 根据定义有b - c = ms (2),s为一个整数。 由（1） +（2）得到：a - c = m(s+t) = mk,k为一个整数。 所以：a ≡ c(modm)。得证。</p><p>下面说一下下面的几条重要的性质。</p><p>如果a ≡ b (mod m), c≡ d(mod m),则有a+c = b+d(mod m)、a - c ≡ b -d(mod m)和ac ≡ bd(mod m)。</p><p>a+c = b+d(mod m)、a - c ≡ b - d(mod m)证明方法类似上面。ac ≡ bd(modm)证明方法如下。</p><pre><code class="hljs">因为a≡b(mod m),则ac≡ bc(mod m)。因为c≡d(mod m),则bc ≡ bd(mod m)。所有 ac - bc = mt,bc - bd = mk,t、k为整数。两式相加得到ac - bd = m(t + k) = ml,l为整数。所以ac ≡ bd(mod m).得证。</code></pre><p>所以由a ≡ b(mod m),和ac ≡ bd(mod m)知道，当a = c，b= d的时候，有a^2=b^2(mod m),用数学归纳法可以很轻松的证明有：</p><p>a^n ≡ b^n(mod m),n为一个非负整数。</p><pre><code class="hljs">   另当n = 0时,1 ≡ 1(mod m)很显然成立。因为 10 ≡ 1(mod 9),可以知道10 ^ n ≡1( mod 9),n为一个非负整数，这也就说明10^n - 1能整除9直接能用数学语言证明出来了。而不用很麻烦的叙述了。</code></pre><p>现在说一下正题弃九法。</p><p>因为任意的n和k位的十进制整数a,b都可以表示成权与对应基的幂次方的乘积的形式。</p><p>即a = ∑ai10^i，i = 0,1,2,3,4,5...n b = ∑bi10^i ， i =0,1,2,3,4,5....k 设c = ab = ∑ci10^i,i = 0,1,2,3,...q.</p><p>有上面的性质得：</p><p>因为10 ^ n ≡1( mod 9) { = 10 ^ n( mod 9)},</p><p>所以有ai10^i(mod 9) = ai(mod 9) * 1(mod 9) = ai(mod 9)故：</p><p>a≡(an+ an-1+.....a1+a0)(mod 9)。同理b、c都可以写成这种形式。</p><p>因为c = ab，所以有：</p><p>c=ab ≡ (an+ an-1+.....a1+a0)*(bn+bn-1+.....b1+b0) (mod 9)</p><p>≡(cn+cn-1+.....c1+c0)(mod 9)</p><p>所以 (cn+ cn-1+.....c1+c0)≡(an+ an-1+.....a1+a0)*(bn+bn-1+.....b1+b0) (mod 9)。</p><p>呵呵： 这样28997*29459 =11441912613这个结果就可以用上面的法子检查一下了。</p><p>因为2+8 + 9+ 9+ 7 = 35，2 + 9 + 4+ 5 + 9 = 29，1+1+4+4+1+9+1+2+6+1+3= 33</p><p>这时只要判断35 * 29 ≡ 33 (mod9)正确与否可以快速的检查一下是否结果正确。</p><p>根据第二种形式只要判断35 * 29 mod 9 = 33 mod 9即可了。</p><p>因为35 * 29 mod 9 = (35 mod 9)* (29 mod 9)mod 9 = 8 * 2 mod 9 = 7≠33mod 9 = 6。所以结果是算错了。</p><p>但是上面 的判断方法只是结果算对的一个必要非充分条件。</p><p>例如上面的结果算的实际应为28997<em>29459 =11441912623，如果算成：28997</em>29459 =11441912533就可以判断出上面的方法不灵了。检查不出结果是错的。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
      <tag>ACM 训练</tag>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OJ常见的Judge Status</title>
    <link href="/2013/02/27/oj-judge-status.html"/>
    <url>/2013/02/27/oj-judge-status.html</url>
    
    <content type="html"><![CDATA[<p>Queuing :提交太多了，OJ无法在第一时间给所有提交以评判结果，后面提交的程序将暂时处于排队状态等待OJ的评判。不过这个过程一般不会很长。</p><p>Compiling : 您提交的代码正在被编译。</p><p>Running : 您的程序正在OJ上运行。</p><p>Judging : OJ正在检查您程序的输出是否正确。</p><p>Accepted (AC) : 您的程序是正确的，恭喜！</p><p>Presentation Error (PE) :虽然您的程序貌似输出了正确的结果，但是这个结果的格式有点问题。请检查程序的输出是否多了或者少了空格（''）、制表符（'）或者换行符（''）。</p><p>Wrong Answer (WA) : 输出结果错，这个一般认为是算法有问题。</p><p>Runtime Error (RE) :运行时错误，这个一般是程序在运行期间执行了非法的操作造成的。以下列出常见的错误类型：</p><p>ACCESS_VIOLATION您的程序想从一些非法的地址空间读取或向其中写入内容。一般例如指针、数组下标越界都会造成这个错误的。ARRAY_BOUNDS_EXCEEDED 您的程序试图访问一个超出硬件支持范围的数组单元。FLOAT_DENORMAL_OPERAND进行了一个非正常的浮点操作。一般是由于一个非正常的浮点数参与了浮点操作所引起的，比如这个数的浮点格式不正确。FLOAT_DIVIDE_BY_ZERO 浮点数除法出现除数为零的异常。 FLOAT_OVERFLOW浮点溢出。要表示的数太大，超出了浮点数的表示范围。 FLOAT_UNDERFLOW浮点下溢。要表示的数太小，超出了浮点数的表示范围。INTEGER_DIVIDE_BY_ZERO 在进行整数除法的时候出现了除数为零的异常。INTEGER_OVERFLOW 整数溢出。要表示的数值太大，超出了整数变量的范围。STACK_OVERFLOW栈溢出。一般是由于无限递归或者在函数里使用了太大的数组变量的原因。...... 其他错误，包括C++标准库/STL运行时库错误等，这里不再举例。</p><p>Time Limit Exceeded (TLE) :您的程序运行的时间已经超出了这个题目的时间限制。</p><p>Memory Limit Exceeded (MLE) :您的程序运行的内存已经超出了这个题目的内存限制。</p><p>Output Limit Exceeded (OLE) :您的程序输出内容太多，超过了这个题目的输出限制。</p><p>Compilation Error (CE) :您的程序语法有问题，编译器无法编译。具体的出错信息可以点击链接察看。</p><p>System Error (SE) :OJ内部出现错误。由于我们的OJ可能存在一些小问题，所以出现这个信息请原谅，同时请及时与管理员联系。</p><p>Out Of Contest Time :超出比赛时间，这个信息只有在比赛的时候才会出现。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
      <tag>ACM 训练</tag>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>寒假集训总结</title>
    <link href="/2013/02/23/misc-1.html"/>
    <url>/2013/02/23/misc-1.html</url>
    
    <content type="html"><![CDATA[<p>寒假集训马上就要结束了，今明两天最后的两轮总决赛。对我来说，题目太难了，基本无望能解决了，放弃不做了~</p><p>这次集训初六晚上报道，初七正式开始，明天正月十五上午结束。每天早上八点左右起晚上一点左右才能睡，白天也休息不好。前几天状态还好，从昨天开始身体就有点吃不消了，俩眼困的跟个熊猫似的，睁不开、很疲倦。今天更没精神，基本上也没做什么题。</p><p>回校的时候，家里人还抱怨“大过年的怎么那么早就回学校了”。主要还是太焦虑了，总觉的百无一用，每天都在浪费生命，一直找不到什么让自己感觉意义的事情，一直在横冲直撞。</p><p>我也不是软院的学生，这个培训机会也是靠混社团混来的。6月份的时候，被Andy 招新收进了计算机软件博弈组。暑假集训时， Andy发现我码力太弱，让我从最基本的 IO开始练习。整个暑假，我都在补《数据结构》《离散数学》基础课程，博弈正事也没弄多少。比赛结束后，Andy最后还挺不好意思的给我说，“也没能给你搞个什么奖”。我发现我对算法与数据结构更感兴趣，与Andy 沟通后，就跑路到 ACM这边了。这边都是低一级的学弟，我有时都觉得挺羞愧的，跟着这些学弟们混，比他们还水，唉，没辙~</p><p>我们专业也有同学看我这么折腾，很好奇的问我“学这有用吗？”。其实我也不知以后会有什么用，但是我觉的很有意思，也相信学了总有一天会有用的。也可能已经有用了，我只是无法表达出来，只能很无奈的说，"嗯，我也不知道有啥用，哈哈~"</p><p>跨专业学习的难度真不是一个小事情，很痛苦，每次迷茫想后退的时候，都先缓缓，然后自己鼓鼓气，最后也算咬咬牙坚持下来了。</p><p>在这九天里，学了很多的东西，虽然先前也看了一些算法、离散相关的书籍。这几天学的动西我感觉学的很杂很多，搞的思维很乱</p><ul><li>最小生成树</li><li>最短路径</li><li>高精度</li><li>bfs</li><li>队列</li><li>数论</li><li>动规</li><li>背包</li><li>计算几何</li><li>哈夫曼树</li><li>素数表</li><li>欧拉函数的线性筛法</li></ul><p>都学了一点，但都不够深入。做了一堆的水题，虽然也很辛苦，但很有充实感觉、成就感。基础太弱，做很多题的时候需要先看一下解题报告。</p><p>我的青春不是梦，相信要想有回报总需要先付出~</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACM 训练</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数论学习笔记</title>
    <link href="/2013/02/22/num-theory-2.html"/>
    <url>/2013/02/22/num-theory-2.html</url>
    
    <content type="html"><![CDATA[<p>这两天一直再看数论方面的东西，心里也想了很多的东西，凑着现在有时间，写写也整理一下思路。</p><p>这几天学习数论的感觉就是内容多、乱杂，性质、定理、公式也太别多。但是思路理清楚，就好了。</p><p>在这里推荐和我一样数论刚入门的人，看陈景润写的《初等数论》一书，写的真不错，看完后，让思路清晰不少。书中内容也特别多，我是在汉王电纸书上花了几天才读完的，很多东西非常有意思。第一章一次就给讲了几十条的性质、引理、定理，要都记住真的很难，但是有几个非常有意思。Matrix67大神写的一篇 blog 也非常的有趣，浅显易懂，在程序员杂志上也发表了， <ahref="https://matrix67.com/blog/archives/5100">《跨越千年的RSA算法》</a>。</p><p>研究数，首先要从素数研究。为什么说素数是研究数的一个绝佳的突破口呢？根据算术基本定理，任何数都可以分解成若干个质因数的乘积的形式，而且形式是唯一的。</p><h3id="素数第一个问题就是素数个数的问题素数究竟是有穷多个还是无穷多个呢">素数第一个问题就是素数个数的问题，素数究竟是有穷多个还是无穷多个呢？</h3><p>欧几里德 用反证法 非常漂亮的进行了证明 &gt;假设素数有限个，设最大的素数为，P，所以素数为：2、3 、5、 7 ... P &gt;现在有这样一个数 S = 2<em>3</em>5<em>7</em>...*P + 1 &gt;既然有了算数基本定理，那么这个问题就可以简化了，只需要找在所有的质数里面，有没有一个数是S的约数 &gt;从S的式子，可以看出S不管除以任何素数 K 都会余1，说明S没有因数，除了它本身S和1之外，说明S为素数，且S &gt; P &gt;但是刚才我们已经假设P为最大的素数，与假设矛盾，故素数为无限个。</p><p>说完素数，还有一个听上去相近的概念，就是互素，互素的两个数不一定都是素数，两个合数也可能互素比如9 和16，质数肯定是互素的。</p><ul><li>那素数的个数是怎么分布的呢？</li><li>还有一个问题在1到n-1，这n-1个数里面有多的数是与n互素的？？</li></ul><p>其实第二个问题就是欧拉函数phi（n）。</p><p>第一个问题其实素数定理已经解决了： Pi(N)/N *LgN = 1当N为无穷大的时候，pi（n）为&lt; N的素数的个数。</p><p>第二个问题其，人已经给出来了，怎么求？</p><pre><code class="hljs">首先设 n = P1^Q1*P2*Q2**。。。。*Pk^Qk.那么phi（n） = n(1-1/P1)(1-1/P2)******(1-1/Pk),，然后把每一项的1 移到分子上去  然后把n乘进去就得到了。 phi(n) = (P1^n-P1^(n-1))*(P^2^n-P2^(n-1))*。。。。。(Pk^n-Pk^(n-1)) = P1^（n-1）(P1-1)*P2^（n-1）(P2-1)*.......*Pk^（n-1）(Pk-1)。</code></pre><p>然后计算机j就能很快的算出来phi（n）了。算phi(n)的时间复杂度大概为Ln(n)级别的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>  <span class="hljs-title function_">Eu</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123; <span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>; <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i * i &lt;= n;++i)&#123;  <br>        <span class="hljs-keyword">if</span>(!(n%i))&#123;  <br>            ans *= i - <span class="hljs-number">1</span>;  <br>            n /= i;  <br>            <span class="hljs-keyword">while</span>(!(n%i))&#123;  <br>                ans *= i;n/=i;   <br>            &#125;   <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">if</span>(n &gt; <span class="hljs-number">1</span>)&#123;  <br>        ans *= n <span class="hljs-number">-1</span>;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> ans;  <br>&#125;  <br></code></pre></td></tr></table></figure><p>但是当算 从 1到N之间所有数的欧拉函数的时候这个时候就可能会出现TLE了，但是有改进的办法，就是用线性筛选素数的方法，在里面家几句话，就可以成为线性筛选欧拉函数了。呵呵。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> phi[<span class="hljs-number">3000010</span>];  <br><span class="hljs-type">int</span> prime[<span class="hljs-number">3000010</span>],prime_top = <span class="hljs-number">0</span>;  <br><span class="hljs-type">int</span> not_prime[<span class="hljs-number">3000010</span>];   <br><span class="hljs-comment">//算 2 到3000000的所有数的欧拉函数。   </span><br><span class="hljs-type">void</span> <span class="hljs-title function_">build_phi</span><span class="hljs-params">()</span>&#123;  <br>    <span class="hljs-built_in">memset</span>(not_prime,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(not_prime));  <br>      <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i &lt; <span class="hljs-number">3000010</span>;++i)&#123;  <br>        <span class="hljs-keyword">if</span>(!not_prime[i])&#123;  <br>            prime[prime_top++] = i;  <br>            phi[i] = i - <span class="hljs-number">1</span>;  <br>        &#125;  <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j&lt;prime_top&amp;&amp;i*prime[j]&lt;<span class="hljs-number">3000010</span>;++j)&#123;  <br>            not_prime[i*prime[j]] = <span class="hljs-number">1</span>;  <br>            <span class="hljs-comment">//找到第一个能被 i整除的此次筛选结束进行下一次。   </span><br>            <span class="hljs-keyword">if</span>(i%prime[j] == <span class="hljs-number">0</span>)&#123;  <br>                phi[i*prime[j]] = prime[j] * phi[i];  <br>                <span class="hljs-keyword">break</span>;  <br>            &#125;<span class="hljs-keyword">else</span>&#123;  <br>                phi[i*prime[j]] = phi[i] *(prime[j] - <span class="hljs-number">1</span>);  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>&#125;  <br></code></pre></td></tr></table></figure><pre><code class="hljs"> 2、由欧几里德算法，衍生出来一个重要的贝祖等式：两数的最大公约数可以用两数的整数倍相加来表示</code></pre>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
      <tag>ACM 训练</tag>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hdu 1286 找新朋友</title>
    <link href="/2013/02/21/oj-hdu-1286.html"/>
    <url>/2013/02/21/oj-hdu-1286.html</url>
    
    <content type="html"><![CDATA[<p>此题是赤裸裸的求欧拉函数，但是傻冒的用辗转想除法去求的，结果悲剧了，tle了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">Ecluid</span><span class="hljs-params">(<span class="hljs-type">int</span> N,<span class="hljs-type">int</span> a)</span>&#123;<br><span class="hljs-comment">//求 N 和a的最大公约数</span><br><span class="hljs-keyword">if</span>(N % a == <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> a;<br><span class="hljs-keyword">else</span>&#123;<br>N%=a;<br>Ecluid(a,N);<br>&#125;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> test_case,N,friend_num;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;test_case);<br><span class="hljs-keyword">while</span>(test_case --)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;N);<br>friend_num = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i&lt;N;++i)&#123;<br>   <span class="hljs-keyword">if</span>(Ecluid(N,i)!=<span class="hljs-number">1</span>)&#123;<br>++friend_num;<br>   &#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,N - friend_num - <span class="hljs-number">1</span>);<br>&#125;<br> <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着打了一张素数表的方法，然后一个一个的判断其公约数，结果还是大哭tle了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-type">int</span> prime[<span class="hljs-number">2000</span>],prime_top = <span class="hljs-number">0</span>;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">build_prime</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> not_prime[<span class="hljs-number">20000</span>];<br><span class="hljs-built_in">memset</span>(not_prime,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(not_prime));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">17000</span>;++i)&#123;<br><span class="hljs-keyword">if</span>(!not_prime[i])&#123;<br>prime[prime_top++] = i;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;i*prime[j]&lt;=<span class="hljs-number">17000</span> &amp;&amp; j&lt;prime_top;++j)&#123;<br>not_prime[i*prime[j]] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(i%prime[j] == <span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">break</span>;&#125;<br>&#125;<br>&#125;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><br><span class="hljs-type">int</span> test_case,N,not_new_friend_num;<br>build_prime();<br><span class="hljs-comment">//printf(&quot;%d %d\n&quot;,prime[prime_top - 1],prime_top);</span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;test_case);<br><span class="hljs-keyword">while</span>(test_case --)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;N);<br>not_new_friend_num = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i &lt; N;++i)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; prime_top;++j)&#123;<br><span class="hljs-keyword">if</span>(N%prime[j] == <span class="hljs-number">0</span> &amp;&amp; i % prime[j] ==<span class="hljs-number">0</span>)&#123;<br>   ++not_new_friend_num;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,N - not_new_friend_num - <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后实在不行百度一下，看到有人说用欧拉函数，我就居然想到了，phi(mn) =phi(m)*phi(n)的方法，却没想到是赤裸裸的欧拉函数，结果，还是tle了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <br>  <br><span class="hljs-type">int</span> <span class="hljs-title function_">Eu</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i * i &lt;= n;++i)&#123;  <br>        <span class="hljs-keyword">if</span>(!(n%i))&#123;  <br>            ans *= i - <span class="hljs-number">1</span>;  <br>            n /= i;  <br>            <span class="hljs-keyword">while</span>(!(n%i))&#123;  <br>                ans *= i;n/=i;   <br>            &#125;   <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">if</span>(n &gt; <span class="hljs-number">1</span>)&#123;  <br>        ans *= n <span class="hljs-number">-1</span>;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> ans;  <br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><br><span class="hljs-type">int</span> test_case,N,friend_num;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;test_case);<br><span class="hljs-keyword">while</span>(test_case --)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;N);<br>friend_num = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i&lt;N;++i)&#123;<br>   <span class="hljs-keyword">if</span>(Eu(i)*Eu(N)==Eu(N*i))&#123;<br><span class="hljs-comment">//printf(&quot;%d\n&quot;,i);</span><br>++friend_num;<br>   &#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,friend_num+<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>最后痛定思痛，发现居然是赤裸裸的欧拉函数就可以解决，，尴尬，哎，只是把bit1049 Relatives这道题的代码拿过来改了一下，瞬间AC！那个高兴哇大笑。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> ans;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Eu</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i * i &lt;= n;++i)&#123;<br><span class="hljs-keyword">if</span>(!(n%i))&#123;<br>ans *= i - <span class="hljs-number">1</span>;<br>n /= i;<br><span class="hljs-keyword">while</span>(!(n%i))&#123;<br>ans *= i;n/=i; <br>&#125; <br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(n &gt; <span class="hljs-number">1</span>)&#123;<br>ans *= n <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> n,test_case;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;test_case);<br><span class="hljs-keyword">while</span>(test_case--)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>ans = <span class="hljs-number">1</span>;<br>Eu(n);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
      <tag>ACM 训练</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构、算法学习学习一点总结</title>
    <link href="/2013/02/20/misc-2.html"/>
    <url>/2013/02/20/misc-2.html</url>
    
    <content type="html"><![CDATA[<h2 id="破除畏难心">破除畏”难“心</h2><p><code>图论</code>一直一个令我头疼的问题，不敢去做不敢去想，甚至有点畏惧。最早，一直有一个问题萦绕在心头</p><div class="note note-warning">            <p>图在计算机程序中如何表示、存储？</p>          </div><p>对书上的给的<code>邻接表</code>、<code>邻接矩阵</code>两种表示方法，感觉很构造起来麻烦，操作不方便。后来发现其实是自己菜，写的不够熟练而已。碰到图相关的问题，都是三十六计走为上策。</p><p>在 OJ练习了一些<code>最小生成树</code>、<code>并查集</code>相关问题的后，发现困难也并不是想象中的那么大。解题时，并不是呆板的先用<code>邻接矩阵</code>或<code>邻接表</code>先把图构造完，再去跑算法。比如说<code>hdu 1232 畅通工程</code>这个问题，就可以用并查集给搞掉，边读取输入边跑<code>并查集</code>算法。并查集的代码短小精悍，没想到图相关的问题居然可以有如此优美的解法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span>  <span class="hljs-title function_">root</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span><br>&#123;  <br>    <span class="hljs-keyword">if</span>(pararent[n] == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> n;  <br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> pararent[n] = root(pararent[n]);<br>    &#125;  <br>&#125;  <br></code></pre></td></tr></table></figure><p>在中科大朱明的公开课《数据结构及算法应用》最短路一节，有一句话太精辟了</p><div class="note note-warning">            <p>管事的算法都不复杂，复杂的算法管不了大事。</p>          </div><p>畏难心、对陌生事务的恐惧心其实完全没有必要，为之则难者亦易矣<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="[为学一首示子侄](https://so.gushiwen.cn/shiwenv_5bdb0acbf98a.aspx)">[1]</span></a></sup>。</p><h2 id="不停的练习">不停的练习</h2><h3 id="最小生成树">最小生成树</h3><p>在破除了自己的畏难心理之后，就开始一直坐最小生成树的练习题，是越做越有精神，越做越感觉信心越大，接连过了所有的练习最小生成树的练习提。发现kruskal算法其实还挺简单就能实现的，因为我调用了qsort函数，显得代码就简洁了不少：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span>  <span class="hljs-title function_">kruskal</span><span class="hljs-params">(<span class="hljs-type">int</span> N)</span>&#123;  <br>    <span class="hljs-type">int</span> a_root,b_root;  <br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N;++i)&#123;  <br>            a_root = root(input[i].a);  <br>            b_root = root(input[i].b);  <br>            <br>            <span class="hljs-keyword">if</span>( a_root != b_root)&#123;  <br>                <span class="hljs-keyword">if</span> (a_root &lt; b_root)<br>                &#123;<br>                    parent[b_root] = a_root;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    parent[a_root] = b_root<br>                &#125;<br><br>                sum += input[i].cost;  <br>            &#125;  <br>    &#125;   <br>    <span class="hljs-keyword">return</span> sum;  <br>&#125;  <br></code></pre></td></tr></table></figure><p>这是解决<code>hdu 1836</code>的一个代码片段。</p><p>代码写的多了就发现代码其实并不是每一次都要重写一遍，是可以复用的。以前只是听说代码复用，但每到做题的时候自己都是从头开始写代码。直到最近做练习题时，都是把上面的代码稍微改改，就水过了。</p><p>心旷神怡，哈哈～</p><h3 id="最短路">最短路</h3><p>做完最小生成树，就开始做最短路，虽然说他们挺像的，都用贪心算法来解的，理解的思路也感觉没什么问题，但是题，就是死活都过不去，都是处理的细节上有错误，有的是用贪心算法实现的过程有问题，代码写的异常庞大。。最先过去hdu2544那道水题的代码是下面的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">int</span> Graph[<span class="hljs-number">110</span>][<span class="hljs-number">110</span>];<br><span class="hljs-type">int</span> parent[<span class="hljs-number">110</span>]; <br><span class="hljs-type">int</span> dist[<span class="hljs-number">110</span>];<br><span class="hljs-type">int</span> visited[<span class="hljs-number">110</span>],visited_top;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">root</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">if</span>(parent[n] == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> n;<br>    <span class="hljs-keyword">else</span> parent[n] = root(parent[n]);<br>&#125;<br> <br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">dijk</span><span class="hljs-params">(<span class="hljs-type">int</span> N)</span>&#123;<br>    <span class="hljs-type">int</span> a_root,b_root;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0x7f7f7f7f</span>;<br>    <span class="hljs-type">int</span> source,next_sourc,next_sourc_root,source_root;<br>    <br>    <br> <br> <br>    <span class="hljs-keyword">while</span>(visited_top != N)&#123;<br>        sum = <span class="hljs-number">0x7f7f7f7f</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; visited_top; ++i)&#123;<br>            source = visited[i];        <br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= N;++j)&#123;<br>                <span class="hljs-keyword">if</span>(Graph[source][j]&amp;&amp; source!= j)&#123;<br>                    a_root = root(source);<br>                    b_root = root(j);<br>                    <span class="hljs-keyword">if</span>(a_root == b_root)&#123;<br>                        Graph[source][j] = <span class="hljs-number">0</span>;<br>                        Graph[j][source] = <span class="hljs-number">0</span>;<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span>(dist[j] &gt; dist[source] + Graph[source][j])&#123;<br>                        dist[j] = dist[source] + Graph[source][j];<br>                    &#125;<br>                    <span class="hljs-keyword">if</span>(sum &gt; dist[source] + Graph[source][j])&#123;<br>                        sum = dist[source] + Graph[source][j];<br>                        next_sourc = j;<br>                        next_sourc_root = b_root;<br>                        source_root = a_root;<br>                    &#125;<br>                &#125;    <br>            &#125;<br>        &#125;<br>        visited[visited_top ++] = next_sourc;<br>        next_sourc_root &gt; source_root?parent[next_sourc_root] = source_root:parent[source_root] = next_sourc_root;    <br>    &#125;<br>    <br>&#125;<br> <br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-comment">//FILE *fp;    </span><br>    <span class="hljs-comment">//fp = freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin);</span><br>    <br>    <span class="hljs-type">int</span> M,N,x,y,weight;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;N,&amp;M),N||M)&#123;<br>        <span class="hljs-built_in">memset</span>(Graph,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(Graph));<br>        <span class="hljs-built_in">memset</span>(parent,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(parent));<br>        <span class="hljs-built_in">memset</span>(visited,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(visited));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; M; ++i)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;weight);<br>            Graph[x][y] = weight;<br>            Graph[y][x] = weight;<br>        &#125;<br>        <br>        visited_top = <span class="hljs-number">1</span>;<br>        visited[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i &lt;= N;++i)&#123;<br>            dist[i] = <span class="hljs-number">0x7f7f7f7f</span>;<br>        &#125;<br>        dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        dijk(N);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,dist[N]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然过了这道水题，但是回头再一看，我自己写的这是什么，我的思路是什么呢？我完全理解不了我在怎么想的，为什么能过？</p><h2 id="弄斧到班门">弄斧到班门</h2><p>后来接着看书，看朱明教授讲的dijkstra，听过去以后就明白了怎么回事。然后就按照其讲的过程实现了，提交上去直接就A掉了<code>hdu 2544</code>，思路还非常的清晰。果然自学和有个高手指点指点或者和别人讨论讨论效果不一样哇。</p><h3 id="学到的其他一些技巧">学到的其他一些技巧</h3><h4 id="scanf-读取输入">scanf 读取输入</h4><p>当年什么读到文件结尾结束；就是愣是看不明白不理解该怎么写程序让其读到文件结尾结束。后来大神指点了一下，用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,N,M))&#123;&#125;<br></code></pre></td></tr></table></figure><p>一下把问题解决了，效率还挺好。处理所有的文件输入问题都基本上能用其解决。比如有一些变种：M,N同时为零结束，就成了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,N,M)，N||M)&#123;&#125;<br></code></pre></td></tr></table></figure><p>还学会了<code>scanf("%d%d%*c"，M,N);</code>这种的读取输入数据，并且忽略一个字符（解决hdu1301 Jungle Roads poj这道题用到的）。</p><h4 id="文件流重定向">文件流重定向</h4><p>有的时候输入数据太累可以用读取文件的方式，在本地先建一个文本文件，输入数据，测试程序，而不用没测试一次程序都要在cmd里面输入：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">FILE *fp;   <br>fp = freopen(<span class="hljs-string">&quot;in1.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,<span class="hljs-built_in">stdin</span>); <br></code></pre></td></tr></table></figure><p>当然不要忘记关闭文件哦：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">fclose(fp);<br></code></pre></td></tr></table></figure><p>我为了省事从没写过这句话，还有一种方式就是用cmd进到当前文件夹下,用管道组装命令</p><blockquote><p>程序名称 <保存数据的文件 >结果输出到的文件名</p></blockquote><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">test.ext &lt;in.txt  &gt;out.txt<br></code></pre></td></tr></table></figure><p>先说这么多吧，过去的一年学到的东西真的很多，很充实满足。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><ahref="https://so.gushiwen.cn/shiwenv_5bdb0acbf98a.aspx">为学一首示子侄</a><a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法与数据结构</tag>
      
      <tag>ACM 训练</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>补码，用一个圆盘理解</title>
    <link href="/2012/12/17/backup_asm_buma.html"/>
    <url>/2012/12/17/backup_asm_buma.html</url>
    
    <content type="html"><![CDATA[<p>计算机内部执行的指令都是以补码的形式进行加减运算。利用补码的运算，用同一个运算结果，解决了有符号数与无符号数的加减法运算。</p><p>如果没有补码，很多运算都是无法同时实现的。</p><p>如-2和（-8）的运算。如果仅用最高位的符号位区分正负来直接表示，而不用补码表示的话，</p><p>即10010（-2） 11000（-8，其中最高位为符号位，当两数相减后：</p><p>10010</p><p>11000</p><p>11010，（-10） 还向高位借了1</p><p>相加相加后：</p><p>10010</p><p>11000</p><p>01010 （10）</p><p>运算结果完全就是不是我们想要的结果，所以说如果在计算机内部直接的进行加减法运算，而不进行补码运算，其结果是错误的。</p><p>但是进行补码运运算的话即为</p><p>相加：</p><p>11110</p><p>11000</p><p>10110（-10的补码）</p><p>相减：</p><p>11110</p><p>11000</p><p>00110（6的补码）</p><p>然后求一次补码后。其运算结果完全正确。但是不得不深思为什么会对呢？为什么补码会有这么大的作用呢？</p><p>我是这样理解的。有这样一个类似钟表的圆盘，将其等间隔的刻256个刻度（以8位二进制数的加减法说明）<img src="/assets/asm-10.jpg" /></p><p>以顺时针为正（1,2,3,4,5,6,7，，，，，，64，，，，128，，，，192，，），逆时针为负（-1,-2。。。。-64。。。。-128。。。），0为起始点开始标注各点的值（图中只标注了几个）。</p><p>现在我们再把每个正数转化成其对应的二进制数即为：</p><p>0000 0000</p><p>0000 0001</p><p>0000 0010</p><p>...</p><p>...</p><p>...</p><p>1111 1100(252)</p><p>1111 1101(253)</p><p>1111 1110(254)</p><p>1111 1111(255)</p><p>就这么多，256呢？</p><p>1 0000 0000(256)</p><p>因为1进位了，只有8位，所以0和256为同一个刻度。</p><p>现在再说一下补码的问题。</p><p>我们发现，按照圆盘逆时针，刻的负数所在位置对应的正数的二进制，即为其对应的补码。</p><p>这时，可以这样理解在补码的世界里正负数是这样标注的，顺时针数一个刻度，为1，两个刻度为2。。。。逆时针为-1，-2，-3。。。</p><p>表示仍用刻在其上的二进制数表示。然后，就得到了计算机中的补码。</p><p>因为，8位二进制数只能表示256独立的数，所以用其表示范围为 -128 到127。</p><p>找到每个数所在的位置后，结合时钟原理，就很容易明白，为什么补码能做加减运算而不出错了。</p><p>例如上面的-2,和-8的问题，</p><p>-2 对应为 1111 1110</p><p>-8 对应为 1111 1000</p><p>用-2 减去-8，就相当于把指向-2的那个时钟指针，沿逆时针方向转动了，11111000（248）个刻度指向了，6这个刻度，正好这个刻度的补码，就为其</p><p>本身。用同样的方法加就是往顺时针转了248个刻度正好是（-10的补码这个刻度）。</p><p>用钟表的方法很容找到一个负的128到0所对应的补码。即：先找到对应的正数，然后这个和这个正数沿竖直轴对称的左半圆盘上的数即是。</p><p>恩，我想了想，写的真是太烂了，不写了！</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
      <tag>微机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微机原理学习-一些问题总结</title>
    <link href="/2012/12/16/backup_asm_some_zongjie.html"/>
    <url>/2012/12/16/backup_asm_some_zongjie.html</url>
    
    <content type="html"><![CDATA[<p>1.cmp al,30</p><p>cmp有很大的应用比如有的时候需要自己判断从字符串中查找一个字符，这时候先把要找的字符放到一个寄存器中，然后cmpreg,内存，配合jz/je指令就可以判断字符是否是要找的了，但是有的是偶是要判断两个数谁打谁小，因为从来没有用过这个命令，就突然晕了。没事，兵来将挡，水来土掩，不明白，用debug。</p><p><img src="/assets/asm-0.jpg" /></p><p>在debug中发现是：al - 30，从图中看到，nc----&gt;cy发生了借位。</p><p>2.RCL,RCR,RORROL,shl,sar,shr,和cf的关系，看到这么多的命令头都大了，前两个还好说，后几个就有点稍微的蛋疼。</p><p>shl本来还应该有一个sal与之对应，但是实际中确实没有，为什么没有，一直接搞不明白，据说和乘2有关系。也不能说没有其实是，有的只不过是在debug环境下没有在ide环境下是可以用的。</p><p>RCL： al:1100 0011 cf:0 ----&gt;al:1000 0110 cf:1 <imgsrc="/assets/asm-1.jpg" /></p><p>ROL 1000 0000 0 ---------&gt; 0000 0001 1 <imgsrc="/assets/asm-2.jpg" /></p><p>RCR： 1100 0011 0 ---》0110 0001 1 <imgsrc="/assets/asm-3.jpg" /></p><p>ROR 0000 0001 0 -------------》 1000 0000 1</p><p><img src="/assets/asm-4.jpg" /></p><p>SHL 1100 0000 0 -------------》 1000 0000 1</p><p><img src="/assets/asm-5.jpg" /></p><p>SAR 1100 0000 0 --》1110 0000 0<br /><img src="/assets/asm-6.jpg" /></p><p>1<img src="/assets/asm-7.jpg" /> 100 0001 0 -----》 1110 0000 1</p><p>SHR 1000 0001 0 -----》 0100 0000 1 <imgsrc="/assets/asm-8.jpg" /></p><ol start="3" type="1"><li><pre><code class="hljs">              2- (-5)  正数减负数</code></pre></li></ol><p><img src="/assets/asm-9.jpg" /></p><p>0002 0000 0010(2)</p><p>00fb 1111 1011(-5) 111(7)</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
      <tag>微机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微机原理学习-一些问题总结</title>
    <link href="/2012/12/15/backup_asm_some_question.html"/>
    <url>/2012/12/15/backup_asm_some_question.html</url>
    
    <content type="html"><![CDATA[<p>1.cmp al,30</p><ol type="a"><li>是al - 30 还是30 - al?</li></ol><ol type="i"><li>Al- 30</li></ol><p>2.ROR ROL,sal,sar,shr是怎么移动的?</p><p>rar 算术右移</p><p>先移位，最高位仍为原来的数</p><p>1000 0001 0----&gt; 1100 0000 1</p><p>1000 0000 0-----&gt;</p><p>1000 0001 0 ----&gt; 0100 0000 1</p><p>3.02 int 21 al接收不到字符</p><p>;2004级</p><p>assume ds:data,cs:code</p><p>data segment</p><p>buffer db 20,?</p><p>s db 20 dup('?'),'$'</p><p>buffer2 db ?</p><p>data ends</p><p>code segment</p><p>start:</p><p>;初始化</p><p>mov ax,data</p><p>mov ds,ax</p><p>;从键盘读</p><p>lea dx,buffer</p><p>mov ah,0ah</p><p>int 21h</p><p>call huanhang</p><p>;读入要删除的字符</p><p>;从键盘输入的字符无法接收到al中。</p><p>mov al,'b'</p><p>;mov ah,1</p><p>;int 21h</p><p>;删除</p><p>lea si,s</p><p>lea di,s</p><p>mov cl,[buffer+1]</p><p>and ch,00h</p><p>and dh,00h</p><p>again:</p><p>cmp al,[si]</p><p>jz del</p><p>mov bl,[si]</p><p>mov [di],bl</p><p>inc di</p><p>del:</p><p>inc si</p><p>loop again</p><p>mov bl,'$'</p><p>mov [di],bl</p><p>;显示</p><p>lea dx,s</p><p>mov ah,9</p><p>int 21h</p><p>mov ax,4c00h</p><p>int 21h</p><p>huanhang:</p><p>mov dx,0ah</p><p>mov ah,2</p><p>int 21h</p><p>mov dx,0dh</p><p>int 21h</p><p>ret</p><p>code ends</p><p>end start</p><p>4.字符串输出。功能输出问题</p><p>DATAS SEGMENT</p><pre><code class="hljs">BUFFER DB 20       DB ?S DB 20 DUP(?),&#39;$&#39;TET DB &#39;ABCDEGAGAAG&#39;,&#39;$&#39;HUAN DB 0DH,0AH,&#39;$&#39;;此处输入数据段代码  </code></pre><p>DATAS ENDS</p><p>STACKS SEGMENT</p><pre><code class="hljs">;此处输入堆栈段代码</code></pre><p>STACKS ENDS</p><p>CODES SEGMENT</p><pre><code class="hljs">ASSUME CS:CODES,DS:DATAS,SS:STACKS</code></pre><p>START:</p><pre><code class="hljs">MOV AX,DATASMOV DS,AX</code></pre><p>;MOV DX,OFFSET BUFFER</p><pre><code class="hljs">LEA DX,BUFFERMOV AH,0AH</code></pre><p>INT 21H</p><pre><code class="hljs">;LEA SI,[BUFFER+2];MOV DI,160;MOV CL,[BUFFER+1]</code></pre><p>;AND CH,00H</p><p>;CALL DIS</p><p>; 调用9号功能不能正确显示</p><pre><code class="hljs">MOV DX,OFFSET BUFFERMOV AH,9INT 21HMOV AH,4CHINT 21HDIS: MOV BX,0B800HMOV ES,BXAG:</code></pre><p>MOV AL,[SI]</p><p>MOV ES:[DI],AL</p><p>ADD DI,2</p><p>INC SI</p><pre><code class="hljs">LOOP AGRET</code></pre><p>CODES ENDS</p><pre><code class="hljs">END START</code></pre><ol type="1"><li><p>2- (-5)</p><p>2 0000 0010</p><p>00fb 1111 1011(-5)</p><pre><code class="hljs">        111</code></pre></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
      <tag>微机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>“冒泡法”对一组数进行排序</title>
    <link href="/2012/12/10/backup_maopao_paixu.html"/>
    <url>/2012/12/10/backup_maopao_paixu.html</url>
    
    <content type="html"><![CDATA[<p>题目：“冒泡法”对一组数进行排序。</p><p>无序字符表：ASDFGHJKLWERTYUIO4683</p><p>设计要求：按代码值大小升序或降序排列，并显示排序前后字符表。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">assume</span> <span class="hljs-built_in">ds</span>:data,<span class="hljs-built_in">cs</span>:code<br><br><br>data <span class="hljs-meta">segment</span><br><br>table <span class="hljs-built_in">db</span> <span class="hljs-string">&#x27;ASDFGHJKLWERTYUIO4683&#x27;</span><br><br>len = $ -table <br><br>data ends<br><br><br>code <span class="hljs-meta">segment</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">sta:</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,data<br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">0b800h</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>,<span class="hljs-built_in">bx</span><br><br><span class="hljs-keyword">xor</span> <span class="hljs-built_in">di</span>,<span class="hljs-built_in">di</span><br><br><span class="hljs-keyword">call</span> disPlay<br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,len<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">again:</span><br><br><span class="hljs-keyword">xor</span> <span class="hljs-built_in">si</span>,<span class="hljs-built_in">si</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">di</span>,<span class="hljs-number">1</span><br><br><span class="hljs-keyword">push</span> <span class="hljs-built_in">cx</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,len-<span class="hljs-number">1</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">again_2:</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,[<span class="hljs-built_in">si</span>]<br><br><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">al</span>,[<span class="hljs-built_in">di</span>]<br><br><span class="hljs-keyword">jb</span> donot<br><br><span class="hljs-keyword">mov</span> <span class="hljs-number">ah</span>,[<span class="hljs-built_in">di</span>]<br><br><span class="hljs-keyword">mov</span> [<span class="hljs-built_in">si</span>],<span class="hljs-number">ah</span><br><br><span class="hljs-keyword">mov</span> [<span class="hljs-built_in">di</span>],<span class="hljs-built_in">al</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">donot:</span><span class="hljs-keyword">nop</span><br><br><span class="hljs-keyword">inc</span> <span class="hljs-built_in">di</span><br><br><span class="hljs-keyword">inc</span> <span class="hljs-built_in">si</span><br><br><span class="hljs-keyword">loop</span> again_2<br><br><span class="hljs-keyword">pop</span> <span class="hljs-built_in">cx</span><br><br><span class="hljs-keyword">loop</span> again<br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">di</span>,<span class="hljs-number">160</span><br><br><span class="hljs-keyword">call</span> disPlay<br><br><span class="hljs-keyword">mov</span> <span class="hljs-number">ah</span>,<span class="hljs-number">4ch</span><br><br><span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">disPlay:</span><br><br><span class="hljs-keyword">xor</span> <span class="hljs-built_in">si</span>,<span class="hljs-built_in">si</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,len<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">again_3:</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,[<span class="hljs-built_in">si</span>]<br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">di</span>],<span class="hljs-built_in">al</span><br><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">di</span>,<span class="hljs-number">2</span><br><br><span class="hljs-keyword">inc</span> <span class="hljs-built_in">si</span><br><br><span class="hljs-keyword">loop</span> again_3<br><br><span class="hljs-keyword">ret</span><br><br>code ends<br><br>end sta<br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
      <tag>微机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大小写转换</title>
    <link href="/2012/12/10/backup_upper_smaller_convert.html"/>
    <url>/2012/12/10/backup_upper_smaller_convert.html</url>
    
    <content type="html"><![CDATA[<p>大小写转换</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><br><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code,<span class="hljs-built_in">ds</span>:data,<span class="hljs-built_in">ss</span>:stack<br><br><br>stack <span class="hljs-meta">segment</span><br><br><span class="hljs-built_in">db</span> <span class="hljs-number">128</span> dup(<span class="hljs-string">&#x27;?&#x27;</span>)<br><br>stack ends<br><br><br>data <span class="hljs-meta">segment</span><br><br><span class="hljs-built_in">db</span> <span class="hljs-number">8</span> dup(<span class="hljs-string">&#x27;abcdABCD&#x27;</span>)<br><br>big <span class="hljs-built_in">db</span> <span class="hljs-number">64</span> dup(<span class="hljs-string">&#x27;?&#x27;</span>)<br><br>small <span class="hljs-built_in">db</span> <span class="hljs-number">64</span> dup(<span class="hljs-string">&#x27;?&#x27;</span>)<br><br>data ends<br><br><br>code <span class="hljs-meta">segment</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">sta:</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,data<br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,stack<br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ss</span>,<span class="hljs-built_in">ax</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0b800h</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>,<span class="hljs-built_in">ax</span><br><br><span class="hljs-keyword">call</span> toBig<br><br><span class="hljs-keyword">call</span> toSmall<br><br><span class="hljs-keyword">xor</span> <span class="hljs-built_in">di</span>,<span class="hljs-built_in">di</span><br><br><span class="hljs-keyword">push</span> <span class="hljs-built_in">di</span><br><br><span class="hljs-keyword">xor</span> <span class="hljs-built_in">si</span>,<span class="hljs-built_in">si</span><br><br><span class="hljs-keyword">call</span> dis_play<br><br><span class="hljs-keyword">lea</span> <span class="hljs-built_in">si</span>,big<br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">di</span>,<span class="hljs-number">160</span><br><br><span class="hljs-keyword">call</span> dis_play<br><br><span class="hljs-keyword">lea</span> <span class="hljs-built_in">si</span>,small<br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">di</span>,<span class="hljs-number">320</span><br><br><span class="hljs-keyword">call</span> dis_play<br><br><span class="hljs-keyword">mov</span> <span class="hljs-number">ah</span>,<span class="hljs-number">4ch</span><br><br><span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">toBig:</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">64</span><br><br><span class="hljs-keyword">lea</span> <span class="hljs-built_in">di</span>,big<br><br><span class="hljs-keyword">xor</span> <span class="hljs-built_in">si</span>,<span class="hljs-built_in">si</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">again_1:</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,[<span class="hljs-built_in">si</span>]<br><br><span class="hljs-keyword">and</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">0dfh</span><br><br><span class="hljs-keyword">mov</span> [<span class="hljs-built_in">di</span>],<span class="hljs-built_in">al</span><br><br><span class="hljs-keyword">inc</span> <span class="hljs-built_in">si</span><br><br><span class="hljs-keyword">inc</span> <span class="hljs-built_in">di</span><br><br><span class="hljs-keyword">loop</span> again_1<br><br><span class="hljs-keyword">ret</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">toSmall:</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">64</span><br><br><span class="hljs-keyword">lea</span> <span class="hljs-built_in">di</span>,small<br><br><span class="hljs-keyword">xor</span> <span class="hljs-built_in">si</span>,<span class="hljs-built_in">si</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">again_3:</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,[<span class="hljs-built_in">si</span>]<br><br><span class="hljs-keyword">or</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">20h</span><br><br><span class="hljs-keyword">mov</span> [<span class="hljs-built_in">di</span>],<span class="hljs-built_in">al</span><br><br><span class="hljs-keyword">inc</span> <span class="hljs-built_in">si</span><br><br><span class="hljs-keyword">inc</span> <span class="hljs-built_in">di</span><br><br><span class="hljs-keyword">loop</span> again_3<br><br><span class="hljs-keyword">ret</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">dis_play:</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>,<span class="hljs-number">64</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">again:</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,[<span class="hljs-built_in">si</span>]<br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">di</span>],<span class="hljs-built_in">al</span><br><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">di</span>,<span class="hljs-number">2</span><br><br><span class="hljs-keyword">inc</span> <span class="hljs-built_in">si</span><br><br><span class="hljs-keyword">loop</span> again<br><br><span class="hljs-keyword">ret</span><br><br>code ends<br><br>end sta<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
      <tag>微机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用查表法求某数的平方</title>
    <link href="/2012/12/10/backup_view_table_cacl_square.html"/>
    <url>/2012/12/10/backup_view_table_cacl_square.html</url>
    
    <content type="html"><![CDATA[<p>题目：利用查表法求某数的平方设计要求：已知平方数据表格，通过查表指令求某数的平方值。</p><p>分析：（1）表格存放在内存某段地址空间。（2）查表指令(换码指令)：XLAT</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><br><span class="hljs-meta">assume</span> <span class="hljs-built_in">ds</span>:data<br><br>data <span class="hljs-meta">segment</span><br><br>table <span class="hljs-built_in">db</span> <span class="hljs-number">4</span> dup(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>)<br><br>data ends<br><br><br>code <span class="hljs-meta">segment</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">sta:</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,data<br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>,<span class="hljs-built_in">ax</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,offset table<br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">0</span><br><br><span class="hljs-keyword">xlat</span><br><br><span class="hljs-keyword">call</span> disPlay<br><br><span class="hljs-keyword">mov</span> <span class="hljs-number">ah</span>,<span class="hljs-number">4ch</span><br><br><span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">disPlay:</span><br><br><span class="hljs-keyword">xor</span> <span class="hljs-built_in">di</span>,<span class="hljs-built_in">di</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">0b800h</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>,<span class="hljs-built_in">bx</span><br><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">30h</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">di</span>],<span class="hljs-built_in">al</span><br><br><span class="hljs-keyword">ret</span><br><br>code ends<br><br>end sta<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
      <tag>微机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>显示时间</title>
    <link href="/2012/12/02/backup_display_asm.html"/>
    <url>/2012/12/02/backup_display_asm.html</url>
    
    <content type="html"><![CDATA[<p>用汇编在屏幕窗口中显示时间</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><br><span class="hljs-comment">;al存放从cmos的ram中读取的数据，ah中存放数据显示的格式。</span><br><span class="hljs-comment">;es:di 用来指定在屏幕中那个位置显示，以何种样式。</span><br><br><span class="hljs-meta">assume</span> <span class="hljs-built_in">cs</span>:code,<span class="hljs-built_in">ds</span>:data<br>data <span class="hljs-meta">segment</span><br><br>data ends<br><br>code <span class="hljs-meta">segment</span><br><span class="hljs-symbol">  s:</span><br>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>,<span class="hljs-number">0b800h</span> <br>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>,<span class="hljs-built_in">bx</span><br><span class="hljs-symbol">  </span><br><span class="hljs-symbol"> from:</span><br>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">di</span>,<span class="hljs-number">160</span>*<span class="hljs-number">11</span>+<span class="hljs-number">80</span>   <span class="hljs-comment">;es:[di]，di用来存放开始的位置；</span><br> <span class="hljs-comment">;显示时间</span><br>  <span class="hljs-keyword">mov</span> <span class="hljs-number">ah</span>,<span class="hljs-string">&#x27;:&#x27;</span>         <span class="hljs-comment">;;;;;</span><br>  <br>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">4</span><br>  <span class="hljs-keyword">out</span> <span class="hljs-number">70h</span>,<span class="hljs-built_in">al</span><br>  <span class="hljs-keyword">in</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">71h</span><br>  <span class="hljs-comment">;取时</span><br>  <span class="hljs-keyword">call</span> display<br>  <span class="hljs-keyword">call</span> dis_maohao<br>  <span class="hljs-comment">;取分钟</span><br>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">2</span><br>  <span class="hljs-keyword">out</span> <span class="hljs-number">70h</span>,<span class="hljs-built_in">al</span><br>  <span class="hljs-keyword">in</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">71h</span><br>  <br>  <span class="hljs-keyword">call</span> display<br>  <span class="hljs-keyword">call</span> dis_maohao<br>  <span class="hljs-comment">;取秒</span><br>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">0</span><br>  <span class="hljs-keyword">out</span> <span class="hljs-number">70h</span>,<span class="hljs-built_in">al</span><br>  <span class="hljs-keyword">in</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">71h</span><br>  <br>  <span class="hljs-keyword">call</span> display<br>  <br>  <span class="hljs-comment">;显示年份与月份</span><br>  <span class="hljs-keyword">mov</span> <span class="hljs-number">ah</span>,<span class="hljs-string">&#x27;/&#x27;</span><br>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">di</span>,<span class="hljs-number">12</span>*<span class="hljs-number">160</span>+<span class="hljs-number">80</span><br>  <br>     <span class="hljs-comment">;取年份</span><br>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">9</span><br>  <span class="hljs-keyword">out</span> <span class="hljs-number">70h</span>,<span class="hljs-built_in">al</span><br>  <span class="hljs-keyword">in</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">71h</span><br>  <span class="hljs-keyword">call</span> display<br>  <span class="hljs-keyword">call</span> dis_maohao<br>  <span class="hljs-comment">;取月份</span><br>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">8</span><br>  <span class="hljs-keyword">out</span> <span class="hljs-number">70h</span>,<span class="hljs-built_in">al</span><br>  <span class="hljs-keyword">in</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">71h</span><br>  <span class="hljs-keyword">call</span> display<br>  <span class="hljs-keyword">call</span> dis_maohao  <br>  <span class="hljs-comment">;取日期</span><br>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">7</span><br>  <span class="hljs-keyword">out</span> <span class="hljs-number">70h</span>,<span class="hljs-built_in">al</span><br>  <span class="hljs-keyword">in</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">71h</span><br>  <span class="hljs-keyword">call</span> display<br> <span class="hljs-keyword">jmp</span> from<br> <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">4c00h</span><br> <span class="hljs-keyword">int</span> <span class="hljs-number">21h</span><br> <span class="hljs-comment">;子函数</span><br><span class="hljs-symbol"> display:</span><br>   <span class="hljs-keyword">push</span> <span class="hljs-built_in">ax</span><br>   <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cl</span>,<span class="hljs-number">4</span><br>   <span class="hljs-keyword">shr</span> <span class="hljs-built_in">al</span>,<span class="hljs-built_in">cl</span><br>   <span class="hljs-keyword">add</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">48</span><br>   <span class="hljs-keyword">call</span> display_son<br>   <span class="hljs-keyword">pop</span> <span class="hljs-built_in">ax</span><br>   <span class="hljs-keyword">and</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">0fh</span><br>   <span class="hljs-keyword">add</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">48</span><br>   <span class="hljs-keyword">call</span> display_son<br>  <span class="hljs-keyword">ret</span><br><span class="hljs-symbol"> display_son:</span><br>  <span class="hljs-comment">;将al中的数据显示在screen中</span><br>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">di</span>],<span class="hljs-built_in">al</span><br>  <span class="hljs-keyword">inc</span> <span class="hljs-built_in">di</span><br>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">di</span>],<span class="hljs-number">01000010b</span><br>  <span class="hljs-keyword">inc</span> <span class="hljs-built_in">di</span><br>  <br>  <span class="hljs-keyword">ret</span><br><span class="hljs-symbol"> dis_maohao:</span><br>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">di</span>],<span class="hljs-number">ah</span><br>  <span class="hljs-keyword">inc</span> <span class="hljs-built_in">di</span><br>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">di</span>],<span class="hljs-number">01000010b</span><br>  <span class="hljs-keyword">inc</span> <span class="hljs-built_in">di</span><br>  <span class="hljs-keyword">ret</span>  <br>code ends<br>end s<br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
      <tag>微机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汇编中算术左移和逻辑左移操作</title>
    <link href="/2012/11/10/left-move-logic-argebra.html"/>
    <url>/2012/11/10/left-move-logic-argebra.html</url>
    
    <content type="html"><![CDATA[<p>汇编中算术左移和逻辑左移为什么一样？ 想通了 记录一下</p><p>今天看汇编的shl和sal命令一样 很是不解 经过验证得到结果 防止以后忘记记录一下！！！</p><p>逻辑左移 和 算术左移在操作上是一样的 难道就不分有符号和无符号了？？当然不是 其实是这样的 举个例子</p><p>0111 如果是无符号逻辑左移不用说 了 就是把二进制左移就哦了</p><p>0111 如果是有符号的话，左移代表乘以2 然后这个现在是7 乘2 就是1110也就是14了</p><p>那么负数呢？？</p><p>1001 这个是-7的补码 然后左移一位 按照规则变成 0010这怎么不是乘以二了呢？？ 因为溢出了 我们扩展一下</p><p>11111001 扩展负数的话 前四位都是1 这是扩展的-7</p><p>左移：</p><p>11110010 反码 10001101 加一得到补码10001110 哈哈 得到了-14的原码（补码的补码是源码） 就这么简单！</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
      <tag>微机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
